<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TOTO_LOVE</title>
  
  
  <link href="https://totolove.cn/atom.xml" rel="self"/>
  
  <link href="https://totolove.cn/"/>
  <updated>2023-08-25T08:38:02.385Z</updated>
  <id>https://totolove.cn/</id>
  
  <author>
    <name>TOTO_LOVE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器的HSTS策略</title>
    <link href="https://totolove.cn/2023/08/25/Java/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%20HSTS%20%E7%AD%96%E7%95%A5/"/>
    <id>https://totolove.cn/2023/08/25/Java/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%20HSTS%20%E7%AD%96%E7%95%A5/</id>
    <published>2023-08-25T07:57:32.580Z</published>
    <updated>2023-08-25T08:38:02.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器的-HSTS-策略"><a href="#浏览器的-HSTS-策略" class="headerlink" title="浏览器的 HSTS 策略"></a>浏览器的 HSTS 策略</h2><p>一切能通过 https 访问的网址，都用 https 来访问。</p><ul><li><p>使用https 访问网址<font color="#ff9700"><a href="https://xxxxxxx:9999/">https://xxxxxxx:9999/</a></font>，会被浏览器缓存。</p></li><li><p>之后使用http 访问网址<font color="#ff9700"><a href="http://xxxxxxx:9999/">http://xxxxxxx:9999/</a></font>，浏览器会搜索缓存是否有https网址；如果有会被默认307（临时<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&spm=1001.2101.3001.7020">重定向</a>）至https。<span id="more"></span></p></li></ul><blockquote><p>同端口http 到 https 只能通过http1.1 协议升级，或http2。但不建议，也基本没有使用。</p><p>一般是监听80 端口的http 请求，将其转发到443 端口的https 。</p><a href="/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/SpringBoot%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/" title="Java应用--SpringBoot配置SSL证书--JKS格式">Java应用--SpringBoot配置SSL证书--JKS格式</a></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;浏览器的-HSTS-策略&quot;&gt;&lt;a href=&quot;#浏览器的-HSTS-策略&quot; class=&quot;headerlink&quot; title=&quot;浏览器的 HSTS 策略&quot;&gt;&lt;/a&gt;浏览器的 HSTS 策略&lt;/h2&gt;&lt;p&gt;一切能通过 https 访问的网址，都用 https 来访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用https 访问网址&lt;font color=&quot;#ff9700&quot;&gt;&lt;a href=&quot;https://xxxxxxx:9999/&quot;&gt;https://xxxxxxx:9999/&lt;/a&gt;&lt;/font&gt;，会被浏览器缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后使用http 访问网址&lt;font color=&quot;#ff9700&quot;&gt;&lt;a href=&quot;http://xxxxxxx:9999/&quot;&gt;http://xxxxxxx:9999/&lt;/a&gt;&lt;/font&gt;，浏览器会搜索缓存是否有https网址；如果有会被默认307（临时&lt;a href=&quot;https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&amp;spm=1001.2101.3001.7020&quot;&gt;重定向&lt;/a&gt;）至https。</summary>
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="浏览器" scheme="https://totolove.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Mysql--MySQL索引</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mysql%E5%BA%94%E7%94%A8/MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mysql%E5%BA%94%E7%94%A8/MySQL%E7%B4%A2%E5%BC%95/</id>
    <published>2023-08-25T07:57:32.575Z</published>
    <updated>2023-08-25T08:32:06.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>这个现象可能是由于数据量较小时，添加索引会导致MySQL优化器选择不同的执行计划，导致查询变慢。当数据量增加时，索引可以更好地支持查询，因此查询性能才能够得到提高。</p><p>当数据表比较小的时候，索引可能不会为查询带来优势，甚至会拖慢查询速度。这是因为，MySQL优化器会根据查询数据的大小和表结构以及索引的情况来选择执行计划。如果数据量较小，可能会选择全表扫描来进行查询，而不是使用索引。<span id="more"></span></p><p>但是，当数据量逐渐增加时，MySQL优化器会更倾向于使用索引来加速查询，这是因为全表扫描会随着数据量的增加而变得越来越慢，而索引可以更快地定位到需要查询的数据。</p><p>因此，在设计数据库时，通常需要根据实际情况进行索引设计。对于数据量较小的表，可能不需要创建过多的索引，可以通过优化其他方面的查询条件来提高查询性能。而对于数据量较大的表，多创建一些合理的索引是很有必要的，可以提高查询速度，提升数据库的性能。</p></blockquote><h2 id="索引字段在满足业务需求的同时尽量保持小"><a href="#索引字段在满足业务需求的同时尽量保持小" class="headerlink" title="索引字段在满足业务需求的同时尽量保持小"></a>索引字段在满足业务需求的同时尽量保持小</h2><blockquote><p>应该在索引字段的长度满足业务需求的同时尽量保持小。因为在索引中存储的数据量越小，查询时扫描的数据量也就越小，查询速度也就越快。</p><p>如果字符串类型的索引字段长度太长，将会导致索引树分支过多，占用更多的存储空间，在查询时也会降低查询的速度和效率，因此可以采取以下措施：</p><ol><li>如果索引字段长度较长，可以尝试使用前缀索引，只对索引的前几个字符进行索引，这样可以节省存储空间，同时也可以加快查询速度。</li><li>如果业务需求不允许使用前缀索引，则需要权衡长度和查询效率之间的关系，选取合适的索引字段长度。</li></ol><p>综上所述，索引字段长度不应过长，应该根据业务需求选择合适的长度，也可尝试使用前缀索引来优化查询效率。</p><p>测试结果：varchar(100) &#x3D; 0.78;varchar(20)&#x3D;0.45</p></blockquote><h2 id="多个索引时，最左匹配原则"><a href="#多个索引时，最左匹配原则" class="headerlink" title="多个索引时，最左匹配原则"></a>多个索引时，最左匹配原则</h2><blockquote><p>$\textcolor{green}{在多个索引的情况下，根据最左匹配原则，应该优先将常用的查询条件放在索引的最左侧，在此基础上再考虑其他查询条件。} $</p><p>具体来说，假设有以下查询条件：</p><ol><li>A&#x3D;1</li><li>B&#x3D;2</li><li>C&#x3D;3</li></ol><p>如果经常以 A、B、C 依次作为查询条件进行查询，那么最佳的索引顺序应该是 ABC，这样可以让索引最大限度地发挥作用，提高查询效率。如果查询条件的使用频率不同，那么索引的排列顺序也可能需要做出调整。</p><p>此外，还需要注意以下几点：</p><ol><li>防止冗余索引：索引越多，写入时的维护成本就越高，因此需要避免创建大量冗余的索引。</li><li>索引的选择性越高，效果越好：索引的选择性指索引列的离散度，如果索引列的相同值较少，那么索引就会更有效。举个例子，如果索引的列中有 A、B、C、D 四个值，但是其中 A 的占比很高，那么就应该将 A 放在索引的最左侧。</li></ol><p>综上所述，根据最左匹配原则，应该根据查询条件的使用频率和索引选择性来保证索引的优先级，在决定索引的排列顺序时需要权衡多方面因素，包括查询效率、索引的选择性、索引的数量等，以达到一个最佳的索引方案。</p><p>除了最左匹配原则，还有以下几个方面需要注意：</p><ol><li>联合索引的顺序：如果存在联合索引，需要根据最左匹配原则来选择索引列的顺序，并考虑每个索引列的选择性，让选择性最高的列放在最左侧，这样可以让查询效率更高。</li><li>避免重复的索引：重复索引会浪费存储空间，在更新数据时会降低写入性能，因此需要避免创建重复的索引。</li><li>为复合索引减少索引列：复合索引中的索引列越多，查询效率就越低，因此需要选择最少的索引列来满足业务需求。</li><li>不要将所有列都加入索引：虽然索引可以提高查询速度，但是将所有列都加入索引会浪费存储空间，降低索引写入性能，因此需要只对最常用的列或者最有选择性的列进行索引。</li></ol></blockquote><h2 id="索引第一次查询和第二次查询速度差异较大原因"><a href="#索引第一次查询和第二次查询速度差异较大原因" class="headerlink" title="索引第一次查询和第二次查询速度差异较大原因"></a>索引第一次查询和第二次查询速度差异较大原因</h2><blockquote><p>第一次查询耗时0.6秒，第二次查询仅耗时0.2秒</p><p>第一次查询需要从磁盘中读取索引结构和数据页信息，因此查询的耗时较长。而第二次查询时，索引结构和数据页信息已经被读取到内存中，并且可能已经被缓存到更快的存储设备中，因此查询的耗时就会更短。可以说，索引的加速作用不仅限于提高第二次查询的速度，而且还可以加速第一次查询的速度。</p><p>需要注意的是，索引的缓存是一个基于内存的过程。如果索引结构非常大，无法完全缓存在内存中，那么就可能需要在查询时从磁盘中读取索引结构的某些部分，这也会影响查询的速度。因此，在创建索引时需要考虑索引的大小和内存大小之间的平衡，以达到最优的性能和效率。</p></blockquote><h2 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h2><blockquote><p>char和varchar都是表示字符串类型的数据。它们之间的主要区别在于char类型的存储空间是固定的，而varchar类型的存储空间是可变的。</p><p>在创建表时，如果我们知道某个字段的长度是固定的，例如身份证号、邮政编码等，那么使用char类型会更加合适。</p><p>$\textcolor{green}{因为char类型的存储空间是固定的，存储和查询的效率更高，而且对于固定长度字段的优化也更容易实现。同时，在对固定长度字段进行插入和更新操作时，}$</p><p>$\textcolor{green}{也不需要进行额外的空间分配和释放操作。}$ </p><p>而当我们不确定某个字段的长度时，例如用户名、地址等，使用varchar类型会更加合适。因为varchar类型的存储空间是可变的，可以根据实际需要分配空间。这种类型的字符串可以节省存储空间，同时也可以更加灵活地应对复杂的业务场景。</p><p>总的来说，在创建表时，使用char类型比varchar类型更加适合既定长度的字符串，因为char类型的效率更高，更加适用于固定长度字段的优化。而在不确定长度的情况下，使用varchar类型更加灵活和节省存储空间。不同场景下选取适当的数据类型可以提高数据库的性能。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这个现象可能是由于数据量较小时，添加索引会导致MySQL优化器选择不同的执行计划，导致查询变慢。当数据量增加时，索引可以更好地支持查询，因此查询性能才能够得到提高。&lt;/p&gt;
&lt;p&gt;当数据表比较小的时候，索引可能不会为查询带来优势，甚至会拖慢查询速度。这是因为，MySQL优化器会根据查询数据的大小和表结构以及索引的情况来选择执行计划。如果数据量较小，可能会选择全表扫描来进行查询，而不是使用索引。</summary>
    
    
    
    <category term="Mysql" scheme="https://totolove.cn/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://totolove.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql--Mysql 和 内存缓存</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mysql%E5%BA%94%E7%94%A8/Mysql%20%E5%92%8C%20%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mysql%E5%BA%94%E7%94%A8/Mysql%20%E5%92%8C%20%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98/</id>
    <published>2023-08-25T07:57:32.573Z</published>
    <updated>2023-08-25T08:31:37.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="为什么要使用缓存"><a href="#为什么要使用缓存" class="headerlink" title="为什么要使用缓存"></a>为什么要使用缓存</h2><p><code>缓存是走内存的，内存天然就支撑高并发。</code><span id="more"></span></p><h4 id="高性能："><a href="#高性能：" class="headerlink" title="高性能："></a>高性能：</h4><p>对于一些需要复杂操作耗时查出来的结果，且确定后面不怎么变化，但是有很多读请求，那么直接将查询出来的结果放在缓存中，后面直接读缓存就好。</p><p>比如：</p><ol><li>字典这类几乎不会变的数据，但是经常使用到的（所有用户），使用缓存；【修改（管理员）】</li><li>终端分期录入的数据看板：查询 8000+ms，每月录入数据才会变化，故使用缓存；</li></ol><h4 id="高并发："><a href="#高并发：" class="headerlink" title="高并发："></a>高并发：</h4><p>mysql 这么重的数据库，压根儿设计不是让你玩儿高并发的，虽然也可以玩儿，但是天然支持不好。mysql 单机支撑到 <code>2000QPS</code> 也开始容易报警了。</p><p>所以要是你有个系统，高峰期一秒钟过来的请求有 1 万，那一个 mysql 单机绝对会死掉。你这个时候就只能上缓存，把很多数据放缓存，别放 mysql。缓存功能简单，说白了就是 <code>key-value</code> 式操作，单机支撑的并发量轻松一秒几万十几万，支撑高并发 so easy。单机承载并发量是 mysql 单机的几十倍。</p><h2 id="缓存不一致"><a href="#缓存不一致" class="headerlink" title="缓存不一致"></a>缓存不一致</h2><ul><li>最初级的缓存不一致问题及解决方案</li></ul><p>解决思路 1：先删除缓存，再更新数据库。如果数据库更新失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致。因为读的时候缓存没有，所以去读了数据库中的旧数据，然后更新到缓存中。</p><p>解决思路 2：延时双删。依旧是先更新数据库，再删除缓存，唯一不同的是，我们把这个删除的动作，在不久之后再执行一次，比如 5s 之后。</p><ul><li>复杂的数据不一致问题分析</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">存在并发问题，首选延时双删，延迟双删是一种相对简单并且收益比较高的实现最终一致性的方式。</span><br></pre></td></tr></table></figure><p>数据发生了变更，先删除了缓存，然后要去修改数据库，此时还没修改。一个请求过来，去读缓存，发现缓存空了，去查询数据库，<strong>查到了修改前的旧数据</strong>，放到了缓存中。随后数据变更的程序完成了数据库的修改。完了，数据库和缓存中的数据不一样了…</p><p>解决思路：在<strong>删除缓存</strong>之后，间隔一个短暂的时间后<strong>再删除缓存</strong>一次。这样可以避免并发更新时，导致缓存在第一次被删除后，其他线程将读到旧的数据更新到缓存，从而出现不一致的情况。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用缓存&quot;&gt;&lt;a href=&quot;#为什么要使用缓存&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用缓存&quot;&gt;&lt;/a&gt;为什么要使用缓存&lt;/h2&gt;&lt;p&gt;&lt;code&gt;缓存是走内存的，内存天然就支撑高并发。&lt;/code&gt;</summary>
    
    
    
    <category term="Mysql" scheme="https://totolove.cn/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://totolove.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--04 Mybatis源码-基础模块-反射模块</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mybatis/04%20Mybatis%E6%BA%90%E7%A0%81-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97-%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mybatis/04%20Mybatis%E6%BA%90%E7%A0%81-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97-%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97/</id>
    <published>2023-08-25T07:57:32.567Z</published>
    <updated>2023-08-25T08:30:43.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="精尽-MyBatis-源码分析-——-反射模块"><a href="#精尽-MyBatis-源码分析-——-反射模块" class="headerlink" title="精尽 MyBatis 源码分析 —— 反射模块"></a>精尽 MyBatis 源码分析 —— 反射模块</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文，我们来分享 MyBatis 的反射模块，对应 <code>reflection</code> 包。<span id="more"></span>如下图所示：<a href="http://static.iocoder.cn/images/MyBatis/2020_01_10/01.png"><img src="http://totolovefree.top/test/202308071041071.png" alt="`reflection` 包"></a><code>reflection</code> 包</p><ul><li>相比 <code>parsing</code> 包来说，<code>reflection</code> 包的代码量大概是 2-3 倍。当然，不要慌，都是比较简单的代码。</li><li>当然，这是一篇非常非常非常长的博客，因为笔者基本贴了这个模块所有的代码。<strong>如果想要比较好的理解这个模块，胖友一定要基于 MyBatis 提供的这个模块的单元测试，多多调试</strong>。</li></ul><p>在 <a href="http://svip.iocoder.cn/MyBatis/intro">《精尽 MyBatis 源码解析 —— 项目结构一览》</a> 中，简单介绍了这个模块如下：</p><blockquote><p>Java 中的反射虽然功能强大，但对大多数开发人员来说，写出高质量的反射代码还是 有一定难度的。MyBatis 中专门提供了反射模块，该模块对 Java 原生的反射进行了良好的封装，提了更加<strong>简洁易用的 API</strong>，方便上层使调用，并且对<strong>反射操作进行了一系列优化</strong>，例如缓存了类的元数据，提高了反射操作的性能。</p></blockquote><p>下面，我们就来看看具体的源码。因为 <code>reflection</code> 是基础支持层，<strong>所以建议胖友在我们讲解到的类和方法中，打折断点一起来了解</strong>。</p><h1 id="2-Reflector"><a href="#2-Reflector" class="headerlink" title="2. Reflector"></a>2. Reflector</h1><p><code>org.apache.ibatis.reflection.Reflector</code> ，反射器，每个 Reflector 对应一个类。Reflector 会缓存反射操作需要的类的信息，例如：构造方法、属性名、setting &#x2F; getting 方法等等。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对应的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可读属性数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] readablePropertyNames;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可写属性集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] writeablePropertyNames;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性对应的 setting 方法的映射。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key 为属性名称</span></span><br><span class="line"><span class="comment">     * value 为 Invoker 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Invoker&gt; setMethods = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性对应的 getting 方法的映射。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key 为属性名称</span></span><br><span class="line"><span class="comment">     * value 为 Invoker 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Invoker&gt; getMethods = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性对应的 setting 方法的方法参数类型的映射。&#123;<span class="doctag">@link</span> #setMethods&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key 为属性名称</span></span><br><span class="line"><span class="comment">     * value 为方法参数类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; setTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性对应的 getting 方法的返回值类型的映射。&#123;<span class="doctag">@link</span> #getMethods&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key 为属性名称</span></span><br><span class="line"><span class="comment">     * value 为返回值的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; getTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Constructor&lt;?&gt; defaultConstructor;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不区分大小写的属性集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; caseInsensitivePropertyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reflector</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置对应的类</span></span><br><span class="line">        type = clazz;</span><br><span class="line">        <span class="comment">// &lt;1&gt; 初始化 defaultConstructor，无参构造器</span></span><br><span class="line">        addDefaultConstructor(clazz);</span><br><span class="line">        <span class="comment">// 获取该类和任何超类中声明的所有方法。包括私有方法。</span></span><br><span class="line">        Method[] classMethods = getClassMethods(clazz);</span><br><span class="line">        <span class="comment">// 判断是否是记录类（JDK17</span></span><br><span class="line">        <span class="keyword">if</span> (isRecord(type)) &#123;</span><br><span class="line">          addRecordGetMethods(classMethods);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// &lt;2&gt; 初始化 getMethods 和 getTypes ，通过遍历 getting 方法</span></span><br><span class="line">          addGetMethods(classMethods);</span><br><span class="line">          <span class="comment">// &lt;3&gt; setMethods 和 setTypes ，通过遍历 setting 方法。</span></span><br><span class="line">          addSetMethods(classMethods);</span><br><span class="line">          <span class="comment">// &lt;4&gt; 根据初始化的 getMethods + getTypes 和 setMethods + setTypes ，通过遍历获取 fields 属性。</span></span><br><span class="line">          addFields(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &lt;5&gt; 初始化 readablePropertyNames、writeablePropertyNames、caseInsensitivePropertyMap 属性</span></span><br><span class="line">        readablePropertyNames = getMethods.keySet().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">        writablePropertyNames = setMethods.keySet().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String propName : readablePropertyNames) &#123;</span><br><span class="line">          caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String propName : writablePropertyNames) &#123;</span><br><span class="line">          caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略一些方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>type</code> 属性，每个 Reflector 对应的类。</li><li><code>defaultConstructor</code> 属性，默认<strong>无参</strong>构造方法。在 <code>&lt;1&gt;</code> 处初始化，详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.1 addDefaultConstructor」</a> 。</li><li><code>getMethods</code>、<code>getTypes</code> 属性，分别为属性对应的 <strong>getting 方法</strong>、<strong>getting 方法的返回类型</strong>的映射。在 <code>&lt;2&gt;</code> 处初始化，详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.2 addGetMethods」</a> 。</li><li><code>setMethods</code>、<code>setTypes</code> 属性，分别为属性对应的 <strong>setting 方法</strong>、<strong>setting 方法的参数类型</strong>的映射。在 <code>&lt;3&gt;</code> 处初始化，详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.3 addSetMethods」</a> 。</li><li><code>&lt;4&gt;</code> 处，根据初始化的 <code>getMethods</code> + <code>getTypes</code> 和 <code>setMethods</code> + <code>setTypes</code> ，通过遍历获取 fields 属性。详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.4 addFields」</a> 。</li><li><code>&lt;5&gt;</code> 处，初始化 <code>readablePropertyNames</code>、<code>writeablePropertyNames</code>、<code>caseInsensitivePropertyMap</code> 属性。</li></ul><h2 id="2-1-addDefaultConstructor"><a href="#2-1-addDefaultConstructor" class="headerlink" title="2.1 addDefaultConstructor"></a>2.1 addDefaultConstructor</h2><p><code>#addDefaultConstructor(Class&lt;?&gt; clazz)</code> 方法，查找默认无参构造方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addDefaultConstructor</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取所有构造方法</span></span><br><span class="line">    Constructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">    <span class="comment">// 过滤无参构造器方法</span></span><br><span class="line">    Arrays.stream(constructors).filter(constructor -&gt; constructor.getParameterTypes().length == <span class="number">0</span>).findAny()</span><br><span class="line">        .ifPresent(constructor -&gt; <span class="built_in">this</span>.defaultConstructor = constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-addGetMethods"><a href="#2-2-addGetMethods" class="headerlink" title="2.2 addGetMethods"></a>2.2 addGetMethods</h2><p><code>#addGetMethods(Class&lt;?&gt; cls)</code> 方法，初始化 <code>getMethods</code> 和 <code>getTypes</code> ，通过遍历 getting 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addGetMethods</span><span class="params">(Method[] methods)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 属性与其 getting 方法的映射。</span></span><br><span class="line">    Map&lt;String, List&lt;Method&gt;&gt; conflictingGetters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// &lt;2&gt; 遍历所有方法</span></span><br><span class="line">    <span class="comment">// &lt;2.1&gt; 过滤：参数大于 0 ，说明不是 getting 方法，忽略</span></span><br><span class="line">    <span class="comment">// &lt;2.2&gt; 过滤 getting 方法， 以 get 和 is 方法名开头</span></span><br><span class="line">    Arrays.stream(methods).filter(m -&gt; m.getParameterTypes().length == <span class="number">0</span> &amp;&amp; PropertyNamer.isGetter(m.getName()))</span><br><span class="line">        <span class="comment">// &lt;2.3&gt; 添加到 conflictingGetters 中</span></span><br><span class="line">        .forEach(m -&gt; addMethodConflict(conflictingGetters, PropertyNamer.methodToProperty(m.getName()), m));</span><br><span class="line">    <span class="comment">// &lt;3&gt; 解决 getting 冲突方法</span></span><br><span class="line">    resolveGetterConflicts(conflictingGetters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> 处，<code>conflictingGetters</code> 变量，属性与其 getting 方法的映射。因为父类和子类都可能定义了相同属性的 getting 方法，所以 <code>VALUE</code> 会是个数组。</p></li><li><p><code>&lt;2&gt;</code> 处，遍历所有方法，挑选符合的 getting 方法，添加到 <code>conflictingGetters</code> 中。</p><ul><li><p><code>&lt;2.1&gt;</code> 处，方法参数大于 0 ，说明不是 getting 方法，忽略。</p></li><li><p><code>&lt;2.2&gt;</code> 处，过滤 getting 方法， 以 get 和 is 方法名开头。</p></li><li><p><code>&lt;2.3&gt;</code> 处，调用 <code>#addMethodConflict(Map&lt;String, List&lt;Method&gt;&gt; conflictingMethods, String name, Method method)</code> 方法，添加到 <code>conflictingGetters</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addMethodConflict</span><span class="params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingMethods, String name, Method method)</span> &#123;</span><br><span class="line">    List&lt;Method&gt; list = conflictingMethods.computeIfAbsent(name, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list.add(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDK8 编写这样的逻辑，真心方便。</li></ul></li></ul></li><li><p><code>&lt;3&gt;</code> 处，调用 <code>#resolveGetterConflicts(Map&lt;String, List&lt;Method&gt;&gt;)</code> 方法，解决 getting 冲突方法。详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.2.2 resolveGetterConflicts」</a> 。</p></li></ul><h3 id="2-2-1-getClassMethods"><a href="#2-2-1-getClassMethods" class="headerlink" title="2.2.1 getClassMethods"></a>2.2.1 getClassMethods</h3><p><code>#getClassMethods(Class&lt;?&gt; cls)</code> 方法，获得所有方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Method[] getClassMethods(Class&lt;?&gt; cls) &#123;</span><br><span class="line">    <span class="comment">// 每个方法签名与该方法的映射</span></span><br><span class="line">    Map&lt;String, Method&gt; uniqueMethods = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 循环类，类的父类，类的父类的父类，直到父类为 Object</span></span><br><span class="line">    Class&lt;?&gt; currentClass = cls;</span><br><span class="line">    <span class="keyword">while</span> (currentClass != <span class="literal">null</span> &amp;&amp; currentClass != Object.class) &#123;</span><br><span class="line">        <span class="comment">// &lt;1&gt; 记录当前类定义的方法</span></span><br><span class="line">        addUniqueMethods(uniqueMethods, currentClass.getDeclaredMethods());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we also need to look for interface methods -</span></span><br><span class="line">        <span class="comment">// because the class may be abstract</span></span><br><span class="line">        <span class="comment">// &lt;2&gt; 记录接口中定义的方法</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = currentClass.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            addUniqueMethods(uniqueMethods, anInterface.getMethods());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得父类</span></span><br><span class="line">        currentClass = currentClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成 Method 数组返回</span></span><br><span class="line">    Collection&lt;Method&gt; methods = uniqueMethods.values();</span><br><span class="line">    <span class="keyword">return</span> methods.toArray(<span class="keyword">new</span> <span class="title class_">Method</span>[methods.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码比较简单，胖友自己看注释。</p></li><li><p><code>&lt;1&gt;</code> 和 <code>&lt;2&gt;</code> 处，会调用 <code>#addUniqueMethods(Map&lt;String, Method&gt; uniqueMethods, Method[] methods)</code> 方法，添加方法数组到 <code>uniqueMethods</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUniqueMethods</span><span class="params">(Map&lt;String, Method&gt; uniqueMethods, Method[] methods)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Method currentMethod : methods) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!currentMethod.isBridge()) &#123;</span><br><span class="line">            <span class="comment">// &lt;3&gt; 获得方法签名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> getSignature(currentMethod);</span><br><span class="line">            <span class="comment">// check to see if the method is already known</span></span><br><span class="line">            <span class="comment">// if it is known, then an extended class must have</span></span><br><span class="line">            <span class="comment">// overridden a method</span></span><br><span class="line">            <span class="comment">// 当 uniqueMethods 不存在时，进行添加，最终只会存在末级子类的方法</span></span><br><span class="line">            <span class="keyword">if</span> (!uniqueMethods.containsKey(signature)) &#123;</span><br><span class="line">              <span class="comment">// 添加到 uniqueMethods 中</span></span><br><span class="line">              uniqueMethods.put(signature, currentMethod);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;3&gt;</code> 处，会调用 <code>#getSignature(Method method)</code> 方法，获得方法签名。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getSignature</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">// 返回类型</span></span><br><span class="line">    Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">    <span class="keyword">if</span> (returnType != <span class="literal">null</span>) &#123;</span><br><span class="line">        sb.append(returnType.getName()).append(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    sb.append(method.getName());</span><br><span class="line">    <span class="comment">// 方法参数</span></span><br><span class="line">    Class&lt;?&gt;[] parameters = method.getParameterTypes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(parameters[i].getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>格式：<code>returnType#方法名:参数名1,参数名2,参数名3</code> 。</li><li>例如：<code>void#checkPackageAccess:java.lang.ClassLoader,boolean</code> 。</li></ul></li></ul></li></ul><h3 id="2-2-2-resolveGetterConflicts"><a href="#2-2-2-resolveGetterConflicts" class="headerlink" title="2.2.2 resolveGetterConflicts"></a>2.2.2 resolveGetterConflicts</h3><p><code>#resolveGetterConflicts(Map&lt;String, List&lt;Method&gt;&gt;)</code> 方法，解决 getting 冲突方法。最终，一个属性，只保留一个对应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resolveGetterConflicts</span><span class="params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingGetters)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历每个属性，查找其最匹配的方法。因为子类可以覆写父类的方法，所以一个属性，可能对应多个 getting 方法</span></span><br><span class="line">    <span class="comment">// 例如，父类的一个方法的返回值为 List ，子类对该方法的返回值可以覆写为 ArrayList 。</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, List&lt;Method&gt;&gt; entry : conflictingGetters.entrySet()) &#123;</span><br><span class="line">      <span class="type">Method</span> <span class="variable">winner</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 最匹配的方法</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isAmbiguous</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (Method candidate : entry.getValue()) &#123;</span><br><span class="line">        <span class="comment">// winner 为空，设置 candidate 为最匹配的方法</span></span><br><span class="line">        <span class="keyword">if</span> (winner == <span class="literal">null</span>) &#123;</span><br><span class="line">          winner = candidate;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &lt;1&gt; 基于返回类型比较</span></span><br><span class="line">        Class&lt;?&gt; winnerType = winner.getReturnType();</span><br><span class="line">        Class&lt;?&gt; candidateType = candidate.getReturnType();</span><br><span class="line">        <span class="comment">// 返回类型相同</span></span><br><span class="line">        <span class="keyword">if</span> (candidateType.equals(winnerType)) &#123;</span><br><span class="line">          <span class="comment">// 返回值不是 boolean 类型，无法确认哪个为最匹配方法，直接 break，当前方法即最匹配得方法</span></span><br><span class="line">          <span class="keyword">if</span> (!<span class="type">boolean</span>.class.equals(candidateType)) &#123;</span><br><span class="line">            isAmbiguous = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 新的方法，返回值是 boolean 类型，且以`is`开始</span></span><br><span class="line">          <span class="keyword">if</span> (candidate.getName().startsWith(<span class="string">&quot;is&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 设置 candidate 为最匹配的方法</span></span><br><span class="line">            winner = candidate;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// 不符合选择子类</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (candidateType.isAssignableFrom(winnerType)) &#123;</span><br><span class="line">          <span class="comment">// OK getter type is descendant</span></span><br><span class="line">        <span class="comment">// &lt;1.1&gt; 符合选择子类。因为子类可以修改放大返回值。例如，父类的一个方法的返回值为 List ，子类对该方法的返回值可以覆写为 ArrayList 。</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (winnerType.isAssignableFrom(candidateType)) &#123;</span><br><span class="line">          winner = candidate;</span><br><span class="line">        <span class="comment">// &lt;1.2&gt; 非法重载方法，无法确认最匹配方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          isAmbiguous = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// &lt;2&gt; 添加到 getMethods 和 getTypes 中</span></span><br><span class="line">      addGetMethod(propName, winner, isAmbiguous);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>总体比较简单，胖友自己瞅瞅。我们只说两个关键点哈。</p></li><li><p><code>&lt;1&gt;</code> 处，基于返回类型比较。重点在 <code>&lt;1.1&gt;</code> 和 <code>&lt;1.2&gt;</code> 的情况，因为子类可以修改放大返回值，<strong>所以在出现这个情况时，选择子类的该方法</strong>。例如，父类的一个方法的返回值为 List ，子类对该方法的返回值可以覆写为 ArrayList 。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">getXXXX</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; <span class="title function_">getXXXX</span><span class="params">()</span>; <span class="comment">// 选择它</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;2&gt;</code> 处，调用 <code>#addGetMethod(String name, Method method)</code> 方法，添加方法到 <code>getMethods</code> 和 <code>getTypes</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addGetMethod</span><span class="params">(String name, Method method, <span class="type">boolean</span> isAmbiguous)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;2.1&gt; 判断是查找到最匹配的方法。</span></span><br><span class="line">    <span class="type">MethodInvoker</span> <span class="variable">invoker</span> <span class="operator">=</span> isAmbiguous ? <span class="keyword">new</span> <span class="title class_">AmbiguousMethodInvoker</span>(method, MessageFormat.format(</span><br><span class="line">        <span class="string">&quot;Illegal overloaded getter method with ambiguous type for property &#x27;&#x27;&#123;0&#125;&#x27;&#x27; in class &#x27;&#x27;&#123;1&#125;&#x27;&#x27;. This breaks the JavaBeans specification and can cause unpredictable results.&quot;</span>,</span><br><span class="line">        name, method.getDeclaringClass().getName())) : <span class="keyword">new</span> <span class="title class_">MethodInvoker</span>(method);</span><br><span class="line">    <span class="comment">// &lt;2.2&gt; 添加到 getMethods 中</span></span><br><span class="line">    getMethods.put(name, invoker);</span><br><span class="line">    <span class="comment">// &lt;2.3&gt; 添加到 getTypes 中</span></span><br><span class="line">    <span class="type">Type</span> <span class="variable">returnType</span> <span class="operator">=</span> TypeParameterResolver.resolveReturnType(method, type);</span><br><span class="line">    getTypes.put(name, typeToClass(returnType));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;2.1&gt;</code> 处，判断是查找到最匹配的方法。代码如下：</p></li><li><p><code>&lt;2.2&gt;</code> 处，添加到 <code>getMethods</code> 中。此处，我们可以看到一个 MethodInvoker 类，详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「4.3 MethodInvoker」</a> 。</p></li><li><p><code>&lt;2.3&gt;</code> 处，添加到 <code>getTypes</code> 中。</p><ul><li><p>此处，我们可以看到一个 TypeParameterResolver 类，详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「14. TypeParameterResolver」</a> 。</p></li><li><p><code>#typeToClass(Type src)</code> 方法，获得 <code>java.lang.reflect.Type</code> 对应的类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; typeToClass(Type src) &#123;</span><br><span class="line">    Class&lt;?&gt; result = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 普通类型，直接使用类</span></span><br><span class="line">    <span class="keyword">if</span> (src <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">        result = (Class&lt;?&gt;) src;</span><br><span class="line">    <span class="comment">// 泛型类型，使用泛型</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (src <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        result = (Class&lt;?&gt;) ((ParameterizedType) src).getRawType();</span><br><span class="line">    <span class="comment">// 泛型数组，获得具体类</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (src <span class="keyword">instanceof</span> GenericArrayType) &#123;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">componentType</span> <span class="operator">=</span> ((GenericArrayType) src).getGenericComponentType();</span><br><span class="line">        <span class="keyword">if</span> (componentType <span class="keyword">instanceof</span> Class) &#123; <span class="comment">// 普通类型</span></span><br><span class="line">            result = Array.newInstance((Class&lt;?&gt;) componentType, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class&lt;?&gt; componentClass = typeToClass(componentType); <span class="comment">// 递归该方法，返回类</span></span><br><span class="line">            result = Array.newInstance(componentClass, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都不符合，使用 Object 类</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        result = Object.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，就是寻找 Type 真正对应的类。</li></ul></li></ul></li></ul></li></ul><h2 id="2-3-addSetMethods"><a href="#2-3-addSetMethods" class="headerlink" title="2.3 addSetMethods"></a>2.3 addSetMethods</h2><p><code>#addSetMethods(Class&lt;?&gt; cls)</code> 方法，初始化 <code>setMethods</code> 和 <code>setTypes</code> ，通过遍历 setting 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSetMethods</span><span class="params">(Method[] methods)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性与其 setting 方法的映射。</span></span><br><span class="line">    Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 过滤所有方法，</span></span><br><span class="line">    <span class="comment">// &lt;1&gt; 方法名为 set 开头，参数数量为 1</span></span><br><span class="line">    Arrays.stream(methods).filter(m -&gt; m.getParameterTypes().length == <span class="number">1</span> &amp;&amp; PropertyNamer.isSetter(m.getName()))</span><br><span class="line">    <span class="comment">// 获得属性，添加到 conflictingSetters 中</span></span><br><span class="line">        .forEach(m -&gt; addMethodConflict(conflictingSetters, PropertyNamer.methodToProperty(m.getName()), m));</span><br><span class="line">    <span class="comment">// &lt;2&gt; 解决 setting 冲突方法</span></span><br><span class="line">    resolveSetterConflicts(conflictingSetters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总体逻辑和 <code>#addGetMethods(Class&lt;?&gt; cls)</code> 方法差不多。主要差异点在 <code>&lt;1&gt;</code> 和 <code>&lt;2&gt;</code> 处。因为 <code>&lt;1&gt;</code> 一眼就能明白，所以我们只看 <code>&lt;2&gt;</code> ，调用 <code>#resolveSetterConflicts(Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters)</code> 方法，解决 setting 冲突方法。详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.3.1 resolveSetterConflicts」</a> 中。</li></ul><h3 id="2-3-1-resolveSetterConflicts"><a href="#2-3-1-resolveSetterConflicts" class="headerlink" title="2.3.1 resolveSetterConflicts"></a>2.3.1 resolveSetterConflicts</h3><p><code>#resolveSetterConflicts(Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters)</code> 方法，解决 setting 冲突方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resolveSetterConflicts</span><span class="params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历每个属性，查找其最匹配的方法。因为子类可以覆写父类的方法，所以一个属性，可能对应多个 setting 方法</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, List&lt;Method&gt;&gt; entry : conflictingSetters.entrySet()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">      List&lt;Method&gt; setters = entry.getValue();</span><br><span class="line">      Class&lt;?&gt; getterType = getTypes.get(propName);</span><br><span class="line">      <span class="comment">// 判断属性的 getting 方法是否是歧义的 AmbiguousMethodInvoker</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isGetterAmbiguous</span> <span class="operator">=</span> getMethods.get(propName) <span class="keyword">instanceof</span> AmbiguousMethodInvoker;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isSetterAmbiguous</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">Method</span> <span class="variable">match</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// &lt;1&gt; 遍历属性对应的 setting 方法</span></span><br><span class="line">      <span class="keyword">for</span> (Method setter : setters) &#123;</span><br><span class="line">        <span class="comment">// 和 getterType 相同，直接使用</span></span><br><span class="line">        <span class="keyword">if</span> (!isGetterAmbiguous &amp;&amp; setter.getParameterTypes()[<span class="number">0</span>].equals(getterType)) &#123;</span><br><span class="line">          <span class="comment">// should be the best match</span></span><br><span class="line">          match = setter;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isSetterAmbiguous) &#123;</span><br><span class="line">          <span class="comment">// 选择一个更加匹配的</span></span><br><span class="line">          match = pickBetterSetter(match, setter, propName);</span><br><span class="line">          isSetterAmbiguous = match == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// &lt;2&gt; 添加到 setMethods 和 setTypes 中</span></span><br><span class="line">      <span class="keyword">if</span> (match != <span class="literal">null</span>) &#123;</span><br><span class="line">        addSetMethod(propName, match);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>总体比较简单，胖友自己瞅瞅。我们只说两个关键点哈。</p></li><li><p><code>&lt;1&gt;</code> 处，解决冲突 setting 方法的方式，实际和 getting 方法的方式是<strong>不太一样</strong>的。首先，多的就是考虑了对应的 <code>getterType</code> 为优先级<strong>最高</strong>。其次，<code>#pickBetterSetter(Method setter1, Method setter2, String property)</code> 方法，选择一个更加匹配的，和 getting 方法是<strong>相同</strong>的，因为要选择精准的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Method <span class="title function_">pickBetterSetter</span><span class="params">(Method setter1, Method setter2, String property)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (setter1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> setter2;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; paramType1 = setter1.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">    Class&lt;?&gt; paramType2 = setter2.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (paramType1.isAssignableFrom(paramType2)) &#123;</span><br><span class="line">        <span class="keyword">return</span> setter2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramType2.isAssignableFrom(paramType1)) &#123;</span><br><span class="line">        <span class="keyword">return</span> setter1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReflectionException</span>(<span class="string">&quot;Ambiguous setters defined for property &#x27;&quot;</span> + property + <span class="string">&quot;&#x27; in class &#x27;&quot;</span></span><br><span class="line">            + setter2.getDeclaringClass() + <span class="string">&quot;&#x27; with types &#x27;&quot;</span> + paramType1.getName() + <span class="string">&quot;&#x27; and &#x27;&quot;</span></span><br><span class="line">            + paramType2.getName() + <span class="string">&quot;&#x27;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>胖友在体会体会。感谢【闷油壶】同学指出问题。</li></ul></li><li><p><code>&lt;2&gt;</code> 处，调用 <code>#addSetMethod(String name, Method method)</code> 方法，添加到 <code>setMethods</code> 和 <code>setTypes</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSetMethod</span><span class="params">(String name, Method method)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isValidPropertyName(name)) &#123;</span><br><span class="line">        <span class="comment">// 添加到 setMethods 中</span></span><br><span class="line">        setMethods.put(name, <span class="keyword">new</span> <span class="title class_">MethodInvoker</span>(method));</span><br><span class="line">        <span class="comment">// 添加到 setTypes 中</span></span><br><span class="line">        Type[] paramTypes = TypeParameterResolver.resolveParamTypes(method, type);</span><br><span class="line">        setTypes.put(name, typeToClass(paramTypes[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，和 <code>#addGetMethod(String name, Method method)</code> 方法是类似的。</li></ul></li></ul><h2 id="2-4-addFields"><a href="#2-4-addFields" class="headerlink" title="2.4 addFields"></a>2.4 addFields</h2><p><code>#addFields(Class&lt;?&gt; clazz)</code> 方法，初始化 <code>getMethods</code> + <code>getTypes</code> 和 <code>setMethods</code> + <code>setTypes</code> ，通过遍历 fields 属性。实际上，它是 <code>#addGetMethods(...)</code> 和 <code>#addSetMethods(...)</code> 方法的补充，因为有些 field ，不存在对应的 setting 或 getting 方法，<strong>所以直接使用对应的 field</strong> ，而不是方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addFields</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">    <span class="comment">// 获得所有 field 们</span></span><br><span class="line">    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      <span class="comment">// &lt;1&gt; 添加到 setMethods 和 setTypes 中</span></span><br><span class="line">      <span class="keyword">if</span> (!setMethods.containsKey(field.getName())) &#123;</span><br><span class="line">        <span class="comment">// issue #379 - removed the check for final because JDK 1.5 allows</span></span><br><span class="line">        <span class="comment">// modification of final fields through reflection (JSR-133). (JGB)</span></span><br><span class="line">        <span class="comment">// pr #16 - final static can only be set by the classloader</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getModifiers(); <span class="comment">// 返回字段修饰符</span></span><br><span class="line">        <span class="comment">// 非final、static属性</span></span><br><span class="line">        <span class="keyword">if</span> ((!Modifier.isFinal(modifiers) || !Modifier.isStatic(modifiers))) &#123;</span><br><span class="line">          addSetField(field);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加到 getMethods 和 getTypes 中</span></span><br><span class="line">      <span class="keyword">if</span> (!getMethods.containsKey(field.getName())) &#123;</span><br><span class="line">        addGetField(field);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归，处理父类</span></span><br><span class="line">    <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>) &#123;</span><br><span class="line">      addFields(clazz.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> 处，若 <code>setMethods</code> 不存在，则调用 <code>#addSetField(Field field)</code> 方法，添加到 <code>setMethods</code> 和 <code>setTypes</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSetField</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是合理的属性</span></span><br><span class="line">    <span class="keyword">if</span> (isValidPropertyName(field.getName())) &#123;</span><br><span class="line">        <span class="comment">// 添加到 setMethods 中</span></span><br><span class="line">        setMethods.put(field.getName(), <span class="keyword">new</span> <span class="title class_">SetFieldInvoker</span>(field));</span><br><span class="line">        <span class="comment">// 添加到 setTypes 中</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">fieldType</span> <span class="operator">=</span> TypeParameterResolver.resolveFieldType(field, type);</span><br><span class="line">        setTypes.put(field.getName(), typeToClass(fieldType));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，此处创建的是 SetFieldInvoker 对象。详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「4.2 SetFieldInvoker」</a> 。</li></ul></li><li><p><code>&lt;2&gt;</code> 处，若 <code>getMethods</code> 不存在，则调用 <code>#addGetField(Field field)</code> 方法，添加到 <code>getMethods</code> 和 <code>getTypes</code> 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addGetField</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是合理的属性</span></span><br><span class="line">    <span class="keyword">if</span> (isValidPropertyName(field.getName())) &#123;</span><br><span class="line">        <span class="comment">// 添加到 getMethods 中</span></span><br><span class="line">        getMethods.put(field.getName(), <span class="keyword">new</span> <span class="title class_">GetFieldInvoker</span>(field));</span><br><span class="line">        <span class="comment">// 添加到 getMethods 中</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">fieldType</span> <span class="operator">=</span> TypeParameterResolver.resolveFieldType(field, type);</span><br><span class="line">        getTypes.put(field.getName(), typeToClass(fieldType));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，此处创建的是 GetFieldInvoker 对象。详细解析，，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「4.1 GetFieldInvoker」</a> 。</li></ul></li></ul><h2 id="2-5-其它方法"><a href="#2-5-其它方法" class="headerlink" title="2.5 其它方法"></a>2.5 其它方法</h2><p>Reflector 中，还有其它方法，用于对它的属性进行访问。比较简单，感兴趣的胖友，自己来瞅瞅。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Invoker <span class="title function_">getSetInvoker</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">    <span class="type">Invoker</span> <span class="variable">method</span> <span class="operator">=</span> setMethods.get(propertyName);</span><br><span class="line">    <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReflectionException</span>(<span class="string">&quot;There is no setter for property named &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27; in &#x27;&quot;</span> + type + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-ReflectorFactory"><a href="#3-ReflectorFactory" class="headerlink" title="3. ReflectorFactory"></a>3. ReflectorFactory</h1><p><code>org.apache.ibatis.reflection.ReflectorFactory</code> ，Reflector 工厂接口，用于创建和缓存 Reflector 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReflectorFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReflectorFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否缓存 Reflector 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isClassCacheEnabled</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置是否缓存 Reflector 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classCacheEnabled 是否缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setClassCacheEnabled</span><span class="params">(<span class="type">boolean</span> classCacheEnabled)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Reflector 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 指定类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Reflector 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Reflector <span class="title function_">findForClass</span><span class="params">(Class&lt;?&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-DefaultReflectorFactory"><a href="#3-1-DefaultReflectorFactory" class="headerlink" title="3.1 DefaultReflectorFactory"></a>3.1 DefaultReflectorFactory</h2><p><code>org.apache.ibatis.reflection.DefaultReflectorFactory</code> ，实现 ReflectorFactory 接口，默认的 ReflectorFactory 实现类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultReflectorFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultReflectorFactory</span> <span class="keyword">implements</span> <span class="title class_">ReflectorFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">classCacheEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reflector 的缓存映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * KEY：类</span></span><br><span class="line"><span class="comment">     * VALUE：Reflector 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Reflector&gt; reflectorMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultReflectorFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isClassCacheEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classCacheEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassCacheEnabled</span><span class="params">(<span class="type">boolean</span> classCacheEnabled)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classCacheEnabled = classCacheEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Reflector <span class="title function_">findForClass</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启缓存，则从 reflectorMap 中获取</span></span><br><span class="line">        <span class="keyword">if</span> (classCacheEnabled) &#123;</span><br><span class="line">          <span class="comment">// synchronized (type) removed see issue #461</span></span><br><span class="line">          <span class="keyword">return</span> MapUtil.computeIfAbsent(reflectorMap, type, Reflector::<span class="keyword">new</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭缓存，则创建 Reflector 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reflector</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，胖友一眼就能看懂。</li></ul><h1 id="4-Invoker"><a href="#4-Invoker" class="headerlink" title="4. Invoker"></a>4. Invoker</h1><p><code>org.apache.ibatis.reflection.invoker.Invoker</code> ，调用者接口。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Invoker.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">invoke</span><span class="params">(Object target, Object[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; getType();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>核心是 <code>#invoke(Object target, Object[] args)</code> 方法，执行一次调用。而具体调用什么方法，由子类来实现。</li></ul><h2 id="4-1-GetFieldInvoker"><a href="#4-1-GetFieldInvoker" class="headerlink" title="4.1 GetFieldInvoker"></a>4.1 GetFieldInvoker</h2><p><code>org.apache.ibatis.reflection.invoker.GetFieldInvoker</code> ，实现 Invoker 接口，获得 Field 调用者。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetFieldInvoker.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFieldInvoker</span> <span class="keyword">implements</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Field 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Field field;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GetFieldInvoker</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.field = field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得属性</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object target, Object[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> field.get(target);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="comment">// 判断字段是否可以修改可访问性</span></span><br><span class="line">            <span class="keyword">if</span> (Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                <span class="comment">// 设置字段允许访问</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> field.get(target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回属性类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getType() &#123;</span><br><span class="line">        <span class="keyword">return</span> field.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-SetFieldInvoker"><a href="#4-2-SetFieldInvoker" class="headerlink" title="4.2 SetFieldInvoker"></a>4.2 SetFieldInvoker</h2><p><code>org.apache.ibatis.reflection.invoker.SetFieldInvoker</code> ，实现 Invoker 接口，设置 Field 调用者。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetFieldInvoker.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetFieldInvoker</span> <span class="keyword">implements</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Field 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Field field;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SetFieldInvoker</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.field = field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 Field 属性</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object target, Object[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field.set(target, args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="comment">// 判断字段是否可以修改可访问性</span></span><br><span class="line">            <span class="keyword">if</span> (!Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置字段允许访问</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(target, args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回属性类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getType() &#123;</span><br><span class="line">        <span class="keyword">return</span> field.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-MethodInvoker"><a href="#4-3-MethodInvoker" class="headerlink" title="4.3 MethodInvoker"></a>4.3 MethodInvoker</h2><p><code>org.apache.ibatis.reflection.invoker.MethodInvoker</code> ，实现 Invoker 接口，指定方法的调用器。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MethodInvoker.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodInvoker</span> <span class="keyword">implements</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MethodInvoker</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.method = method;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数大小为 1 时，一般是 setting 方法，设置 type 为方法参数[0]</span></span><br><span class="line">        <span class="keyword">if</span> (method.getParameterTypes().length == <span class="number">1</span>) &#123;</span><br><span class="line">            type = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 否则，一般是 getting 方法，设置 type 为返回类型</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            type = method.getReturnType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行指定方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object target, Object[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="comment">// 判断字段是否可以修改可访问性</span></span><br><span class="line">            <span class="keyword">if</span> (Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                <span class="comment">// 设置字段允许访问</span></span><br><span class="line">                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getType() &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-ObjectFactory"><a href="#5-ObjectFactory" class="headerlink" title="5. ObjectFactory"></a>5. ObjectFactory</h1><p><code>org.apache.ibatis.reflection.factory.ObjectFactory</code> ，Object 工厂接口，用于创建指定类的对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置 Properties</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Sets configuration properties.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> properties configuration properties</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建指定类的对象，使用默认构造方法</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Creates a new object with default constructor.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> type Object type</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates a new object with the specified constructor and params.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 创建指定类的对象，使用特定的构造方法</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> type Object type</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> constructorArgTypes Constructor argument types 指定构造方法的参数列表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> constructorArgs Constructor argument values 参数数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns true if this object can have a set of other objects.</span></span><br><span class="line"><span class="comment">   * It&#x27;s main purpose is to support non-java.util.Collection objects like Scala collections.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 判断指定类是否为集合类</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> type Object type</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> whether it is a collection or not</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 3.1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  &lt;T&gt; <span class="type">boolean</span> <span class="title function_">isCollection</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，一共有三类方法。</li></ul><h2 id="5-1-DefaultObjectFactory"><a href="#5-1-DefaultObjectFactory" class="headerlink" title="5.1 DefaultObjectFactory"></a>5.1 DefaultObjectFactory</h2><p><code>org.apache.ibatis.reflection.factory.DefaultObjectFactory</code> ，实现 ObjectFactory、Serializable 接口，默认 ObjectFactory 实现类。</p><h3 id="5-1-1-create"><a href="#5-1-1-create" class="headerlink" title="5.1.1 create"></a>5.1.1 create</h3><p><code>#create(Class&lt;T&gt; type, ...)</code> 方法，创建指定类的对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> create(type, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 获得需要创建的类</span></span><br><span class="line">    Class&lt;?&gt; classToCreate = resolveInterface(type);</span><br><span class="line">    <span class="comment">// we know types are assignable</span></span><br><span class="line">    <span class="comment">// &lt;2&gt; 创建指定类的对象</span></span><br><span class="line">    <span class="keyword">return</span> (T) instantiateClass(classToCreate, constructorArgTypes, constructorArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> 处，调用 <code>#resolveInterface(Class&lt;?&gt; type)</code> 方法，获得需要创建的类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveInterface(Class&lt;?&gt; type) &#123;</span><br><span class="line">    Class&lt;?&gt; classToCreate;</span><br><span class="line">    <span class="keyword">if</span> (type == List.class || type == Collection.class || type == Iterable.class) &#123;</span><br><span class="line">        classToCreate = ArrayList.class;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == Map.class) &#123;</span><br><span class="line">        classToCreate = HashMap.class;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == SortedSet.class) &#123; <span class="comment">// issue #510 Collections Support</span></span><br><span class="line">        classToCreate = TreeSet.class;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == Set.class) &#123;</span><br><span class="line">        classToCreate = HashSet.class;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classToCreate = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classToCreate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于我们常用的<strong>集合接口</strong>，返回对应的实现类。</li></ul></li><li><p><code>&lt;2&gt;</code> 处，调用 <code>#instantiateClass(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</code> 方法，创建指定类的对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; T <span class="title function_">instantiateClass</span><span class="params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Constructor&lt;T&gt; constructor;</span><br><span class="line">        <span class="comment">// &lt;x1&gt; 通过无参构造方法，创建指定类的对象</span></span><br><span class="line">        <span class="keyword">if</span> (constructorArgTypes == <span class="literal">null</span> || constructorArgs == <span class="literal">null</span>) &#123;</span><br><span class="line">            constructor = type.getDeclaredConstructor();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &lt;x2&gt; 使用特定构造方法，创建指定类的对象</span></span><br><span class="line">        constructor = type.getDeclaredConstructor(constructorArgTypes.toArray(<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(constructorArgs.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> constructor.newInstance(constructorArgs.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 拼接 argTypes</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">argTypes</span> <span class="operator">=</span> Optional.ofNullable(constructorArgTypes).orElseGet(Collections::emptyList).stream()</span><br><span class="line">            .map(Class::getSimpleName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="comment">// 拼接 argValues</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">argValues</span> <span class="operator">=</span> Optional.ofNullable(constructorArgs).orElseGet(Collections::emptyList).stream()</span><br><span class="line">            .map(String::valueOf).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="comment">// 抛出 ReflectionException 异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReflectionException</span>(<span class="string">&quot;Error instantiating &quot;</span> + type + <span class="string">&quot; with invalid types (&quot;</span> + argTypes + <span class="string">&quot;) or values (&quot;</span></span><br><span class="line">                                      + argValues + <span class="string">&quot;). Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，分成 <code>&lt;x1&gt;</code>、<code>&lt;x2&gt;</code> 两种情况。</li></ul></li></ul><h3 id="5-1-2-isCollection"><a href="#5-1-2-isCollection" class="headerlink" title="5.1.2 isCollection"></a>5.1.2 isCollection</h3><p><code>#isCollection(Class&lt;T&gt; type)</code> 方法，判断指定类是否为集合类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">isCollection</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collection.class.isAssignableFrom(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断是否为 <code>java.util.Collection</code> 的子类。</li></ul><h3 id="5-1-3-setProperties"><a href="#5-1-3-setProperties" class="headerlink" title="5.1.3 setProperties"></a>5.1.3 setProperties</h3><p><code>#setProperties(Properties properties)</code> 方法，设置 Properties 。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultObjectFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    <span class="comment">// no props for default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>目前是个空实现。所以，暂时可以忽略这个方法。</li></ul><h1 id="6-Property-工具类"><a href="#6-Property-工具类" class="headerlink" title="6. Property 工具类"></a>6. Property 工具类</h1><p><code>org.apache.ibatis.reflection.property</code> 包下，提供了 PropertyCopier、PropertyNamer、PropertyTokenizer 三个属性相关的工具类。接下来，我们逐小节来解析。</p><h2 id="6-1-PropertyCopier"><a href="#6-1-PropertyCopier" class="headerlink" title="6.1 PropertyCopier"></a>6.1 PropertyCopier</h2><p><code>org.apache.ibatis.reflection.property.PropertyCopier</code> ，属性复制器。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyNamer.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PropertyCopier</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PropertyCopier</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Prevent Instantiation of Static Class</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 sourceBean 的属性，复制到 destinationBean 中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 指定类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceBean 来源 Bean 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destinationBean 目标 Bean 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyBeanProperties</span><span class="params">(Class&lt;?&gt; type, Object sourceBean, Object destinationBean)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; parent = type;</span><br><span class="line">        <span class="comment">// 循环，从当前类开始，不断复制到父类，直到父类不存在</span></span><br><span class="line">        <span class="keyword">while</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得当前 parent 类定义的属性</span></span><br><span class="line">            <span class="keyword">final</span> Field[] fields = parent.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 从 sourceBean 中，复制到 destinationBean 去</span></span><br><span class="line">                        field.set(destinationBean, field.get(sourceBean));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        <span class="comment">// 是否可以修改可访问性</span></span><br><span class="line">                        <span class="keyword">if</span> (!Reflector.canControlMemberAccessible()) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 设置属性可访问</span></span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="comment">// 从 sourceBean 中，复制到 destinationBean 去</span></span><br><span class="line">                        field.set(destinationBean, field.get(sourceBean));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// Nothing useful to do, will only fail on final fields, which will be ignored.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获得父类</span></span><br><span class="line">            parent = parent.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，胖友一眼看懂。</li></ul><h2 id="6-2-PropertyNamer"><a href="#6-2-PropertyNamer" class="headerlink" title="6.2 PropertyNamer"></a>6.2 PropertyNamer</h2><p><code>org.apache.ibatis.reflection.property.PropertyNamer</code> ，属性名相关的工具类方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PropertyNamer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PropertyNamer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Prevent Instantiation of Static Class</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据方法名，获得对应的属性名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">methodToProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// is 方法</span></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;is&quot;</span>)) &#123;</span><br><span class="line">            name = name.substring(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// get 或者 set 方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">            name = name.substring(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 抛出 ReflectionException 异常，因为只能处理 is、set、get 方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReflectionException</span>(<span class="string">&quot;Error parsing property name &#x27;&quot;</span> + name + <span class="string">&quot;&#x27;.  Didn&#x27;t start with &#x27;is&#x27;, &#x27;get&#x27; or &#x27;set&#x27;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首字母小写</span></span><br><span class="line">        <span class="keyword">if</span> (name.length() == <span class="number">1</span> || (name.length() &gt; <span class="number">1</span> &amp;&amp; !Character.isUpperCase(name.charAt(<span class="number">1</span>)))) &#123;</span><br><span class="line">            name = name.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase(Locale.ENGLISH) + name.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为 is、get、set 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;set&quot;</span>) || name.startsWith(<span class="string">&quot;is&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为 get、is 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isGetter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;is&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为 set 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSetter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.startsWith(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，胖友一眼看懂。</li></ul><h2 id="6-3-PropertyTokenizer"><a href="#6-3-PropertyTokenizer" class="headerlink" title="6.3 PropertyTokenizer"></a>6.3 PropertyTokenizer</h2><p><code>org.apache.ibatis.reflection.property.PropertyTokenizer</code> ，实现 Iterator 接口，属性分词器，支持迭代器的访问方式。</p><p>举个例子，在访问 <code>&quot;order[0].item[0].name&quot;</code> 时，我们希望拆分成 <code>&quot;order[0]&quot;</code>、<code>&quot;item[0]&quot;</code>、<code>&quot;name&quot;</code> 三段，那么就可以通过 PropertyTokenizer 来实现。</p><h3 id="6-3-1-构造方法"><a href="#6-3-1-构造方法" class="headerlink" title="6.3.1 构造方法"></a>6.3.1 构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyTokenizer.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引的 &#123;<span class="doctag">@link</span> #name&#125; ，因为 &#123;<span class="doctag">@link</span> #name&#125; 如果存在 &#123;<span class="doctag">@link</span> #index&#125; 会被更改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String indexedName;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编号。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 对于数组 name[0] ，则 index = 0</span></span><br><span class="line"><span class="comment"> * 对于 Map map[key] ，则 index = key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String index;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 剩余字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String children;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PropertyTokenizer</span><span class="params">(String fullname)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 初始化 name、children 字符串，使用 . 作为分隔</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">delim</span> <span class="operator">=</span> fullname.indexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        name = fullname.substring(<span class="number">0</span>, delim);</span><br><span class="line">        children = fullname.substring(delim + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        name = fullname;</span><br><span class="line">        children = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;2&gt; 记录当前 name</span></span><br><span class="line">    indexedName = name;</span><br><span class="line">    <span class="comment">// 若存在 [ ，则获得 index ，并修改 name 。</span></span><br><span class="line">    delim = name.indexOf(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        index = name.substring(delim + <span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">        name = name.substring(<span class="number">0</span>, delim);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code> 属性，当前字符串。</li><li><code>children</code> 属性，剩余字符串。</li><li><code>&lt;1&gt;</code> 处，初始化 <code>name</code>、<code>children</code> 字符串，使用 <code>&#39;.&#39;</code> 作为分隔。</li><li><code>indexedName</code> 属性，索引的 <code>name</code> 属性，因为 <code>name</code> 如果存在 <code>index</code> 会被更改。</li><li><code>&lt;2&gt;</code> 处，记录当前 <code>name</code> 。</li><li>index属性，编号。分成两种情况：<ul><li><code>name</code> 为数组 <code>item[0]</code> 时，则 <code>index</code> 为 <code>&quot;0&quot;</code> 。</li><li><code>name</code> 为 Map <code>map[key]</code> 时，则 <code>index</code> 为 <code>&quot;key&quot;</code> 。</li></ul></li><li><code>&lt;3&gt;</code> 处，初始化 <code>index</code> ，并修改 <code>name</code> 字符串，使用 <code>&#39;[&#39;</code> 作为分隔符。</li></ul><h3 id="6-3-2-next"><a href="#6-3-2-next" class="headerlink" title="6.3.2 next"></a>6.3.2 next</h3><p><code>#next()</code> 方法，迭代获得下一个 PropertyTokenizer 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyTokenizer.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PropertyTokenizer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>酱紫，它又会执行<a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「6.3.1 构造方法」</a> 的流程。</li></ul><h3 id="6-3-3-hasNext"><a href="#6-3-3-hasNext" class="headerlink" title="6.3.3 hasNext"></a>6.3.3 hasNext</h3><p><code>#hasNext()</code> 方法，判断是否有下一个元素。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyTokenizer.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-其它方法"><a href="#6-3-4-其它方法" class="headerlink" title="6.3.4 其它方法"></a>6.3.4 其它方法</h3><p>PropertyTokenizer 中，还有其它方法，比较简单，感兴趣的胖友，自己来瞅瞅。</p><h1 id="7-MetaClass"><a href="#7-MetaClass" class="headerlink" title="7. MetaClass"></a>7. MetaClass</h1><p><code>org.apache.ibatis.reflection.MetaClass</code> ，类的元数据，基于 Reflector 和 PropertyTokenizer ，提供对指定类的各种骚操作。</p><h2 id="7-1-构造方法"><a href="#7-1-构造方法" class="headerlink" title="7.1 构造方法"></a>7.1 构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReflectorFactory reflectorFactory;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Reflector reflector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">MetaClass</span><span class="params">(Class&lt;?&gt; type, ReflectorFactory reflectorFactory)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.reflectorFactory = reflectorFactory;</span><br><span class="line">    <span class="built_in">this</span>.reflector = reflectorFactory.findForClass(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过构造方法，我们可以看出，一个 MetaClass 对象，对应一个 Class 对象。</li></ul><p>目前有两个方法会涉及到调用该构造方法:</p><ul><li><p>① <code>#forClass(Class&lt;?&gt; type, ReflectorFactory reflectorFactory)</code> <strong>静态</strong>方法，创建指定类的 MetaClass 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MetaClass <span class="title function_">forClass</span><span class="params">(Class&lt;?&gt; type, ReflectorFactory reflectorFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetaClass</span>(type, reflectorFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>② <code>#metaClassForProperty(String name)</code> 方法，创建类的指定属性的类的 MetaClass 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> MetaClass <span class="title function_">metaClassForProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 获得属性的类</span></span><br><span class="line">    Class&lt;?&gt; propType = reflector.getGetterType(name);</span><br><span class="line">    <span class="comment">// 创建 MetaClass 对象</span></span><br><span class="line">    <span class="keyword">return</span> MetaClass.forClass(propType, reflectorFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-2-findProperty"><a href="#7-2-findProperty" class="headerlink" title="7.2 findProperty"></a>7.2 findProperty</h2><p><code>#findProperty(String name, boolean useCamelCaseMapping)</code> 方法，根据表达式，获得属性。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findProperty</span><span class="params">(String name, <span class="type">boolean</span> useCamelCaseMapping)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 下划线转驼峰</span></span><br><span class="line">    <span class="keyword">if</span> (useCamelCaseMapping) &#123;</span><br><span class="line">        name = name.replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;2&gt; 获得属性</span></span><br><span class="line">    <span class="keyword">return</span> findProperty(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>useCamelCaseMapping</code> 属性，是否要<a href="https://www.cnblogs.com/flying607/p/8473075.html">下划线转驼峰</a> 。但是，在 <code>&lt;1&gt;</code> 处，我们仅仅看到 <code>_</code> 被替换成了空串。这是为什么呢？继续往下看。</p></li><li><p><code>&lt;2&gt;</code> 处，调用 <code>#findProperty(String name)</code> 方法，根据表达式，获得属性。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// &lt;3&gt; 构建属性</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">prop</span> <span class="operator">=</span> buildProperty(name, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>());</span><br><span class="line">    <span class="keyword">return</span> prop.length() &gt; <span class="number">0</span> ? prop.toString() : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;3&gt;</code> 处，调用 <code>#buildProperty(String name, StringBuilder builder)</code> 方法，构建属性。代码如下：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"><span class="keyword">private</span> StringBuilder <span class="title function_">buildProperty</span><span class="params">(String name, StringBuilder builder)</span> &#123;    </span><br><span class="line">    <span class="comment">// 创建 PropertyTokenizer 对象，对 name 进行分词    </span></span><br><span class="line">    <span class="type">PropertyTokenizer</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(name);    </span><br><span class="line">    <span class="comment">// 有子表达式    </span></span><br><span class="line">    <span class="keyword">if</span> (prop.hasNext()) &#123;        </span><br><span class="line">        <span class="comment">// &lt;4&gt; 获得属性名，并添加到 builder 中        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> reflector.findPropertyName(prop.getName());        </span><br><span class="line">        <span class="keyword">if</span> (propertyName != <span class="literal">null</span>) &#123;            </span><br><span class="line">            <span class="comment">// 拼接属性到 builder 中            </span></span><br><span class="line">            builder.append(propertyName);            </span><br><span class="line">            builder.append(<span class="string">&quot;.&quot;</span>);            </span><br><span class="line">            <span class="comment">// 创建 MetaClass 对象            </span></span><br><span class="line">            <span class="type">MetaClass</span> <span class="variable">metaProp</span> <span class="operator">=</span> metaClassForProperty(propertyName);            </span><br><span class="line">            <span class="comment">// 递归解析子表达式 children ，并将结果添加到 builder 中</span></span><br><span class="line">            metaProp.buildProperty(prop.getChildren(), builder);        </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// 无子表达式    </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">        <span class="comment">// &lt;4&gt; 获得属性名，并添加到 builder 中        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> reflector.findPropertyName(name);        </span><br><span class="line">        <span class="keyword">if</span> (propertyName != <span class="literal">null</span>) &#123;            </span><br><span class="line">            builder.append(propertyName);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><ul><li>创建 PropertyTokenizer 对象，对 <code>name</code> 进行<strong>分词</strong>。当有子表达式，继续递归调用 <code>#buildProperty(String name, StringBuilder builder)</code> 方法，并将结果添加到 <code>builder</code> 中；否则，结束，直接添加到 <code>builder</code> 中。</li><li>在两个 <code>&lt;4&gt;</code> 处，解决“下划线转驼峰”的关键是，通过 <code>Reflector.caseInsensitivePropertyMap</code> 属性，忽略大小写。代码如下：</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflector.java</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 不区分大小写的属性集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; caseInsensitivePropertyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findPropertyName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> caseInsensitivePropertyMap.get(name.toUpperCase(Locale.ENGLISH));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果胖友，你有点懵逼，可以运行下 <code>MetaClassTest#shouldFindPropertyName()</code> 这个单元测试方法。</p><h2 id="7-3-hasGetter"><a href="#7-3-hasGetter" class="headerlink" title="7.3 hasGetter"></a>7.3 hasGetter</h2><p><code>#hasGetter(String name)</code> 方法，判断指定属性是否有 getting 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasGetter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 PropertyTokenizer 对象，对 name 进行分词</span></span><br><span class="line">    <span class="type">PropertyTokenizer</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(name);</span><br><span class="line">    <span class="comment">// 有子表达式</span></span><br><span class="line">    <span class="keyword">if</span> (prop.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 判断是否有该属性的 getting 方法</span></span><br><span class="line">        <span class="keyword">if</span> (reflector.hasGetter(prop.getName())) &#123;</span><br><span class="line">            <span class="comment">// &lt;1&gt; 创建 MetaClass 对象</span></span><br><span class="line">            <span class="type">MetaClass</span> <span class="variable">metaProp</span> <span class="operator">=</span> metaClassForProperty(prop);</span><br><span class="line">            <span class="comment">// 递归判断子表达式 children ，是否有 getting 方法</span></span><br><span class="line">            <span class="keyword">return</span> metaProp.hasGetter(prop.getChildren());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 无子表达式</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否有该属性的 getting 方法</span></span><br><span class="line">        <span class="keyword">return</span> reflector.hasGetter(prop.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>思路和 <code>#findProperty((String name, ...)</code> 方法是一样的，所以胖友自己看下。</p></li><li><p><code>&lt;1&gt;</code> 处，调用 <code>#metaClassForProperty(PropertyTokenizer prop)</code> 方法，创建 创建 MetaClass 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MetaClass <span class="title function_">metaClassForProperty</span><span class="params">(PropertyTokenizer prop)</span> &#123;</span><br><span class="line">    <span class="comment">// 【调用】获得 getting 方法返回的类型</span></span><br><span class="line">    Class&lt;?&gt; propType = getGetterType(prop);</span><br><span class="line">    <span class="comment">// 创建 MetaClass 对象</span></span><br><span class="line">    <span class="keyword">return</span> MetaClass.forClass(propType, reflectorFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getGetterType(PropertyTokenizer prop) &#123;</span><br><span class="line">    <span class="comment">// 获得返回类型</span></span><br><span class="line">    Class&lt;?&gt; type = reflector.getGetterType(prop.getName());</span><br><span class="line">    <span class="comment">// 如果获取数组的某个位置的元素，则获取其泛型。例如说：list[0].field ，那么就会解析 list 是什么类型，这样才好通过该类型，继续获得 field</span></span><br><span class="line">    <span class="keyword">if</span> (prop.getIndex() != <span class="literal">null</span> &amp;&amp; Collection.class.isAssignableFrom(type)) &#123;</span><br><span class="line">        <span class="comment">// 【调用】获得返回的类型</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">returnType</span> <span class="operator">=</span> getGenericGetterType(prop.getName());</span><br><span class="line">        <span class="comment">// 如果是泛型，进行解析真正的类型</span></span><br><span class="line">        <span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) returnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">if</span> (actualTypeArguments != <span class="literal">null</span> &amp;&amp; actualTypeArguments.length == <span class="number">1</span>) &#123; <span class="comment">// 为什么这里判断大小为 1 呢，因为 Collection 是 Collection&lt;T&gt; ，至多一个。</span></span><br><span class="line">                returnType = actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                    type = (Class&lt;?&gt;) returnType;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                    type = (Class&lt;?&gt;) ((ParameterizedType) returnType).getRawType();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Type <span class="title function_">getGenericGetterType</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获得 Invoker 对象</span></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> reflector.getGetInvoker(propertyName);</span><br><span class="line">        <span class="comment">// 如果 MethodInvoker 对象，则说明是 getting 方法，解析方法返回类型</span></span><br><span class="line">        <span class="keyword">if</span> (invoker <span class="keyword">instanceof</span> MethodInvoker) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">_method</span> <span class="operator">=</span> MethodInvoker.class.getDeclaredField(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">            _method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> (Method) _method.get(invoker);</span><br><span class="line">            <span class="keyword">return</span> TypeParameterResolver.resolveReturnType(method, reflector.getType());</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 如果 GetFieldInvoker 对象，则说明是 field ，直接访问</span></span><br><span class="line">        <span class="keyword">if</span> (invoker <span class="keyword">instanceof</span> GetFieldInvoker) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">_field</span> <span class="operator">=</span> GetFieldInvoker.class.getDeclaredField(<span class="string">&quot;field&quot;</span>);</span><br><span class="line">            _field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> (Field) _field.get(invoker);</span><br><span class="line">            <span class="keyword">return</span> TypeParameterResolver.resolveFieldType(field, reflector.getType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较长，胖友跟着代码注释，运行下。另外，每个上面的方法， 会调用下面的方法，也就说 <code>metaClassForProperty =&gt; getGetterType =&gt; getGenericGetterType</code> 。</li></ul></li></ul><hr><p>另外，<code>#hasSetter(String name)</code> 方法，判断指定属性是否有 setting 方法。逻辑上，和 <code>#hasGetter(String name)</code> 方法类似，胖友可以自己瞅瞅。</p><h2 id="7-4-getGetterType"><a href="#7-4-getGetterType" class="headerlink" title="7.4 getGetterType"></a>7.4 getGetterType</h2><p><code>#getGetterType(String name)</code> 方法，获得指定属性的 getting 方法的返回值的类型。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaClass.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;</span><br><span class="line">    <span class="comment">// 创建 PropertyTokenizer 对象，对 name 进行分词</span></span><br><span class="line">    <span class="type">PropertyTokenizer</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(name);</span><br><span class="line">    <span class="comment">// 有子表达式</span></span><br><span class="line">    <span class="keyword">if</span> (prop.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 创建 MetaClass 对象</span></span><br><span class="line">        <span class="type">MetaClass</span> <span class="variable">metaProp</span> <span class="operator">=</span> metaClassForProperty(prop);</span><br><span class="line">        <span class="comment">// 递归判断子表达式 children ，获得返回值的类型</span></span><br><span class="line">        <span class="keyword">return</span> metaProp.getGetterType(prop.getChildren());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// issue #506. Resolve the type inside a Collection Object</span></span><br><span class="line">    <span class="comment">// 直接获得返回值的类型</span></span><br><span class="line">    <span class="keyword">return</span> getGetterType(prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>和 <code>#hasGetter(String name)</code> 方法类似，胖友可以自己瞅瞅。</li></ul><hr><p>另外，<code>#getSetterType(String name)</code> 方法，判断指定属性是否有 setting 方法。逻辑上，和 <code>#getGetterType(String name)</code> 方法类似，胖友可以自己瞅瞅。</p><h2 id="7-5-其它方法"><a href="#7-5-其它方法" class="headerlink" title="7.5 其它方法"></a>7.5 其它方法</h2><p>MetaClass 还有其它方法，比较简单，是基于 Reflector 方法的封装，感兴趣的胖友，可以自己看看。</p><h1 id="8-ObjectWrapper"><a href="#8-ObjectWrapper" class="headerlink" title="8. ObjectWrapper"></a>8. ObjectWrapper</h1><p><code>org.apache.ibatis.reflection.wrapper.ObjectWrapper</code> ，对象包装器接口，基于 MetaClass 工具类，定义对指定对象的各种操作。或者可以说，ObjectWrapper 是 MetaClass 的指定类的具象化。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// ObjectWrapper.java</span><br><span class="line"></span><br><span class="line">public interface ObjectWrapper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得值</span><br><span class="line">     *</span><br><span class="line">     * @param prop PropertyTokenizer 对象，相当于键</span><br><span class="line">     * @return 值</span><br><span class="line">     */</span><br><span class="line">    Object get(PropertyTokenizer prop);</span><br><span class="line">    /**</span><br><span class="line">     * 设置值</span><br><span class="line">     *</span><br><span class="line">     * @param prop PropertyTokenizer 对象，相当于键</span><br><span class="line">     * @param value 值</span><br><span class="line">     */</span><br><span class="line">    void set(PropertyTokenizer prop, Object value);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#findProperty(String, boolean)&#125;</span><br><span class="line">     */</span><br><span class="line">    String findProperty(String name, boolean useCamelCaseMapping);</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#getGetterNames()&#125;</span><br><span class="line">     */</span><br><span class="line">    String[] getGetterNames();</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#getSetterNames()&#125;</span><br><span class="line">     */</span><br><span class="line">    String[] getSetterNames();</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#getSetterType(String)&#125;</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt; getSetterType(String name);</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#getGetterType(String)&#125;</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt; getGetterType(String name);</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#hasSetter(String)&#125;</span><br><span class="line">     */</span><br><span class="line">    boolean hasSetter(String name);</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaClass#hasGetter(String)&#125;</span><br><span class="line">     */</span><br><span class="line">    boolean hasGetter(String name);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link MetaObject#forObject(Object, ObjectFactory, ObjectWrapperFactory, ReflectorFactory)&#125;</span><br><span class="line">     */</span><br><span class="line">    MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否为集合</span><br><span class="line">     */</span><br><span class="line">    boolean isCollection();</span><br><span class="line">    /**</span><br><span class="line">     * 添加元素到集合</span><br><span class="line">     */</span><br><span class="line">    void add(Object element);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加多个元素到集合</span><br><span class="line">     */</span><br><span class="line">    &lt;E&gt; void addAll(List&lt;E&gt; element);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从接口中，我们可以看到，主要是对 MetaObject 方法的调用。</li></ul><hr><p>ObjectWrapper 的子类实现如下图：<a href="http://static.iocoder.cn/images/MyBatis/2020_01_10/02.png"><img src="http://totolovefree.top/test/202308071041012.png" alt="ObjectWrapper 类图"></a>ObjectWrapper 类图</p><h2 id="8-1-BaseWrapper"><a href="#8-1-BaseWrapper" class="headerlink" title="8.1 BaseWrapper"></a>8.1 BaseWrapper</h2><p><code>org.apache.ibatis.reflection.wrapper.BaseWrapper</code> ，实现 ObjectWrapper 接口，ObjectWrapper 抽象类，为子类 BeanWrapper 和 MapWrapper 提供属性值的获取和设置的公用方法。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">// BaseWrapper.java</span><br><span class="line"></span><br><span class="line">public abstract class BaseWrapper implements ObjectWrapper &#123;</span><br><span class="line"></span><br><span class="line">    protected static final Object[] NO_ARGUMENTS = new Object[0];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * MetaObject 对象</span><br><span class="line">     */</span><br><span class="line">    protected final MetaObject metaObject;</span><br><span class="line"></span><br><span class="line">    protected BaseWrapper(MetaObject metaObject) &#123;</span><br><span class="line">        this.metaObject = metaObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得指定属性的值</span><br><span class="line">     *</span><br><span class="line">     * @param prop PropertyTokenizer 对象</span><br><span class="line">     * @param object 指定 Object 对象</span><br><span class="line">     * @return 值</span><br><span class="line">     */</span><br><span class="line">    protected Object resolveCollection(PropertyTokenizer prop, Object object) &#123;</span><br><span class="line">        if (&quot;&quot;.equals(prop.getName())) &#123;</span><br><span class="line">            return object;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return metaObject.getValue(prop.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得集合中指定位置的值</span><br><span class="line">     *</span><br><span class="line">     * @param prop PropertyTokenizer 对象</span><br><span class="line">     * @param collection 集合</span><br><span class="line">     * @return 值</span><br><span class="line">     */</span><br><span class="line">    protected Object getCollectionValue(PropertyTokenizer prop, Object collection) &#123;</span><br><span class="line">        if (collection instanceof Map) &#123;</span><br><span class="line">            return ((Map) collection).get(prop.getIndex());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int i = Integer.parseInt(prop.getIndex());</span><br><span class="line">            if (collection instanceof List) &#123;</span><br><span class="line">                return ((List) collection).get(i);</span><br><span class="line">            &#125; else if (collection instanceof Object[]) &#123;</span><br><span class="line">                return ((Object[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof char[]) &#123;</span><br><span class="line">                return ((char[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof boolean[]) &#123;</span><br><span class="line">                return ((boolean[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof byte[]) &#123;</span><br><span class="line">                return ((byte[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof double[]) &#123;</span><br><span class="line">                return ((double[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof float[]) &#123;</span><br><span class="line">                return ((float[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof int[]) &#123;</span><br><span class="line">                return ((int[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof long[]) &#123;</span><br><span class="line">                return ((long[]) collection)[i];</span><br><span class="line">            &#125; else if (collection instanceof short[]) &#123;</span><br><span class="line">                return ((short[]) collection)[i];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new ReflectionException(&quot;The &#x27;&quot; + prop.getName() + &quot;&#x27; property of &quot; + collection + &quot; is not a List or Array.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置集合中指定位置的值</span><br><span class="line">     *</span><br><span class="line">     * @param prop PropertyTokenizer 对象</span><br><span class="line">     * @param collection 集合</span><br><span class="line">     * @param value 值</span><br><span class="line">     */</span><br><span class="line">    protected void setCollectionValue(PropertyTokenizer prop, Object collection, Object value) &#123;</span><br><span class="line">        if (collection instanceof Map) &#123;</span><br><span class="line">            ((Map) collection).put(prop.getIndex(), value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int i = Integer.parseInt(prop.getIndex());</span><br><span class="line">            if (collection instanceof List) &#123;</span><br><span class="line">                ((List) collection).set(i, value);</span><br><span class="line">            &#125; else if (collection instanceof Object[]) &#123;</span><br><span class="line">                ((Object[]) collection)[i] = value;</span><br><span class="line">            &#125; else if (collection instanceof char[]) &#123;</span><br><span class="line">                ((char[]) collection)[i] = (Character) value;</span><br><span class="line">            &#125; else if (collection instanceof boolean[]) &#123;</span><br><span class="line">                ((boolean[]) collection)[i] = (Boolean) value;</span><br><span class="line">            &#125; else if (collection instanceof byte[]) &#123;</span><br><span class="line">                ((byte[]) collection)[i] = (Byte) value;</span><br><span class="line">            &#125; else if (collection instanceof double[]) &#123;</span><br><span class="line">                ((double[]) collection)[i] = (Double) value;</span><br><span class="line">            &#125; else if (collection instanceof float[]) &#123;</span><br><span class="line">                ((float[]) collection)[i] = (Float) value;</span><br><span class="line">            &#125; else if (collection instanceof int[]) &#123;</span><br><span class="line">                ((int[]) collection)[i] = (Integer) value;</span><br><span class="line">            &#125; else if (collection instanceof long[]) &#123;</span><br><span class="line">                ((long[]) collection)[i] = (Long) value;</span><br><span class="line">            &#125; else if (collection instanceof short[]) &#123;</span><br><span class="line">                ((short[]) collection)[i] = (Short) value;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new ReflectionException(&quot;The &#x27;&quot; + prop.getName() + &quot;&#x27; property of &quot; + collection + &quot; is not a List or Array.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，胖友看下注释。关于 MetaObject 类，会在 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「10. MetaObject」</a> 中，详细解析。</li></ul><h3 id="8-1-1-BeanWrapper"><a href="#8-1-1-BeanWrapper" class="headerlink" title="8.1.1 BeanWrapper"></a>8.1.1 BeanWrapper</h3><p><code>org.apache.ibatis.reflection.wrapper.BeanWrapper</code> ，继承 BaseWrapper 抽象类，<strong>普通对象</strong>的 ObjectWrapper 实现类，例如 User、Order 这样的 POJO 类。属性如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// BeanWrapper.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 普通对象</span><br><span class="line"> */</span><br><span class="line">private final Object object;</span><br><span class="line">private final MetaClass metaClass;</span><br><span class="line"></span><br><span class="line">public BeanWrapper(MetaObject metaObject, Object object) &#123;</span><br><span class="line">    super(metaObject);</span><br><span class="line">    this.object = object;</span><br><span class="line">    // 创建 MetaClass 对象</span><br><span class="line">    this.metaClass = MetaClass.forClass(object.getClass(), metaObject.getReflectorFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-1-get"><a href="#8-1-1-1-get" class="headerlink" title="8.1.1.1 get"></a>8.1.1.1 get</h4><p><code>#get(PropertyTokenizer prop)</code> 方法，获得指定属性的值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// BeanWrapper.java</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object get(PropertyTokenizer prop) &#123;</span><br><span class="line">    // &lt;1&gt; 获得集合类型的属性的指定位置的值</span><br><span class="line">    if (prop.getIndex() != null) &#123;</span><br><span class="line">        // 获得集合类型的属性</span><br><span class="line">        Object collection = resolveCollection(prop, object);</span><br><span class="line">        // 获得指定位置的值</span><br><span class="line">        return getCollectionValue(prop, collection);</span><br><span class="line">    // &lt;2&gt; 获得属性的值</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return getBeanProperty(prop, object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> 处，获得集合类型的属性的指定位置的值。例如说：User 对象的 <code>list[0]</code> 。所调用的方法，都是 BaseWrapper 所提供的公用方法。</p></li><li><p><code>&lt;2&gt;</code> 处，调用 <code>#getBeanProperty(PropertyTokenizer prop, Object object)</code> 方法，获得属性的值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// BeanWrapper.java</span><br><span class="line"></span><br><span class="line">private Object getBeanProperty(PropertyTokenizer prop, Object object) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Invoker method = metaClass.getGetInvoker(prop.getName());</span><br><span class="line">        try &#123;</span><br><span class="line">            return method.invoke(object, NO_ARGUMENTS);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            throw ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        throw new ReflectionException(&quot;Could not get property &#x27;&quot; + prop.getName() + &quot;&#x27; from &quot; + object.getClass() + &quot;.  Cause: &quot; + t.toString(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过调用 Invoker 方法，获得属性的值。</li></ul></li></ul><h4 id="8-1-1-2-set"><a href="#8-1-1-2-set" class="headerlink" title="8.1.1.2 set"></a>8.1.1.2 set</h4><p><code>#set(PropertyTokenizer prop, Object value)</code> 方法，设置指定属性的值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// BeanWrapper.java</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void set(PropertyTokenizer prop, Object value) &#123;</span><br><span class="line">    // 设置集合类型的属性的指定位置的值</span><br><span class="line">    if (prop.getIndex() != null) &#123;</span><br><span class="line">        // 获得集合类型的属性</span><br><span class="line">        Object collection = resolveCollection(prop, object);</span><br><span class="line">        // 设置指定位置的值</span><br><span class="line">        setCollectionValue(prop, collection, value);</span><br><span class="line">    // 设置属性的值</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        setBeanProperty(prop, object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void setBeanProperty(PropertyTokenizer prop, Object object, Object value) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Invoker method = metaClass.getSetInvoker(prop.getName());</span><br><span class="line">        Object[] params = &#123;value&#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            method.invoke(object, params);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            throw ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        throw new ReflectionException(&quot;Could not set property &#x27;&quot; + prop.getName() + &quot;&#x27; of &#x27;&quot; + object.getClass() + &quot;&#x27; with value &#x27;&quot; + value + &quot;&#x27; Cause: &quot; + t.toString(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，胖友直接看看就成。</li></ul><h4 id="8-1-1-3-getGetterType"><a href="#8-1-1-3-getGetterType" class="headerlink" title="8.1.1.3 getGetterType"></a>8.1.1.3 getGetterType</h4><p><code>#getGetterType(String name)</code> 方法，获得指定属性的 getting 方法的返回值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// BeanWrapper.java</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Class&lt;?&gt; getGetterType(String name) &#123;</span><br><span class="line">    // 创建 PropertyTokenizer 对象，对 name 进行分词</span><br><span class="line">    PropertyTokenizer prop = new PropertyTokenizer(name);</span><br><span class="line">    // 有子表达式</span><br><span class="line">    if (prop.hasNext()) &#123;</span><br><span class="line">        // &lt;1&gt; 创建 MetaObject 对象</span><br><span class="line">        MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());</span><br><span class="line">        // 如果 metaValue 为空，则基于 metaClass 获得返回类型</span><br><span class="line">        if (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;</span><br><span class="line">            return metaClass.getGetterType(name);</span><br><span class="line">        // 如果 metaValue 非空，则基于 metaValue 获得返回类型。</span><br><span class="line">        // 例如：richType.richMap.nihao ，其中 richMap 是 Map 类型，而 nihao 的类型，需要获得到 nihao 的具体值，才能做真正的判断。</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 递归判断子表达式 children ，获得返回值的类型</span><br><span class="line">            return metaValue.getGetterType(prop.getChildren());</span><br><span class="line">        &#125;</span><br><span class="line">    // 有子表达式</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 直接获得返回值的类型</span><br><span class="line">        return metaClass.getGetterType(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>大体逻辑和 MetaClass 的 <code>#getGetterType(String name)</code> 方法是一致的。差异点主要在 <code>&lt;1&gt;</code> 处。</p></li><li><pre><code>&lt;1&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">处，基于当前属性，创建 MetaObject 对象。如果该属性对应的值为空，那么</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>metaValue<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">会等于</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>SystemMetaObject.NULL_META_OBJECT<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">。也因为为空，那么就不能基于</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>metaValue<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  去做递归，获取返回值的类型。</span><br><span class="line"></span><br><span class="line">  - 关于 MetaObject 类，在 [「10. MetaObject」](http://svip.iocoder.cn/MyBatis/reflection-package/#) 中详细解析。</span><br><span class="line"></span><br><span class="line">- 当然，以上说起来比较绕，可以添加如下测试用例，跑一次就大体明白了。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>@Testpublic void test01() &#123;    RichType object = new RichType();    if (true) &#123;        object.setRichType(new RichType());        object.getRichType().setRichMap(new HashMap());        object.getRichType().getRichMap().put(&quot;nihao&quot;, &quot;123&quot;);    &#125;    MetaObject meta = MetaObject.forObject(object, SystemMetaObject.DEFAULT_OBJECT_FACTORY, new CustomBeanWrapperFactory(), new DefaultReflectorFactory());    Class&lt;?&gt; clazz = meta.getObjectWrapper().getGetterType(&quot;richType.richMap.nihao&quot;);    System.out.println(clazz);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这个测试用例，就是笔者在代码注释上添加的“例如：`richType.richMap.nihao` ，其中 `richMap` 是 Map 类型，而 `nihao` 的类型，需要获得到 `nihao` 的具体值，才能做真正的判断。”</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">`#getSetterType(String name)` 方法，获得指定属性的 setting 方法的方法参数。逻辑上和 `#getGetterType(String name)` 方法类似的，所以感兴趣的胖友，自己研究。</span><br><span class="line"></span><br><span class="line">#### 8.1.1.6 hasGetter</span><br><span class="line"></span><br><span class="line">`#hasGetter(String name)` 方法，是否有指定属性的 getting 方法。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>&#x2F;&#x2F; BeanWrapper.java</p><p>@Override<br>public boolean hasGetter(String name) {<br>    &#x2F;&#x2F; 创建 PropertyTokenizer 对象，对 name 进行分词<br>    PropertyTokenizer prop &#x3D; new PropertyTokenizer(name);<br>    &#x2F;&#x2F; 有子表达式<br>    if (prop.hasNext()) {<br>        &#x2F;&#x2F; 判断是否有该属性的 getting 方法<br>        if (metaClass.hasGetter(prop.getIndexedName())) {<br>            &#x2F;&#x2F; 创建 MetaObject 对象<br>            MetaObject metaValue &#x3D; metaObject.metaObjectForProperty(prop.getIndexedName());<br>            &#x2F;&#x2F; 如果 metaValue 为空，则基于 metaClass 判断是否有该属性的 getting 方法<br>            if (metaValue &#x3D;&#x3D; SystemMetaObject.NULL_META_OBJECT) {<br>                return metaClass.hasGetter(name);<br>            &#x2F;&#x2F; 如果 metaValue 非空，则基于 metaValue 判断是否有 getting 方法。<br>            } else {<br>                &#x2F;&#x2F; 递归判断子表达式 children ，判断是否有 getting 方法<br>                return metaValue.hasGetter(prop.getChildren());<br>            }<br>        } else {<br>            return false;<br>        }<br>    &#x2F;&#x2F; 有子表达式<br>    } else {<br>        &#x2F;&#x2F; 判断是否有该属性的 getting 方法<br>        return metaClass.hasGetter(name);<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">和 `#getGetterType(String name)` 方法类似，胖友可以自己瞅瞅。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">`#hasSetter(String name)` 方法，判断指定属性是否有 setting 方法的方法。逻辑上和 `#hasGetter(String name)` 方法类似的，所以感兴趣的胖友，自己研究。</span><br><span class="line"></span><br><span class="line">#### 8.1.1.5 instantiatePropertyValue</span><br><span class="line"></span><br><span class="line">`#instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory)` 方法，创建指定属性的值。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; BeanWrapper.java</p><p>@Override<br>public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {<br>    MetaObject metaValue;<br>    &#x2F;&#x2F; 获得 setting 方法的方法参数类型<br>    Class&lt;?&gt; type &#x3D; getSetterType(prop.getName());<br>    try {<br>        &#x2F;&#x2F; 创建对象<br>        Object newObject &#x3D; objectFactory.create(type);<br>        &#x2F;&#x2F; 创建 MetaObject 对象<br>        metaValue &#x3D; MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());<br>        &#x2F;&#x2F; &lt;1&gt; 设置当前对象的值<br>        set(prop, newObject);<br>    } catch (Exception e) {<br>        throw new ReflectionException(“Cannot set value of property ‘“ + name + “‘ because ‘“ + name + “‘ is null and cannot be instantiated on instance of “ + type.getName() + “. Cause:” + e.toString(), e);<br>    }<br>    return metaValue;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `&lt;1&gt;` 处，调用 `#set(PropertyTokenizer prop, Object value)` 方法，设置 `newObject` 到当前对象的 `prop` 属性种。</span><br><span class="line">- 关于这个方法，可能比较难理解，可以调试下 `MetaObjectTest#shouldGetAndSetNestedMapPairUsingArraySyntax()` 这个单元测试方法。</span><br><span class="line"></span><br><span class="line">#### 8.1.1.6 isCollection</span><br><span class="line"></span><br><span class="line">`#isCollection()` 方法，返回 `false` ，表示不是集合。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; BeanWrapper.java</p><p>@Override<br>public boolean isCollection() {<br>    return false;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">因此，`#add(Object element)` 和 `#addAll(List&lt;E&gt; list)` 方法都是不支持的，直接抛出 UnsupportedOperationException 异常。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; BeanWrapper.java</p><p>@Override<br>public void add(Object element) {<br>    throw new UnsupportedOperationException();<br>}</p><p>@Override<br>public <E> void addAll(List<E> list) {<br>    throw new UnsupportedOperationException();<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 8.1.2 MapWrapper</span><br><span class="line"></span><br><span class="line">`org.apache.ibatis.reflection.wrapper.MapWrapper` ，继承 BaseWrapper 抽象类，**Map** 对象的 ObjectWrapper 实现类。</span><br><span class="line"></span><br><span class="line">MapWrapper 和 BeanWrapper 的大体逻辑是一样的，差异点主要如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; MapWrapper.java</p><p>&#x2F;&#x2F; object 变成了 map<br>private final Map&lt;String, Object&gt; map;</p><p>&#x2F;&#x2F; 属性的操作变成了<br>map.put(prop.getName(), value);<br>map.get(prop.getName());</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 这里就不详细解析了，感兴趣的胖友，自己查看下噢。</span><br><span class="line"></span><br><span class="line">## 8.2 CollectionWrapper</span><br><span class="line"></span><br><span class="line">`org.apache.ibatis.reflection.wrapper.CollectionWrapper` ，实现 ObjectWrapper 接口，集合 ObjectWrapper 实现类。比较简单，直接看代码：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; CollectionWrapper.java</p><p>public class CollectionWrapper implements ObjectWrapper {</p><pre><code>private final Collection&lt;Object&gt; object;public CollectionWrapper(MetaObject metaObject, Collection&lt;Object&gt; object) &#123;    this.object = object;&#125;@Overridepublic Object get(PropertyTokenizer prop) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic void set(PropertyTokenizer prop, Object value) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic String findProperty(String name, boolean useCamelCaseMapping) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic String[] getGetterNames() &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic String[] getSetterNames() &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic Class&lt;?&gt; getSetterType(String name) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic Class&lt;?&gt; getGetterType(String name) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic boolean hasSetter(String name) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic boolean hasGetter(String name) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) &#123;    throw new UnsupportedOperationException();&#125;@Overridepublic boolean isCollection() &#123;    return true;&#125;@Overridepublic void add(Object element) &#123;    object.add(element);&#125;@Overridepublic &lt;E&gt; void addAll(List&lt;E&gt; element) &#123;    object.addAll(element);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 仅仅支持 `#add(Object element)` 和 `#addAll(List&lt;E&gt; element)` 两个操作方法。</span><br><span class="line"></span><br><span class="line"># 9. ObjectWrapperFactory</span><br><span class="line"></span><br><span class="line">`org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory` ，ObjectWrapper 工厂接口。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; ObjectWrapperFactory.java</p><p>public interface ObjectWrapperFactory {</p><pre><code>/** * 是否包装了指定对象 * * @param object 指定对象 * @return 是否 */boolean hasWrapperFor(Object object);/** * 获得指定对象的 ObjectWrapper 对象 * * @param metaObject MetaObject 对象 * @param object 指定对象 * @return ObjectWrapper 对象 */ObjectWrapper getWrapperFor(MetaObject metaObject, Object object);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 9.1 DefaultObjectWrapperFactory</span><br><span class="line"></span><br><span class="line">`org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory` ，实现 ObjectWrapperFactory 接口，**默认** ObjectWrapperFactory 实现类。代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>public class DefaultObjectWrapperFactory implements ObjectWrapperFactory {</p><pre><code>@Overridepublic boolean hasWrapperFor(Object object) &#123;    return false;&#125;@Overridepublic ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) &#123;    throw new ReflectionException(&quot;The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.&quot;);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 诶？貌似是个空的实现类？？？实际上，默认情况下，我们是不使用 ObjectWrapperFactory 对象的。</span><br><span class="line"></span><br><span class="line"># 10. MetaObject</span><br><span class="line"></span><br><span class="line">`org.apache.ibatis.reflection.MetaObject` ，对象元数据，提供了对象的属性值的获得和设置等等方法。😈 可以理解成，对 BaseWrapper 操作的进一步**增强**。</span><br><span class="line"></span><br><span class="line">## 10.1 构造方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; MetaObject.java</p><p>&#x2F;**</p><ul><li>原始 Object 对象<br> <em>&#x2F;<br>private final Object originalObject;<br>&#x2F;</em>*</li><li>封装过的 Object 对象<br> *&#x2F;<br>private final ObjectWrapper objectWrapper;<br>private final ObjectFactory objectFactory;<br>private final ObjectWrapperFactory objectWrapperFactory;<br>private final ReflectorFactory reflectorFactory;</li></ul><p>private MetaObject(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory, ReflectorFactory reflectorFactory) {<br>    this.originalObject &#x3D; object;<br>    this.objectFactory &#x3D; objectFactory;<br>    this.objectWrapperFactory &#x3D; objectWrapperFactory;<br>    this.reflectorFactory &#x3D; reflectorFactory;</p><pre><code>// &lt;1&gt;if (object instanceof ObjectWrapper) &#123;    this.objectWrapper = (ObjectWrapper) object;&#125; else if (objectWrapperFactory.hasWrapperFor(object)) &#123; // &lt;2&gt;    // 创建 ObjectWrapper 对象    this.objectWrapper = objectWrapperFactory.getWrapperFor(this, object);&#125; else if (object instanceof Map) &#123;    // 创建 MapWrapper 对象    this.objectWrapper = new MapWrapper(this, (Map) object);&#125; else if (object instanceof Collection) &#123;    // 创建 CollectionWrapper 对象    this.objectWrapper = new CollectionWrapper(this, (Collection) object);&#125; else &#123;    // 创建 BeanWrapper 对象    this.objectWrapper = new BeanWrapper(this, object);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;1&gt;</span><br></pre></td></tr></table></figure><p>  处，会根据</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object</span><br></pre></td></tr></table></figure><p>  类型的不同，创建对应的 ObjectWrapper 对象。</p><ul><li>其中，<code>&lt;2&gt;</code> 处，我们可以看到 ObjectWrapperFactory 的使用，因为默认情况下的 DefaultObjectWrapperFactory 未实现任何逻辑，所以这块逻辑相当于暂时不起作用。如果想要起作用，需要自定义 ObjectWrapperFactory 的实现类。</li></ul><h2 id="10-2-forObject"><a href="#10-2-forObject" class="headerlink" title="10.2 forObject"></a>10.2 forObject</h2><p><code>#forObject(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory, ReflectorFactory reflectorFactory)</code> <strong>静态</strong>方法，创建 MetaObject 对象。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// MetaObject.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建 MetaObject 对象</span><br><span class="line"> *</span><br><span class="line"> * @param object 原始 Object 对象</span><br><span class="line"> * @param objectFactory</span><br><span class="line"> * @param objectWrapperFactory</span><br><span class="line"> * @param reflectorFactory</span><br><span class="line"> * @return MetaObject 对象</span><br><span class="line"> */</span><br><span class="line">public static MetaObject forObject(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory, ReflectorFactory reflectorFactory) &#123;</span><br><span class="line">    if (object == null) &#123;</span><br><span class="line">        return SystemMetaObject.NULL_META_OBJECT;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return new MetaObject(object, objectFactory, objectWrapperFactory, reflectorFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>object</code> 为<strong>空</strong>的情况下，返回 <code>SystemMetaObject.NULL_META_OBJECT</code> 。</li></ul><h2 id="10-3-metaObjectForProperty"><a href="#10-3-metaObjectForProperty" class="headerlink" title="10.3 metaObjectForProperty"></a>10.3 metaObjectForProperty</h2><p><code>#metaObjectForProperty(String name)</code> 方法，创建指定属性的 MetaObject 对象。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// MetaObject.java</span><br><span class="line"></span><br><span class="line">public MetaObject metaObjectForProperty(String name) &#123;</span><br><span class="line">    // 获得属性值</span><br><span class="line">    Object value = getValue(name);</span><br><span class="line">    // 创建 MetaObject 对象</span><br><span class="line">    return MetaObject.forObject(value, objectFactory, objectWrapperFactory, reflectorFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4-getValue"><a href="#10-4-getValue" class="headerlink" title="10.4 getValue"></a>10.4 getValue</h2><p><code>#getValue(String name)</code> 方法，获得指定属性的值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// MetaObject.java</span><br><span class="line"></span><br><span class="line">public Object getValue(String name) &#123;</span><br><span class="line">    // 创建 PropertyTokenizer 对象，对 name 分词</span><br><span class="line">    PropertyTokenizer prop = new PropertyTokenizer(name);</span><br><span class="line">    // 有子表达式</span><br><span class="line">    if (prop.hasNext()) &#123;</span><br><span class="line">        // 创建 MetaObject 对象</span><br><span class="line">        MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());</span><br><span class="line">        // &lt;2&gt; 递归判断子表达式 children ，获取值</span><br><span class="line">        if (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return metaValue.getValue(prop.getChildren());</span><br><span class="line">        &#125;</span><br><span class="line">    // 无子表达式</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // &lt;1&gt; 获取值</span><br><span class="line">        return objectWrapper.get(prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大体逻辑上，就是不断对 <code>name</code> 分词，递归查找属性，直到 <code>&lt;1&gt;</code> 处，返回最终的结果。</li><li>比较特殊的是，在 <code>&lt;2&gt;</code> 处，如果属性的值为 <code>null</code> 时，则直接返回 <code>null</code> ，因为值就是空的哈。</li></ul><h2 id="10-5-setValue"><a href="#10-5-setValue" class="headerlink" title="10.5 setValue"></a>10.5 setValue</h2><p><code>#setValue(String name, Object value)</code> 方法，设置指定属性的指定值。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// MetaObject.java</span><br><span class="line"></span><br><span class="line">public void setValue(String name, Object value) &#123;</span><br><span class="line">    // 创建 PropertyTokenizer 对象，对 name 分词</span><br><span class="line">    PropertyTokenizer prop = new PropertyTokenizer(name);</span><br><span class="line">    // 有子表达式</span><br><span class="line">    if (prop.hasNext()) &#123;</span><br><span class="line">        // 创建 MetaObject 对象</span><br><span class="line">        MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());</span><br><span class="line">        // 递归判断子表达式 children ，设置值</span><br><span class="line">        if (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;</span><br><span class="line">            if (value == null) &#123;</span><br><span class="line">                // don&#x27;t instantiate child path if value is null</span><br><span class="line">                return;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // &lt;1&gt; 创建值</span><br><span class="line">                metaValue = objectWrapper.instantiatePropertyValue(name, prop, objectFactory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置值</span><br><span class="line">        metaValue.setValue(prop.getChildren(), value);</span><br><span class="line">    // 无子表达式</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // &lt;1&gt; 设置值</span><br><span class="line">        objectWrapper.set(prop, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大体逻辑上，就是不断对 <code>name</code> 分词，递归查找属性，最终在 <code>&lt;1&gt;</code> 处，设置对应的值。</li><li>比较特殊的是，在 <code>&lt;2&gt;</code> 处，如果属性的值为 <code>null</code> 时，调用 <code>ObjectWrapper#instantiatePropertyValue(name, prop, objectFactory)</code> 方法，创建<strong>当前</strong> <code>name</code> 的 <code>prop</code> 属性的空对象，然后继续递归。可能有点难理解，胖友可以调试下 <code>MetaObjectTest#shouldGetAndSetNestedMapPairUsingArraySyntax()</code> 这个单元测试方法。</li></ul><h2 id="10-6-isCollection"><a href="#10-6-isCollection" class="headerlink" title="10.6 isCollection"></a>10.6 isCollection</h2><p><code>#isCollection()</code> 方法，判断是否为集合。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// MetaObject.java</span><br><span class="line"></span><br><span class="line">public boolean isCollection() &#123;</span><br><span class="line">    return objectWrapper.isCollection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void add(Object element) &#123;</span><br><span class="line">    objectWrapper.add(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public &lt;E&gt; void addAll(List&lt;E&gt; list) &#123;</span><br><span class="line">    objectWrapper.addAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接调用 <code>objectWrapper</code> 的对应的方法。</li></ul><h1 id="11-SystemMetaObject"><a href="#11-SystemMetaObject" class="headerlink" title="11. SystemMetaObject"></a>11. SystemMetaObject</h1><p><code>org.apache.ibatis.reflection.SystemMetaObject</code> ，系统级的 MetaObject 对象，主要提供了 ObjectFactory、ObjectWrapperFactory、空 MetaObject 的单例。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SystemMetaObject.java</span><br><span class="line"></span><br><span class="line">public final class SystemMetaObject &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ObjectFactory 的单例</span><br><span class="line">     */</span><br><span class="line">    public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();</span><br><span class="line">    /**</span><br><span class="line">     * ObjectWrapperFactory 的单例</span><br><span class="line">     */</span><br><span class="line">    public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 空对象的 MetaObject 对象单例</span><br><span class="line">     */</span><br><span class="line">    public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());</span><br><span class="line"></span><br><span class="line">    private SystemMetaObject() &#123;</span><br><span class="line">        // Prevent Instantiation of Static Class</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class NullObject &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建 MetaObject 对象</span><br><span class="line">     *</span><br><span class="line">     * @param object 指定对象</span><br><span class="line">     * @return MetaObject 对象</span><br><span class="line">     */</span><br><span class="line">    public static MetaObject forObject(Object object) &#123;</span><br><span class="line">        return MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>核心就是 <code>#forObject(Object object)</code> 方法，创建指定对象的 MetaObject 对象。</li></ul><h1 id="12-ParamNameUtil"><a href="#12-ParamNameUtil" class="headerlink" title="12. ParamNameUtil"></a>12. ParamNameUtil</h1><p><code>org.apache.ibatis.reflection.ParamNameUtil</code> ，参数名工具类，获得构造方法、普通方法的参数列表。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// ParamNameUtil.java</span><br><span class="line"></span><br><span class="line">public class ParamNameUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得普通方法的参数列表</span><br><span class="line">     *</span><br><span class="line">     * @param method 普通方法</span><br><span class="line">     * @return 参数集合</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;String&gt; getParamNames(Method method) &#123;</span><br><span class="line">        return getParameterNames(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得构造方法的参数列表</span><br><span class="line">     *</span><br><span class="line">     * @param constructor 构造方法</span><br><span class="line">     * @return 参数集合</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;String&gt; getParamNames(Constructor&lt;?&gt; constructor) &#123;</span><br><span class="line">        return getParameterNames(constructor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static List&lt;String&gt; getParameterNames(Executable executable) &#123;</span><br><span class="line">        final List&lt;String&gt; names = new ArrayList&lt;&gt;();</span><br><span class="line">        // 获得 Parameter 数组</span><br><span class="line">        final Parameter[] params = executable.getParameters();</span><br><span class="line">        // 获得参数名，并添加到 names 中</span><br><span class="line">        for (Parameter param : params) &#123;</span><br><span class="line">            names.add(param.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ParamNameUtil() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13-ParamNameResolver"><a href="#13-ParamNameResolver" class="headerlink" title="13. ParamNameResolver"></a>13. ParamNameResolver</h1><p><code>org.apache.ibatis.reflection.ParamNameResolver</code> ，参数名解析器。</p><h2 id="13-1-构造方法"><a href="#13-1-构造方法" class="headerlink" title="13.1 构造方法"></a>13.1 构造方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// ParamNameResolver.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The key is the index and the value is the name of the parameter.&lt;br /&gt;</span><br><span class="line"> * The name is obtained from &#123;@link Param&#125; if specified. When &#123;@link Param&#125; is not specified,</span><br><span class="line"> * the parameter index is used. Note that this index could be different from the actual index</span><br><span class="line"> * when the method has special parameters (i.e. &#123;@link RowBounds&#125; or &#123;@link ResultHandler&#125;).</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;aMethod(@Param(&quot;M&quot;) int a, @Param(&quot;N&quot;) int b) -&amp;gt; &#123;&#123;0, &quot;M&quot;&#125;, &#123;1, &quot;N&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;aMethod(int a, int b) -&amp;gt; &#123;&#123;0, &quot;0&quot;&#125;, &#123;1, &quot;1&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;aMethod(int a, RowBounds rb, int b) -&amp;gt; &#123;&#123;0, &quot;0&quot;&#125;, &#123;2, &quot;1&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br><span class="line"> *</span><br><span class="line"> * 参数名映射</span><br><span class="line"> *</span><br><span class="line"> * KEY：参数顺序</span><br><span class="line"> * VALUE：参数名</span><br><span class="line"> */</span><br><span class="line">private final SortedMap&lt;Integer, String&gt; names;</span><br><span class="line">/**</span><br><span class="line"> * 是否有 &#123;@link Param&#125; 注解的参数</span><br><span class="line"> */</span><br><span class="line">private boolean hasParamAnnotation;</span><br><span class="line"></span><br><span class="line">public ParamNameResolver(Configuration config, Method method) &#123;</span><br><span class="line">    final Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">    final Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line">    final SortedMap&lt;Integer, String&gt; map = new TreeMap&lt;&gt;();</span><br><span class="line">    int paramCount = paramAnnotations.length;</span><br><span class="line">    // get names from @Param annotations</span><br><span class="line">    for (int paramIndex = 0; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line">        // 忽略，如果是特殊参数</span><br><span class="line">        if (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">            // skip special parameters</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        String name = null;</span><br><span class="line">        // 首先，从 @Param 注解中获取参数</span><br><span class="line">        for (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">            if (annotation instanceof Param) &#123;</span><br><span class="line">                hasParamAnnotation = true;</span><br><span class="line">                name = ((Param) annotation).value();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (name == null) &#123;</span><br><span class="line">            // @Param was not specified.</span><br><span class="line">            // 其次，获取真实的参数名</span><br><span class="line">            if (config.isUseActualParamName()) &#123; // 默认开启</span><br><span class="line">                name = getActualParamName(method, paramIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            // 最差，使用 map 的顺序，作为编号</span><br><span class="line">            if (name == null) &#123;</span><br><span class="line">                // use the parameter index as the name (&quot;0&quot;, &quot;1&quot;, ...)</span><br><span class="line">                // gcode issue #71</span><br><span class="line">                name = String.valueOf(map.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 添加到 map 中</span><br><span class="line">        map.put(paramIndex, name);</span><br><span class="line">    &#125;</span><br><span class="line">    // 构建不可变集合</span><br><span class="line">    names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String getActualParamName(Method method, int paramIndex) &#123;</span><br><span class="line">    return ParamNameUtil.getParamNames(method).get(paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean isSpecialParameter(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    return RowBounds.class.isAssignableFrom(clazz) || ResultHandler.class.isAssignableFrom(clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，胖友看下注释。</li></ul><h2 id="13-2-getNamedParams"><a href="#13-2-getNamedParams" class="headerlink" title="13.2 getNamedParams"></a>13.2 getNamedParams</h2><p><code>#getNamedParams(Object[] args)</code> 方法，获得参数名与值的映射。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// ParamNameResolver.java</span><br><span class="line"></span><br><span class="line">private static final String GENERIC_NAME_PREFIX = &quot;param&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * A single non-special parameter is returned without a name.</span><br><span class="line"> * Multiple parameters are named using the naming rule.</span><br><span class="line"> * In addition to the default names, this method also adds the generic names (param1, param2,</span><br><span class="line"> * ...).</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * 获得参数名与值的映射</span><br><span class="line"> */</span><br><span class="line">public Object getNamedParams(Object[] args) &#123;</span><br><span class="line">    final int paramCount = names.size();</span><br><span class="line">    // 无参数，则返回 null</span><br><span class="line">    if (args == null || paramCount == 0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    // 只有一个非注解的参数，直接返回首元素</span><br><span class="line">    &#125; else if (!hasParamAnnotation &amp;&amp; paramCount == 1) &#123;</span><br><span class="line">        return args[names.firstKey()];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 集合。</span><br><span class="line">        // 组合 1 ：KEY：参数名，VALUE：参数值</span><br><span class="line">        // 组合 2 ：KEY：GENERIC_NAME_PREFIX + 参数顺序，VALUE ：参数值</span><br><span class="line">        final Map&lt;String, Object&gt; param = new ParamMap&lt;&gt;();</span><br><span class="line">        int i = 0;</span><br><span class="line">        // 遍历 names 集合</span><br><span class="line">        for (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">            // 组合 1 ：添加到 param 中</span><br><span class="line">            param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">            // add generic param names (param1, param2, ...)</span><br><span class="line">            // 组合 2 ：添加到 param 中</span><br><span class="line">            final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);</span><br><span class="line">            // ensure not to overwrite parameter named with @Param</span><br><span class="line">            if (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">                param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，胖友看下注释。</li></ul><h1 id="14-TypeParameterResolver"><a href="#14-TypeParameterResolver" class="headerlink" title="14. TypeParameterResolver"></a>14. TypeParameterResolver</h1><p><code>org.apache.ibatis.reflection.TypeParameterResolver</code> ，工具类，<code>java.lang.reflect.Type</code> 参数解析器。因为 Type 是相对冷门的知识，我表示也不会，所以推荐先阅读如下任一文章：</p><ul><li>贾博岩 <a href="https://www.jianshu.com/p/7649f86614d3">《我眼中的 Java-Type 体系(1)》</a></li><li>xujun9411 <a href="https://www.jianshu.com/p/cae76008b36b">《java Type 详解》</a></li></ul><blockquote><p>FROM 西瓜1994 <a href="https://my.oschina.net/u/3905482/blog/2249537">《MyBatis源码分析-2-基础支持层-反射模块-TypeParameterResolver&#x2F;ObjectFactory》</a></p><p>当存在复杂的继承关系以及泛型定义时， TypeParameterResolver 可以帮助我们解析字段、方法参数或方法返回值的类型。</p></blockquote><h2 id="14-1-暴露方法"><a href="#14-1-暴露方法" class="headerlink" title="14.1 暴露方法"></a>14.1 暴露方法</h2><p>TypeParameterResolver 暴露了<strong>三个</strong> 公用静态方法，分别用于解析 Field 类型、Method 返回类型、方法参数类型。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析属性类型</span><br><span class="line"> *</span><br><span class="line"> * @return The field type as &#123;@link Type&#125;. If it has type parameters in the declaration,&lt;br&gt;</span><br><span class="line"> *         they will be resolved to the actual runtime &#123;@link Type&#125;s.</span><br><span class="line"> */</span><br><span class="line">public static Type resolveFieldType(Field field, Type srcType) &#123;</span><br><span class="line">    // 属性类型</span><br><span class="line">    Type fieldType = field.getGenericType();</span><br><span class="line">    // 定义的类</span><br><span class="line">    Class&lt;?&gt; declaringClass = field.getDeclaringClass();</span><br><span class="line">    // 解析类型</span><br><span class="line">    return resolveType(fieldType, srcType, declaringClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析方法返回类型</span><br><span class="line"> *</span><br><span class="line"> * @return The return type of the method as &#123;@link Type&#125;. If it has type parameters in the declaration,&lt;br&gt;</span><br><span class="line"> *         they will be resolved to the actual runtime &#123;@link Type&#125;s.</span><br><span class="line"> */</span><br><span class="line">public static Type resolveReturnType(Method method, Type srcType) &#123;</span><br><span class="line">    // 属性类型</span><br><span class="line">    Type returnType = method.getGenericReturnType();</span><br><span class="line">    // 定义的类</span><br><span class="line">    Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">    // 解析类型</span><br><span class="line">    return resolveType(returnType, srcType, declaringClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析方法参数的类型数组</span><br><span class="line"> *</span><br><span class="line"> * @return The parameter types of the method as an array of &#123;@link Type&#125;s. If they have type parameters in the declaration,&lt;br&gt;</span><br><span class="line"> *         they will be resolved to the actual runtime &#123;@link Type&#125;s.</span><br><span class="line"> */</span><br><span class="line">public static Type[] resolveParamTypes(Method method, Type srcType) &#123;</span><br><span class="line">    // 获得方法参数类型数组</span><br><span class="line">    Type[] paramTypes = method.getGenericParameterTypes();</span><br><span class="line">    // 定义的类</span><br><span class="line">    Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">    // 解析类型们</span><br><span class="line">    Type[] result = new Type[paramTypes.length];</span><br><span class="line">    for (int i = 0; i &lt; paramTypes.length; i++) &#123;</span><br><span class="line">        result[i] = resolveType(paramTypes[i], srcType, declaringClass);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大体逻辑都类似，最终都会调用 <code>#resolveType(Type type, Type srcType, Class&lt;?&gt; declaringClass)</code> 方法，解析类型。详细解析，见 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「4.2 resolveType」</a> 。</li></ul><h2 id="14-2-resolveType"><a href="#14-2-resolveType" class="headerlink" title="14.2 resolveType"></a>14.2 resolveType</h2><p><code>#resolveType(Type type, Type srcType, Class&lt;?&gt; declaringClass)</code> 方法，解析 <code>type</code> 类型。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析类型</span><br><span class="line"> *</span><br><span class="line"> * @param type 类型</span><br><span class="line"> * @param srcType 来源类型</span><br><span class="line"> * @param declaringClass 定义的类</span><br><span class="line"> * @return 解析后的类型</span><br><span class="line"> */</span><br><span class="line">private static Type resolveType(Type type, Type srcType, Class&lt;?&gt; declaringClass) &#123;</span><br><span class="line">    if (type instanceof TypeVariable) &#123;</span><br><span class="line">        return resolveTypeVar((TypeVariable&lt;?&gt;) type, srcType, declaringClass);</span><br><span class="line">    &#125; else if (type instanceof ParameterizedType) &#123;</span><br><span class="line">        return resolveParameterizedType((ParameterizedType) type, srcType, declaringClass);</span><br><span class="line">    &#125; else if (type instanceof GenericArrayType) &#123;</span><br><span class="line">        return resolveGenericArrayType((GenericArrayType) type, srcType, declaringClass);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据 <code>type</code> 对应不同的 Type 类型，调用不同的方法，进行解析。</li></ul><h3 id="14-2-1-resolveParameterizedType"><a href="#14-2-1-resolveParameterizedType" class="headerlink" title="14.2.1 resolveParameterizedType"></a>14.2.1 resolveParameterizedType</h3><p><code>#resolveParameterizedType(ParameterizedType parameterizedType, Type srcType, Class&lt;?&gt; declaringClass)</code> 方法，解析 ParameterizedType 类型。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析 ParameterizedType 类型</span><br><span class="line"> *</span><br><span class="line"> * @param parameterizedType ParameterizedType 类型</span><br><span class="line"> * @param srcType 来源类型</span><br><span class="line"> * @param declaringClass 定义的类</span><br><span class="line"> * @return 解析后的类型</span><br><span class="line"> */</span><br><span class="line">private static ParameterizedType resolveParameterizedType(ParameterizedType parameterizedType, Type srcType, Class&lt;?&gt; declaringClass) &#123;</span><br><span class="line">    Class&lt;?&gt; rawType = (Class&lt;?&gt;) parameterizedType.getRawType();</span><br><span class="line">    // 【1】解析 &lt;&gt; 中实际类型</span><br><span class="line">    Type[] typeArgs = parameterizedType.getActualTypeArguments();</span><br><span class="line">    Type[] args = new Type[typeArgs.length];</span><br><span class="line">    for (int i = 0; i &lt; typeArgs.length; i++) &#123;</span><br><span class="line">        if (typeArgs[i] instanceof TypeVariable) &#123;</span><br><span class="line">            args[i] = resolveTypeVar((TypeVariable&lt;?&gt;) typeArgs[i], srcType, declaringClass);</span><br><span class="line">        &#125; else if (typeArgs[i] instanceof ParameterizedType) &#123;</span><br><span class="line">            args[i] = resolveParameterizedType((ParameterizedType) typeArgs[i], srcType, declaringClass);</span><br><span class="line">        &#125; else if (typeArgs[i] instanceof WildcardType) &#123;</span><br><span class="line">            args[i] = resolveWildcardType((WildcardType) typeArgs[i], srcType, declaringClass);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            args[i] = typeArgs[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 【2】</span><br><span class="line">    return new ParameterizedTypeImpl(rawType, null, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>【1】</code> 处，解析 <code>&lt;&gt;</code> 中实际类型。</p></li><li><p><code>【2】</code> 处，创建 ParameterizedTypeImpl 对象。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java 内部静态类</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ParameterizedType 实现类</span><br><span class="line"> *</span><br><span class="line"> * 参数化类型，即泛型。例如：List&lt;T&gt;、Map&lt;K, V&gt;等带有参数化的配置</span><br><span class="line"> */</span><br><span class="line">static class ParameterizedTypeImpl implements ParameterizedType &#123;</span><br><span class="line"></span><br><span class="line">    // 以 List&lt;T&gt; 举例子</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &lt;&gt; 前面实际类型</span><br><span class="line">     *</span><br><span class="line">     * 例如：List</span><br><span class="line">     */</span><br><span class="line">    private Class&lt;?&gt; rawType;</span><br><span class="line">    /**</span><br><span class="line">     * 如果这个类型是某个属性所有，则获取这个所有者类型；否则，返回 null</span><br><span class="line">     */</span><br><span class="line">    private Type ownerType;</span><br><span class="line">    /**</span><br><span class="line">     * &lt;&gt; 中实际类型</span><br><span class="line">     *</span><br><span class="line">     * 例如：T</span><br><span class="line">     */</span><br><span class="line">    private Type[] actualTypeArguments;</span><br><span class="line"></span><br><span class="line">    public ParameterizedTypeImpl(Class&lt;?&gt; rawType, Type ownerType, Type[] actualTypeArguments) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.rawType = rawType;</span><br><span class="line">        this.ownerType = ownerType;</span><br><span class="line">        this.actualTypeArguments = actualTypeArguments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type[] getActualTypeArguments() &#123;</span><br><span class="line">        return actualTypeArguments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type getOwnerType() &#123;</span><br><span class="line">        return ownerType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type getRawType() &#123;</span><br><span class="line">        return rawType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;ParameterizedTypeImpl [rawType=&quot; + rawType + &quot;, ownerType=&quot; + ownerType + &quot;, actualTypeArguments=&quot; + Arrays.toString(actualTypeArguments) + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-2-2-resolveWildcardType"><a href="#14-2-2-resolveWildcardType" class="headerlink" title="14.2.2 resolveWildcardType"></a>14.2.2 resolveWildcardType</h3><p><code>#resolveWildcardType(WildcardType wildcardType, Type srcType, Class&lt;?&gt; declaringClass)</code> 方法，解析 WildcardType 类型。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java</span><br><span class="line"></span><br><span class="line">private static Type resolveWildcardType(WildcardType wildcardType, Type srcType, Class&lt;?&gt; declaringClass) &#123;</span><br><span class="line">    // &lt;1.1&gt; 解析泛型表达式下界（下限 super）</span><br><span class="line">    Type[] lowerBounds = resolveWildcardTypeBounds(wildcardType.getLowerBounds(), srcType, declaringClass);</span><br><span class="line">    // &lt;1.2&gt; 解析泛型表达式上界（上限 extends）</span><br><span class="line">    Type[] upperBounds = resolveWildcardTypeBounds(wildcardType.getUpperBounds(), srcType, declaringClass);</span><br><span class="line">    // &lt;2&gt; 创建 WildcardTypeImpl 对象</span><br><span class="line">    return new WildcardTypeImpl(lowerBounds, upperBounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Type[] resolveWildcardTypeBounds(Type[] bounds, Type srcType, Class&lt;?&gt; declaringClass) &#123;</span><br><span class="line">    Type[] result = new Type[bounds.length];</span><br><span class="line">    for (int i = 0; i &lt; bounds.length; i++) &#123;</span><br><span class="line">        if (bounds[i] instanceof TypeVariable) &#123;</span><br><span class="line">            result[i] = resolveTypeVar((TypeVariable&lt;?&gt;) bounds[i], srcType, declaringClass);</span><br><span class="line">        &#125; else if (bounds[i] instanceof ParameterizedType) &#123;</span><br><span class="line">            result[i] = resolveParameterizedType((ParameterizedType) bounds[i], srcType, declaringClass);</span><br><span class="line">        &#125; else if (bounds[i] instanceof WildcardType) &#123;</span><br><span class="line">            result[i] = resolveWildcardType((WildcardType) bounds[i], srcType, declaringClass);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result[i] = bounds[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1.1&gt;</code>、<code>&lt;1.2&gt;</code> 处，解析泛型表达式下界（下限 <code>super</code>）和上界( 上限 <code>extends</code> )。</p></li><li><p><code>&lt;2&gt;</code> 创建 WildcardTypeImpl 对象。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java 内部静态类</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * WildcardType 实现类</span><br><span class="line"> *</span><br><span class="line"> * 泛型表达式（或者通配符表达式），即 ? extend Number、? super Integer 这样的表达式。</span><br><span class="line"> * WildcardType 虽然是 Type 的子接口，但却不是 Java 类型中的一种。</span><br><span class="line"> */</span><br><span class="line">static class WildcardTypeImpl implements WildcardType &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 泛型表达式下界（下限 super）</span><br><span class="line">     */</span><br><span class="line">    private Type[] lowerBounds;</span><br><span class="line">    /**</span><br><span class="line">     * 泛型表达式上界（上界 extends）</span><br><span class="line">     */</span><br><span class="line">    private Type[] upperBounds;</span><br><span class="line"></span><br><span class="line">    WildcardTypeImpl(Type[] lowerBounds, Type[] upperBounds) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.lowerBounds = lowerBounds;</span><br><span class="line">        this.upperBounds = upperBounds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type[] getLowerBounds() &#123;</span><br><span class="line">        return lowerBounds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type[] getUpperBounds() &#123;</span><br><span class="line">        return upperBounds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class GenericArrayTypeImpl implements GenericArrayType &#123;</span><br><span class="line">    private Type genericComponentType;</span><br><span class="line"></span><br><span class="line">    GenericArrayTypeImpl(Type genericComponentType) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.genericComponentType = genericComponentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type getGenericComponentType() &#123;</span><br><span class="line">        return genericComponentType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-2-3-resolveGenericArrayType"><a href="#14-2-3-resolveGenericArrayType" class="headerlink" title="14.2.3 resolveGenericArrayType"></a>14.2.3 resolveGenericArrayType</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java</span><br><span class="line"></span><br><span class="line">private static Type resolveGenericArrayType(GenericArrayType genericArrayType, Type srcType, Class&lt;?&gt; declaringClass) &#123;</span><br><span class="line">    // 【1】解析 componentType</span><br><span class="line">    Type componentType = genericArrayType.getGenericComponentType();</span><br><span class="line">    Type resolvedComponentType = null;</span><br><span class="line">    if (componentType instanceof TypeVariable) &#123;</span><br><span class="line">        resolvedComponentType = resolveTypeVar((TypeVariable&lt;?&gt;) componentType, srcType, declaringClass);</span><br><span class="line">    &#125; else if (componentType instanceof GenericArrayType) &#123;</span><br><span class="line">        resolvedComponentType = resolveGenericArrayType((GenericArrayType) componentType, srcType, declaringClass);</span><br><span class="line">    &#125; else if (componentType instanceof ParameterizedType) &#123;</span><br><span class="line">        resolvedComponentType = resolveParameterizedType((ParameterizedType) componentType, srcType, declaringClass);</span><br><span class="line">    &#125;</span><br><span class="line">    // 【2】创建 GenericArrayTypeImpl 对象</span><br><span class="line">    if (resolvedComponentType instanceof Class) &#123;</span><br><span class="line">        return Array.newInstance((Class&lt;?&gt;) resolvedComponentType, 0).getClass();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return new GenericArrayTypeImpl(resolvedComponentType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>【1】</code> 处，解析 <code>componentType</code> 类型。</p></li><li><p><code>【2】</code> 处，创建 GenericArrayTypeImpl 对象。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// TypeParameterResolver.java 内部静态类</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * GenericArrayType 实现类</span><br><span class="line"> *</span><br><span class="line"> * 泛型数组类型，用来描述 ParameterizedType、TypeVariable 类型的数组；即 List&lt;T&gt;[]、T[] 等；</span><br><span class="line"> */</span><br><span class="line">static class GenericArrayTypeImpl implements GenericArrayType &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数组元素类型</span><br><span class="line">     */</span><br><span class="line">    private Type genericComponentType;</span><br><span class="line"></span><br><span class="line">    GenericArrayTypeImpl(Type genericComponentType) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.genericComponentType = genericComponentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Type getGenericComponentType() &#123;</span><br><span class="line">        return genericComponentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-2-4-resolveTypeVar"><a href="#14-2-4-resolveTypeVar" class="headerlink" title="14.2.4 resolveTypeVar"></a>14.2.4 resolveTypeVar</h3><p>TODO 1001 芋艿，暂时看不太懂。暂时无视</p><p>想要死磕的胖友，可以看看 <a href="https://cdn2.jianshu.io/p/423c9a8e4424?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">《mybatis-TypeParameterResolver 工具类分析》</a> 。</p><p>可以通过调试 <code>org.apache.ibatis.reflection.TypeParameterResolverTest</code> 这个单元测试类，触发各种情况。</p><h1 id="15-ArrayUtil"><a href="#15-ArrayUtil" class="headerlink" title="15. ArrayUtil"></a>15. ArrayUtil</h1><p><code>org.apache.ibatis.reflection.ArrayUtil</code> ，数组工具类。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">// ArrayUtil.java</span><br><span class="line"></span><br><span class="line">public class ArrayUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns a hash code for &#123;@code obj&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param obj</span><br><span class="line">     *          The object to get a hash code for. May be an array or &lt;code&gt;null&lt;/code&gt;.</span><br><span class="line">     * @return A hash code of &#123;@code obj&#125; or 0 if &#123;@code obj&#125; is &lt;code&gt;null&lt;/code&gt;</span><br><span class="line">     */</span><br><span class="line">    public static int hashCode(Object obj) &#123;</span><br><span class="line">        if (obj == null) &#123;</span><br><span class="line">            // for consistency with Arrays#hashCode() and Objects#hashCode()</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        // 普通类</span><br><span class="line">        final Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        if (!clazz.isArray()) &#123;</span><br><span class="line">            return obj.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        // 数组类型</span><br><span class="line">        final Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class="line">        if (long.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((long[]) obj);</span><br><span class="line">        &#125; else if (int.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((int[]) obj);</span><br><span class="line">        &#125; else if (short.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((short[]) obj);</span><br><span class="line">        &#125; else if (char.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((char[]) obj);</span><br><span class="line">        &#125; else if (byte.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((byte[]) obj);</span><br><span class="line">        &#125; else if (boolean.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((boolean[]) obj);</span><br><span class="line">        &#125; else if (float.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((float[]) obj);</span><br><span class="line">        &#125; else if (double.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.hashCode((double[]) obj);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Arrays.hashCode((Object[]) obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Compares two objects. Returns &lt;code&gt;true&lt;/code&gt; if</span><br><span class="line">     * &lt;ul&gt;</span><br><span class="line">     * &lt;li&gt;&#123;@code thisObj&#125; and &#123;@code thatObj&#125; are both &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;</span><br><span class="line">     * &lt;li&gt;&#123;@code thisObj&#125; and &#123;@code thatObj&#125; are instances of the same type and</span><br><span class="line">     * &#123;@link Object#equals(Object)&#125; returns &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;</span><br><span class="line">     * &lt;li&gt;&#123;@code thisObj&#125; and &#123;@code thatObj&#125; are arrays with the same component type and</span><br><span class="line">     * equals() method of &#123;@link Arrays&#125; returns &lt;code&gt;true&lt;/code&gt; (not deepEquals())&lt;/li&gt;</span><br><span class="line">     * &lt;/ul&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param thisObj</span><br><span class="line">     *          The left hand object to compare. May be an array or &lt;code&gt;null&lt;/code&gt;</span><br><span class="line">     * @param thatObj</span><br><span class="line">     *          The right hand object to compare. May be an array or &lt;code&gt;null&lt;/code&gt;</span><br><span class="line">     * @return &lt;code&gt;true&lt;/code&gt; if two objects are equal; &lt;code&gt;false&lt;/code&gt; otherwise.</span><br><span class="line">     */</span><br><span class="line">    public static boolean equals(Object thisObj, Object thatObj) &#123;</span><br><span class="line">        if (thisObj == null) &#123;</span><br><span class="line">            return thatObj == null;</span><br><span class="line">        &#125; else if (thatObj == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        final Class&lt;?&gt; clazz = thisObj.getClass();</span><br><span class="line">        if (!clazz.equals(thatObj.getClass())) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 普通类</span><br><span class="line">        if (!clazz.isArray()) &#123;</span><br><span class="line">            return thisObj.equals(thatObj);</span><br><span class="line">        &#125;</span><br><span class="line">        // 数组类型</span><br><span class="line">        final Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class="line">        if (long.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((long[]) thisObj, (long[]) thatObj);</span><br><span class="line">        &#125; else if (int.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((int[]) thisObj, (int[]) thatObj);</span><br><span class="line">        &#125; else if (short.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((short[]) thisObj, (short[]) thatObj);</span><br><span class="line">        &#125; else if (char.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((char[]) thisObj, (char[]) thatObj);</span><br><span class="line">        &#125; else if (byte.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((byte[]) thisObj, (byte[]) thatObj);</span><br><span class="line">        &#125; else if (boolean.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((boolean[]) thisObj, (boolean[]) thatObj);</span><br><span class="line">        &#125; else if (float.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((float[]) thisObj, (float[]) thatObj);</span><br><span class="line">        &#125; else if (double.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.equals((double[]) thisObj, (double[]) thatObj);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Arrays.equals((Object[]) thisObj, (Object[]) thatObj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * If the &#123;@code obj&#125; is an array, toString() method of &#123;@link Arrays&#125; is called. Otherwise</span><br><span class="line">     * &#123;@link Object#toString()&#125; is called. Returns &quot;null&quot; if &#123;@code obj&#125; is &lt;code&gt;null&lt;/code&gt;.</span><br><span class="line">     *</span><br><span class="line">     * @param obj</span><br><span class="line">     *          An object. May be an array or &lt;code&gt;null&lt;/code&gt;.</span><br><span class="line">     * @return String representation of the &#123;@code obj&#125;.</span><br><span class="line">     */</span><br><span class="line">    public static String toString(Object obj) &#123;</span><br><span class="line">        if (obj == null) &#123;</span><br><span class="line">            return &quot;null&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        // 普通类</span><br><span class="line">        final Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        if (!clazz.isArray()) &#123;</span><br><span class="line">            return obj.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        // 数组类型</span><br><span class="line">        final Class&lt;?&gt; componentType = obj.getClass().getComponentType();</span><br><span class="line">        if (long.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((long[]) obj);</span><br><span class="line">        &#125; else if (int.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((int[]) obj);</span><br><span class="line">        &#125; else if (short.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((short[]) obj);</span><br><span class="line">        &#125; else if (char.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((char[]) obj);</span><br><span class="line">        &#125; else if (byte.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((byte[]) obj);</span><br><span class="line">        &#125; else if (boolean.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((boolean[]) obj);</span><br><span class="line">        &#125; else if (float.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((float[]) obj);</span><br><span class="line">        &#125; else if (double.class.equals(componentType)) &#123;</span><br><span class="line">            return Arrays.toString((double[]) obj);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Arrays.toString((Object[]) obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-ExceptionUtil"><a href="#16-ExceptionUtil" class="headerlink" title="16. ExceptionUtil"></a>16. ExceptionUtil</h1><p><code>org.apache.ibatis.reflection.ExceptionUtil</code> ，异常工具类。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// ExceptionUtil.java</span><br><span class="line"></span><br><span class="line">public class ExceptionUtil &#123;</span><br><span class="line"></span><br><span class="line">    private ExceptionUtil() &#123;</span><br><span class="line">        // Prevent Instantiation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 去掉异常的包装</span><br><span class="line">     *</span><br><span class="line">     * @param wrapped 被包装的异常</span><br><span class="line">     * @return 去除包装后的异常</span><br><span class="line">     */</span><br><span class="line">    public static Throwable unwrapThrowable(Throwable wrapped) &#123;</span><br><span class="line">        Throwable unwrapped = wrapped;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (unwrapped instanceof InvocationTargetException) &#123;</span><br><span class="line">                unwrapped = ((InvocationTargetException) unwrapped).getTargetException();</span><br><span class="line">            &#125; else if (unwrapped instanceof UndeclaredThrowableException) &#123;</span><br><span class="line">                unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return unwrapped;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>比想象中，长了超级超级超级多的文章。写的都快吐血了，鬼知道我经历了什么！！！</p><p>参考和推荐如下文章：</p><ul><li>徐郡明 <a href="https://item.jd.com/12125531.html">《MyBatis 技术内幕》</a> 的 <a href="http://svip.iocoder.cn/MyBatis/reflection-package/#">「2.2 反射工具箱」</a> 小节</li><li>祖大俊 <a href="https://my.oschina.net/zudajun/blog/668596">《Mybatis3.3.x技术内幕（七）：Mybatis初始化之六个工具》</a></li></ul><p>如果胖友看到此处，还是一脸懵逼，还是那句话，多多调试！！！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;精尽-MyBatis-源码分析-——-反射模块&quot;&gt;&lt;a href=&quot;#精尽-MyBatis-源码分析-——-反射模块&quot; class=&quot;headerlink&quot; title=&quot;精尽 MyBatis 源码分析 —— 反射模块&quot;&gt;&lt;/a&gt;精尽 MyBatis 源码分析 —— 反射模块&lt;/h1&gt;&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;本文，我们来分享 MyBatis 的反射模块，对应 &lt;code&gt;reflection&lt;/code&gt; 包。</summary>
    
    
    
    <category term="Mybatis" scheme="https://totolove.cn/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://totolove.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--03 Mybatis源码-基础模块-解析器模块</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mybatis/03%20Mybatis%E6%BA%90%E7%A0%81-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97-%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mybatis/03%20Mybatis%E6%BA%90%E7%A0%81-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97-%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97/</id>
    <published>2023-08-25T07:57:32.565Z</published>
    <updated>2023-08-25T08:30:26.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="精尽-MyBatis-源码分析-——-解析器模块"><a href="#精尽-MyBatis-源码分析-——-解析器模块" class="headerlink" title="精尽 MyBatis 源码分析 —— 解析器模块"></a>精尽 MyBatis 源码分析 —— 解析器模块</h1><h1 id="1-textcolor-red-概述"><a href="#1-textcolor-red-概述" class="headerlink" title="1. $\textcolor{red}{概述}$"></a>1. $\textcolor{red}{概述}$</h1><p>本文，我们来分享 MyBatis 的解析器模块，对应 <code>parsing</code> 包。如下图所示<span id="more"></span>：<a href="http://static.iocoder.cn/images/MyBatis/2020_01_07/01.png"><img src="http://totolovefree.top/test/202308041425201.png" alt="`parsing` 包"></a></p><p><code>parsing</code> 包</p><p>在 <a href="http://svip.iocoder.cn/MyBatis/intro">《精尽 MyBatis 源码解析 —— 项目结构一览》</a> 中，简单介绍了这个模块如下：</p><blockquote><p><strong>解析器模块，主要提供了两个功能:</strong></p><ul><li><strong>一个功能，是对 <a href="http://www.w3school.com.cn/xpath/index.asp">XPath</a> 进行封装，为 MyBatis 初始化时解析 <code>mybatis-config.xml</code> 配置文件以及映射配置文件提供支持。</strong></li><li><strong>另一个功能，是为处理动态 SQL 语句中的占位符提供支持。</strong></li></ul></blockquote><p>下面，我们就来看看具体的源码。因为 <code>parsing</code> 是基础支持层，<strong>所以建议胖友在我们讲解到的类和方法中，打折断点一起来了解</strong>。</p><h1 id="2-XPathParser"><a href="#2-XPathParser" class="headerlink" title="2. XPathParser"></a>2. XPathParser</h1><p><code>org.apache.ibatis.parsing.XPathParser</code> ，基于 Java <strong>XPath</strong> 解析器，用于解析 MyBatis <code>mybatis-config.xml</code> 和 <code>**Mapper.xml</code> 等 XML 配置文件。属性如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XML Document 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Document document;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> validation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XML 实体解析器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> EntityResolver entityResolver;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变量 Properties 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Properties variables;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java XPath 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> XPath xpath;</span><br></pre></td></tr></table></figure><ul><li><p><code>document</code>属性，XML 被解析后，生成的<code>org.w3c.dom.Document</code>对象。</p><ul><li><code>validation</code> 属性，是否校验 XML 。一般情况下，值为 <code>true</code> 。</li><li><code>entityResolver</code>属性，<code>org.xml.sax.EntityResolver</code>对象，XML 实体解析器。默认情况下，对 XML 进行校验时，会基于 XML 文档开始位置指定的 DTD 文件或 XSD 文件。例如说，解析<code>mybatis-config.xml</code>配置文件时，会加载<code>http://mybatis.org/dtd/mybatis-3-config.dtd</code>这个 DTD 文件。但是，如果每个应用启动都从网络加载该 DTD 文件，势必在弱网络下体验非常下，甚至说应用部署在无网络的环境下，还会导致下载不下来，那么就会出现 XML 校验失败的情况。所以，在实际场景下，MyBatis 自定义了 EntityResolver 的实现，达到使用本地DTD 文件，从而避免下载网络DTD 文件的效果。详细解析，见<a href="http://svip.iocoder.cn/MyBatis/parsing-package/#">「3. XMLMapperEntityResolver」</a> 。<ul><li>另外，Spring 也自定义了 EntityResolver 的实现，感兴趣的胖友，可以看看 <a href="http://svip.iocoder.cn/Spring/IoC-Validation-Mode-For-Resource">《【死磕 Spring】—— IoC 之获取验证模型》</a> 。</li></ul></li></ul></li><li><p><code>xpath</code> 属性，<code>javax.xml.xpath.XPath</code> 对象，用于查询 XML 中的节点和元素。如果对 XPath 的使用不了解的胖友，请先跳转 <a href="https://www.yiibai.com/java_xml/java_xpath_parse_document.html">《Java XPath 解析器 - 解析 XML 文档》</a> 中，进行简单学习，灰常简单。</p></li><li><p><code>variables</code> 属性，变量 Properties 对象，用来替换需要动态配置的属性值。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>variables</code> 的来源，即可以在常用的 Java Properties 文件中配置，也可以使用 MyBatis <code>&lt;property /&gt;</code> 标签中配置。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里配置的 <code>username</code> 和 <code>password</code> 属性，就可以替换上面的 <code>$&#123;username&#125;</code> 和 <code>$&#123;password&#125;</code> 这两个动态属性。</li><li>具体如何实现的，我们来看下面的 <code>PropertyParser#parse(String string, Properties variables)</code> 方法。</li></ul></li></ul></li></ul><h2 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1 构造方法"></a>2.1 构造方法</h2><p>XPathParser 的构造方法有 16 个之多，当然基本都非常相似，我们来挑选其中一个。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造 XPathParser 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> xml XML 文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validation 是否校验 XML</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> variables 变量 Properties 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityResolver XML 实体解析器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">XPathParser</span><span class="params">(String xml, <span class="type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;</span><br><span class="line">    commonConstructor(validation, variables, entityResolver);</span><br><span class="line">    <span class="built_in">this</span>.document = createDocument(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xml)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>调用 <code>#commonConstructor(boolean validation, Properties variables, EntityResolver entityResolver)</code> 方法，公用的构造方法逻辑。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">commonConstructor</span><span class="params">(<span class="type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.validation = validation;</span><br><span class="line">    <span class="built_in">this</span>.entityResolver = entityResolver;</span><br><span class="line">    <span class="built_in">this</span>.variables = variables;</span><br><span class="line">    <span class="comment">// 创建 XPathFactory 对象</span></span><br><span class="line">    <span class="type">XPathFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XPathFactory.newInstance();</span><br><span class="line">    <span class="built_in">this</span>.xpath = factory.newXPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用 <code>#createDocument(InputSource inputSource)</code> 方法，将 XML 文件解析成 Document 对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 Document 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputSource XML 的 InputSource 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Document 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Document <span class="title function_">createDocument</span><span class="params">(InputSource inputSource)</span> &#123;</span><br><span class="line">    <span class="comment">// important: this must only be called AFTER common constructor</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1&gt; 创建 DocumentBuilderFactory 对象</span></span><br><span class="line">        <span class="type">DocumentBuilderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">        factory.setValidating(validation); <span class="comment">// 设置是否验证 XML</span></span><br><span class="line"></span><br><span class="line">        factory.setNamespaceAware(<span class="literal">false</span>);</span><br><span class="line">        factory.setIgnoringComments(<span class="literal">true</span>);</span><br><span class="line">        factory.setIgnoringElementContentWhitespace(<span class="literal">false</span>);</span><br><span class="line">        factory.setCoalescing(<span class="literal">false</span>);</span><br><span class="line">        factory.setExpandEntityReferences(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2&gt; 创建 DocumentBuilder 对象</span></span><br><span class="line">        <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> factory.newDocumentBuilder();</span><br><span class="line">        builder.setEntityResolver(entityResolver); <span class="comment">// 设置实体解析器</span></span><br><span class="line">        builder.setErrorHandler(<span class="keyword">new</span> <span class="title class_">ErrorHandler</span>() &#123; <span class="comment">// 实现都空的</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 3&gt; 解析 XML 文件</span></span><br><span class="line">        <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error creating document instance.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>就是简单的 Java XML API 的使用，不了解的胖友，可以 Google 学习下。</li></ul></li></ul><h2 id="2-2-eval-方法族"><a href="#2-2-eval-方法族" class="headerlink" title="2.2 eval 方法族"></a>2.2 eval 方法族</h2><p>XPathParser 提供了一系列的 <code>#eval*</code> 方法，用于获得 Boolean、Short、Integer、Long、Float、Double、String、Node 类型的元素或节点的“值”。当然，虽然方法很多，但是都是基于 <code>#evaluate(String expression, Object root, QName returnType)</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得指定元素或节点的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expression 表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 指定节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType 返回类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">evaluate</span><span class="params">(String expression, Object root, QName returnType)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xpath.evaluate(expression, root, returnType);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error evaluating XPath.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用 <code>xpath</code> 的 <code>evaluate(String expression, Object root, QName returnType)</code> 方法，获得指定元素或节点的值。</li></ul><h3 id="2-2-1-eval-元素"><a href="#2-2-1-eval-元素" class="headerlink" title="2.2.1 eval 元素"></a>2.2.1 eval 元素</h3><p>eval 元素的方法，用于获得 Boolean、Short、Integer、Long、Float、Double、String 类型的<strong>元素</strong>的值。我们以 <code>#evalString(Object root, String expression)</code> 方法为例子，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// XPathParser.java</span><br><span class="line"></span><br><span class="line">public String evalString(Object root, String expression) &#123;</span><br><span class="line">    // &lt;1&gt; 获得值</span><br><span class="line">    String result = (String) evaluate(expression, root, XPathConstants.STRING);</span><br><span class="line">    // &lt;2&gt; 基于 variables 替换动态值，如果 result 为动态值</span><br><span class="line">    result = PropertyParser.parse(result, variables);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;1&gt;</code> 处，调用 <code>#evaluate(String expression, Object root, QName returnType)</code> 方法，获得值。其中，<code>returnType</code> 方法传入的是 <code>XPathConstants.STRING</code> ，表示返回的值是 String 类型。</li><li><code>&lt;2&gt;</code> 处，调用 <code>PropertyParser#parse(String string, Properties variables)</code> 方法，基于 <code>variables</code> 替换<strong>动态值</strong>，如果 <code>result</code> 为<strong>动态值</strong>。这就是 MyBatis 如何替换掉 XML 中的动态值实现的方式。关于 PropertyParser ，我们会在 <a href="http://svip.iocoder.cn/MyBatis/parsing-package/#">「5. PropertyParser」</a> 详细解析。</li></ul><h3 id="2-2-2-eval-节点"><a href="#2-2-2-eval-节点" class="headerlink" title="2.2.2 eval 节点"></a>2.2.2 eval 节点</h3><p>eval 元素的方法，用于获得 Node 类型的<strong>节点</strong>的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XPathParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;XNode&gt; <span class="title function_">evalNodes</span><span class="params">(String expression)</span> &#123; <span class="comment">// Node 数组</span></span><br><span class="line">    <span class="keyword">return</span> evalNodes(document, expression);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;XNode&gt; <span class="title function_">evalNodes</span><span class="params">(Object root, String expression)</span> &#123; <span class="comment">// Node 数组</span></span><br><span class="line">    <span class="comment">// &lt;1&gt; 获得 Node 数组</span></span><br><span class="line">    <span class="type">NodeList</span> <span class="variable">nodes</span> <span class="operator">=</span> (NodeList) evaluate(expression, root, XPathConstants.NODESET);</span><br><span class="line">    <span class="comment">// &lt;2&gt; 封装成 XNode 数组</span></span><br><span class="line">    List&lt;XNode&gt; xnodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</span><br><span class="line">        xnodes.add(<span class="keyword">new</span> <span class="title class_">XNode</span>(<span class="built_in">this</span>, nodes.item(i), variables));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xnodes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> XNode <span class="title function_">evalNode</span><span class="params">(String expression)</span> &#123; <span class="comment">// Node 对象</span></span><br><span class="line">    <span class="keyword">return</span> evalNode(document, expression);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> XNode <span class="title function_">evalNode</span><span class="params">(Object root, String expression)</span> &#123; <span class="comment">// Node 对象</span></span><br><span class="line">    <span class="comment">// &lt;1&gt; 获得 Node 对象</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> (Node) evaluate(expression, root, XPathConstants.NODE);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;2&gt; 封装成 XNode 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XNode</span>(<span class="built_in">this</span>, node, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> 处，返回结果有 Node <strong>对象</strong>和<strong>数组</strong>两种情况，根据方法参数 <code>expression</code> 需要获取的节点不同。</p></li><li><p><code>&lt;2&gt;</code> 处， 最终结果会将 Node 封装成 <code>org.apache.ibatis.parsing.XNode</code> 对象，主要为了<strong>动态值的替换</strong>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XNode.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">evalString</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> xpathParser.evalString(node, expression);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其它方法，就不详细解析。感兴趣的胖友，可以自己翻翻。</li></ul></li></ul><h1 id="3-XMLMapperEntityResolver"><a href="#3-XMLMapperEntityResolver" class="headerlink" title="3. XMLMapperEntityResolver"></a>3. XMLMapperEntityResolver</h1><p><code>org.apache.ibatis.builder.xml.XMLMapperEntityResolver</code> ，实现 EntityResolver 接口，MyBatis 自定义 EntityResolver 实现类，用于加载本地的 <code>mybatis-3-config.dtd</code> 和 <code>mybatis-3-mapper.dtd</code> 这两个 DTD 文件。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XMLMapperEntityResolver.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLMapperEntityResolver</span> <span class="keyword">implements</span> <span class="title class_">EntityResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IBATIS_CONFIG_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;ibatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IBATIS_MAPPER_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;ibatis-3-mapper.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;mybatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_MAPPER_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;mybatis-3-mapper.dtd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地 mybatis-config.dtd 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_DTD</span> <span class="operator">=</span> <span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地 mybatis-mapper.dtd 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_MAPPER_DTD</span> <span class="operator">=</span> <span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Converts a public DTD into a local one</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicId The public id that is what comes after &quot;PUBLIC&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> systemId The system id that is what comes after the public id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The InputSource for the DTD</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.xml.sax.SAXException If anything goes wrong</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputSource <span class="title function_">resolveEntity</span><span class="params">(String publicId, String systemId)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (systemId != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">lowerCaseSystemId</span> <span class="operator">=</span> systemId.toLowerCase(Locale.ENGLISH);</span><br><span class="line">                <span class="comment">// 本地 mybatis-config.dtd 文件</span></span><br><span class="line">                <span class="keyword">if</span> (lowerCaseSystemId.contains(MYBATIS_CONFIG_SYSTEM) || lowerCaseSystemId.contains(IBATIS_CONFIG_SYSTEM)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> getInputSource(MYBATIS_CONFIG_DTD, publicId, systemId);</span><br><span class="line">                <span class="comment">// 本地 mybatis-mapper.dtd 文件</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCaseSystemId.contains(MYBATIS_MAPPER_SYSTEM) || lowerCaseSystemId.contains(IBATIS_MAPPER_SYSTEM)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> getInputSource(MYBATIS_MAPPER_DTD, publicId, systemId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SAXException</span>(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputSource <span class="title function_">getInputSource</span><span class="params">(String path, String publicId, String systemId)</span> &#123;</span><br><span class="line">        <span class="type">InputSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (path != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建 InputSource 对象</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(path);</span><br><span class="line">                source = <span class="keyword">new</span> <span class="title class_">InputSource</span>(in);</span><br><span class="line">                <span class="comment">// 设置  publicId、systemId 属性</span></span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// ignore, null is ok</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码比较简单，胖友自己瞅瞅哈。</li></ul><h1 id="4-GenericTokenParser"><a href="#4-GenericTokenParser" class="headerlink" title="4. GenericTokenParser"></a>4. GenericTokenParser</h1><p><code>org.apache.ibatis.parsing.GenericTokenParser</code> ，<strong>通用</strong>的 Token 解析器。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GenericTokenParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTokenParser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始的 Token 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String openToken;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束的 Token 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String closeToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericTokenParser</span><span class="params">(String openToken, String closeToken, TokenHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.openToken = openToken;</span><br><span class="line">        <span class="built_in">this</span>.closeToken = closeToken;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parse</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// search open token</span></span><br><span class="line">        <span class="comment">// 寻找开始的 openToken 的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> text.indexOf(openToken, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123; <span class="comment">// 找不到，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] src = text.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 起始查找位置</span></span><br><span class="line">        <span class="comment">// 结果</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 匹配到 openToken 和 closeToken 之间的表达式</span></span><br><span class="line">        <span class="comment">// 循环匹配</span></span><br><span class="line">        <span class="keyword">while</span> (start &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 转义字符</span></span><br><span class="line">            <span class="keyword">if</span> (start &gt; <span class="number">0</span> &amp;&amp; src[start - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// this open token is escaped. remove the backslash and continue.</span></span><br><span class="line">                <span class="comment">// 因为 openToken 前面一个位置是 \ 转义字符，所以忽略 \</span></span><br><span class="line">                <span class="comment">// 添加 [offset, start - offset - 1] 和 openToken 的内容，添加到 builder 中</span></span><br><span class="line">                builder.append(src, offset, start - offset - <span class="number">1</span>).append(openToken);</span><br><span class="line">                <span class="comment">// 修改 offset</span></span><br><span class="line">                offset = start + openToken.length();</span><br><span class="line">            <span class="comment">// 非转义字符</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// found open token. let&#x27;s search close token.</span></span><br><span class="line">                <span class="comment">// 创建/重置 expression 对象</span></span><br><span class="line">                <span class="keyword">if</span> (expression == <span class="literal">null</span>) &#123;</span><br><span class="line">                    expression = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    expression.setLength(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 添加 offset 和 openToken 之间的内容，添加到 builder 中</span></span><br><span class="line">                builder.append(src, offset, start - offset);</span><br><span class="line">                <span class="comment">// 修改 offset</span></span><br><span class="line">                offset = start + openToken.length();</span><br><span class="line">                <span class="comment">// 寻找结束的 closeToken 的位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> text.indexOf(closeToken, offset);</span><br><span class="line">                <span class="keyword">while</span> (end &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 转义</span></span><br><span class="line">                    <span class="keyword">if</span> (end &gt; offset &amp;&amp; src[end - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// this close token is escaped. remove the backslash and continue.</span></span><br><span class="line">                        <span class="comment">// 因为 endToken 前面一个位置是 \ 转义字符，所以忽略 \</span></span><br><span class="line">                        <span class="comment">// 添加 [offset, end - offset - 1] 和 endToken 的内容，添加到 builder 中</span></span><br><span class="line">                        expression.append(src, offset, end - offset - <span class="number">1</span>).append(closeToken);</span><br><span class="line">                        <span class="comment">// 修改 offset</span></span><br><span class="line">                        offset = end + closeToken.length();</span><br><span class="line">                        <span class="comment">// 继续，寻找结束的 closeToken 的位置</span></span><br><span class="line">                        end = text.indexOf(closeToken, offset);</span><br><span class="line">                    <span class="comment">// 非转义</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 添加 [offset, end - offset] 的内容，添加到 builder 中</span></span><br><span class="line">                        expression.append(src, offset, end - offset);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 拼接内容</span></span><br><span class="line">                <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// close token was not found.</span></span><br><span class="line">                    <span class="comment">// closeToken 未找到，直接拼接</span></span><br><span class="line">                    builder.append(src, start, src.length - start);</span><br><span class="line">                    <span class="comment">// 修改 offset</span></span><br><span class="line">                    offset = src.length;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// &lt;x&gt; closeToken 找到，将 expression 提交给 handler 处理 ，并将处理结果添加到 builder 中</span></span><br><span class="line">                    builder.append(handler.handleToken(expression.toString()));</span><br><span class="line">                    <span class="comment">// 修改 offset</span></span><br><span class="line">                    offset = end + closeToken.length();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 继续，寻找开始的 openToken 的位置</span></span><br><span class="line">            start = text.indexOf(openToken, offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拼接剩余的部分</span></span><br><span class="line">        <span class="keyword">if</span> (offset &lt; src.length) &#123;</span><br><span class="line">            builder.append(src, offset, src.length - offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码看起来好冗长，但是淡定，就一个 <code>#parse(String text)</code> 方法，<strong>循环</strong>( 因为可能不只一个 )，解析以 <code>openToken</code> 开始，以 <code>closeToken</code> 结束的 Token ，并提交给 <code>handler</code> 进行处理，即 <code>&lt;x&gt;</code> 处。</li><li>所以所以所以，胖友可以耐心看下这段逻辑，也可以忽略，大体理解就好。</li><li>关于 <code>handler</code> 这个 TokenHandler ，详细见 <a href="http://svip.iocoder.cn/MyBatis/parsing-package/#">「5. TokenHandler」</a> 。当然，这也是为什么 GenericTokenParser 叫做<strong>通用</strong>的原因，而 TokenHandler 处理<strong>特定</strong>的逻辑。</li></ul><h1 id="5-PropertyParser"><a href="#5-PropertyParser" class="headerlink" title="5. PropertyParser"></a>5. PropertyParser</h1><p><code>org.apache.ibatis.parsing.PropertyParser</code> ，动态属性解析器。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyParser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略部分无关的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PropertyParser</span><span class="params">()</span> &#123; <span class="comment">// &lt;1&gt;</span></span><br><span class="line">        <span class="comment">// Prevent Instantiation</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parse</span><span class="params">(String string, Properties variables)</span> &#123; <span class="comment">// &lt;2&gt;</span></span><br><span class="line">        <span class="comment">// &lt;2.1&gt; 创建 VariableTokenHandler 对象</span></span><br><span class="line">        <span class="type">VariableTokenHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableTokenHandler</span>(variables);</span><br><span class="line">        <span class="comment">// &lt;2.2&gt; 创建 GenericTokenParser 对象</span></span><br><span class="line">        <span class="type">GenericTokenParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTokenParser</span>(<span class="string">&quot;$&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, handler);</span><br><span class="line">        <span class="comment">// &lt;2.3&gt; 执行解析</span></span><br><span class="line">        <span class="keyword">return</span> parser.parse(string);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;1&gt;</code> ，构造方法，修饰符为 <code>private</code> ，禁止构造 PropertyParser 对象，因为它是一个静态方法的工具类。</p></li><li><p><code>&lt;2&gt;</code>，基于<code>variables</code>变量，替换<code>string</code>字符串中的动态属性，并返回结果。</p></li><li><p><code>&lt;2.1&gt;</code> ，创建 VariableTokenHandler 对象。</p></li><li><p><code>&lt;2.2&gt;</code>，创建 GenericTokenParser 对象。</p><ul><li>我们可以看到，<code>openToken = &#123;</code> ，<code>closeToken = &#125;</code> ，这不就是上面看到的 <code>$&#123;username&#125;</code> 和 <code>&#123;password&#125;</code> 的么。</li><li>同时，我们也可以看到，<code>handler</code> 类型为 VariableTokenHandler ，也就是说，通过它实现<strong>自定义</strong>的处理逻辑。关于它，在 <a href="http://svip.iocoder.cn/MyBatis/parsing-package/#">「6.1 VariableTokenHandler」</a> 中详细解析。</li></ul></li><li><p><code>&lt;2.3&gt;</code> ，调用 <code>GenericTokenParser#parse(String text)</code> 方法，执行解析。</p></li></ul><h1 id="6-TokenHandler"><a href="#6-TokenHandler" class="headerlink" title="6. TokenHandler"></a>6. TokenHandler</h1><p><code>org.apache.ibatis.parsing.TokenHandler</code> ，Token 处理器接口。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TokenHandler.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TokenHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content Token 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">handleToken</span><span class="params">(String content)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>#handleToken(String content)</code> 方法，处理 Token ，在 <a href="http://svip.iocoder.cn/MyBatis/parsing-package/#">「4. GenericTokenParser」</a> 中，我们已经看到它的调用了。</li></ul><p>TokenHandler 有四个子类实现，如下图所示：<a href="http://static.iocoder.cn/images/MyBatis/2020_01_07/02.png"><img src="http://totolovefree.top/test/202308041425235.png" alt="TokenHandler 子类"></a>TokenHandler 子类</p><ul><li>本文暂时只解析 VariableTokenHandler 类，因为只有它在 <code>parsing</code> 包中，和解析器模块相关。</li></ul><h2 id="6-1-VariableTokenHandler"><a href="#6-1-VariableTokenHandler" class="headerlink" title="6.1 VariableTokenHandler"></a>6.1 VariableTokenHandler</h2><p>VariableTokenHandler ，是 PropertyParser 的内部静态类，变量 Token 处理器。具体什么用途？上面不是已经整的明明白白啦，就不重复解释啦。</p><h3 id="6-1-1-构造方法"><a href="#6-1-1-构造方法" class="headerlink" title="6.1.1 构造方法"></a>6.1.1 构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertyParser.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The special property key that indicate whether enable a default value on placeholder.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   The default value is &#123;<span class="doctag">@code</span> false&#125; (indicate disable a default value on placeholder)</span></span><br><span class="line"><span class="comment"> *   If you specify the &#123;<span class="doctag">@code</span> true&#125;, you can specify key and default value on placeholder (e.g. &#123;<span class="doctag">@code</span> $&#123;db.username:postgres&#125;&#125;).</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ENABLE_DEFAULT_VALUE</span> <span class="operator">=</span> KEY_PREFIX + <span class="string">&quot;enable-default-value&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The special property key that specify a separator for key and default value on placeholder.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   The default separator is &#123;<span class="doctag">@code</span> &quot;:&quot;&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_DEFAULT_VALUE_SEPARATOR</span> <span class="operator">=</span> KEY_PREFIX + <span class="string">&quot;default-value-separator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENABLE_DEFAULT_VALUE</span> <span class="operator">=</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_VALUE_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VariableTokenHandler 类里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变量 Properties 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Properties variables;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否开启默认值功能。默认为 &#123;<span class="doctag">@link</span> #ENABLE_DEFAULT_VALUE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> enableDefaultValue;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认值的分隔符。默认为 &#123;<span class="doctag">@link</span> #KEY_DEFAULT_VALUE_SEPARATOR&#125; ，即 &quot;:&quot; 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String defaultValueSeparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">VariableTokenHandler</span><span class="params">(Properties variables)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.variables = variables;</span><br><span class="line">    <span class="built_in">this</span>.enableDefaultValue = Boolean.parseBoolean(getPropertyValue(KEY_ENABLE_DEFAULT_VALUE, ENABLE_DEFAULT_VALUE));</span><br><span class="line">    <span class="built_in">this</span>.defaultValueSeparator = getPropertyValue(KEY_DEFAULT_VALUE_SEPARATOR, DEFAULT_VALUE_SEPARATOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getPropertyValue</span><span class="params">(String key, String defaultValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (variables == <span class="literal">null</span>) ? defaultValue : variables.getProperty(key, defaultValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>虽然看起来有一大坨的变量，但是不要怕。</p></li><li><p><code>variables</code> 属性，变量 Properties 对象。</p></li><li><p><code>enableDefaultValue</code> 属性，是否开启默认值功能。默认为 <code>ENABLE_DEFAULT_VALUE</code> ，即<strong>不开启</strong>。想要开启，可以配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- Enable this feature --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>defaultValueSeparator</code> 属性，默认值的分隔符。默认为 <code>KEY_DEFAULT_VALUE_SEPARATOR</code> ，即 <code>&quot;:&quot;</code> 。想要修改，可以配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?:&quot;</span>/&gt;</span> <span class="comment">&lt;!-- Change default value of separator --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>分隔符被修改成了 <code>?:</code> 。</li></ul></li></ul><h3 id="6-1-2-handleToken"><a href="#6-1-2-handleToken" class="headerlink" title="6.1.2 handleToken"></a>6.1.2 handleToken</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VariableTokenHandler 类里</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleToken</span><span class="params">(String content)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (variables != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> content;</span><br><span class="line">        <span class="comment">// 开启默认值功能</span></span><br><span class="line">        <span class="keyword">if</span> (enableDefaultValue) &#123;</span><br><span class="line">            <span class="comment">// 查找默认值</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">separatorIndex</span> <span class="operator">=</span> content.indexOf(defaultValueSeparator);</span><br><span class="line">            <span class="type">String</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (separatorIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                key = content.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line">                defaultValue = content.substring(separatorIndex + defaultValueSeparator.length());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 有默认值，优先替换，不存在则返回默认值</span></span><br><span class="line">            <span class="keyword">if</span> (defaultValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> variables.getProperty(key, defaultValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未开启默认值功能，直接替换</span></span><br><span class="line">        <span class="keyword">if</span> (variables.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> variables.getProperty(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无 variables ，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;$&#123;&quot;</span> + content + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较简单，胖友自己看。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;精尽-MyBatis-源码分析-——-解析器模块&quot;&gt;&lt;a href=&quot;#精尽-MyBatis-源码分析-——-解析器模块&quot; class=&quot;headerlink&quot; title=&quot;精尽 MyBatis 源码分析 —— 解析器模块&quot;&gt;&lt;/a&gt;精尽 MyBatis 源码分析 —— 解析器模块&lt;/h1&gt;&lt;h1 id=&quot;1-textcolor-red-概述&quot;&gt;&lt;a href=&quot;#1-textcolor-red-概述&quot; class=&quot;headerlink&quot; title=&quot;1. $&#92;textcolor{red}{概述}$&quot;&gt;&lt;/a&gt;1. $&#92;textcolor{red}{概述}$&lt;/h1&gt;&lt;p&gt;本文，我们来分享 MyBatis 的解析器模块，对应 &lt;code&gt;parsing&lt;/code&gt; 包。如下图所示</summary>
    
    
    
    <category term="Mybatis" scheme="https://totolove.cn/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://totolove.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--02 Mybatis源码-项目结构</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mybatis/02%20Mybatis%E6%BA%90%E7%A0%81-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mybatis/02%20Mybatis%E6%BA%90%E7%A0%81-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</id>
    <published>2023-08-25T07:57:32.562Z</published>
    <updated>2023-08-25T08:29:59.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="精尽-MyBatis-源码分析-——-项目结构一览"><a href="#精尽-MyBatis-源码分析-——-项目结构一览" class="headerlink" title="精尽 MyBatis 源码分析 —— 项目结构一览"></a>精尽 MyBatis 源码分析 —— 项目结构一览</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要分享 <strong>MyBatis 的项目结构</strong>。<br>希望通过本文能让胖友对 MyBatis 的整体项目有个简单的了解。<span id="more"></span></p><p>另外，<a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org</a> 提供了 MyBatis 非常不错的中文文档。如果胖友对 MyBatis 碰到一些使用上的问题，可以常常翻阅。</p><p>在拉取 MyBatis 项目后，我们会发现拆分了<strong>好多</strong>包。是不是内心一紧，产生了恐惧感？不要方，我们就是继续怼。</p><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/01.png"><img src="http://totolovefree.top/test/202308031640015.png" alt="项目结构"></a>项目结构</p><h1 id="2-代码统计"><a href="#2-代码统计" class="headerlink" title="2. 代码统计"></a>2. 代码统计</h1><p>这里先分享一个小技巧。笔者在开始源码学习时，会首先了解项目的代码量。</p><p><strong>第一种方式</strong>，使用 <a href="https://plugins.jetbrains.com/plugin/4509-statistic">IDEA Statistic</a> 插件，统计整体代码量。</p><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/02.png"><img src="http://totolovefree.top/test/202308031640968.png" alt="Statistic 统计代码量"></a>Statistic 统计代码量</p><p>我们可以粗略的看到，总的代码量在 21441 行。还是在可接受的范围。</p><p><strong>第二种方式</strong>，使用 <a href="http://blog.csdn.net/yhhwatl/article/details/52623879">Shell 脚本命令逐个 Maven 模块统计</a> 。</p><p>一般情况下，笔者使用 <code>find . -name &quot;*.java&quot;|xargs cat|grep -v -e ^$ -e ^\s*\/\/.*$|wc -l</code> 。这个命令只过滤了<strong>部分注释</strong>，所以相比 <a href="https://plugins.jetbrains.com/plugin/4509-statistic">IDEA Statistic</a> 会<strong>偏多</strong>。</p><p>如下是艿艿 <code>cd</code> 到每个包下，然后执行脚本统计后的结果：</p><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/03.png"><img src="http://totolovefree.top/test/202308031640985.png" alt="Statistic 统计代码量"></a>Statistic 统计代码量</p><h1 id="3-整体架构"><a href="#3-整体架构" class="headerlink" title="3. 整体架构"></a>3. 整体架构</h1><blockquote><p>老艿艿：本小节的内容，笔者会基于 <a href="https://item.jd.com/12125531.html">《MyBatis 技术内幕》</a> 的 <a href="http://svip.iocoder.cn/MyBatis/intro/#">「1.4 MyBatis整体架构」</a> 小节来编写。</p><p>这本书非常不错，笔者在死磕的源码的时候，帮助灰常大。</p></blockquote><p>MyBatis 的整体架构分为三层：</p><ol><li>基础支持层</li><li>核心处理层</li><li>接口层</li></ol><blockquote><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/04.png"><img src="http://totolovefree.top/test/202308031640900.png" alt="整体架构"></a>整体架构</p></blockquote><h2 id="3-1-基础支持层"><a href="#3-1-基础支持层" class="headerlink" title="3.1 基础支持层"></a>3.1 基础支持层</h2><p>基础支持层，包含整个 MyBatis 的基础模块，这些模块为核心处理层的功能提供了良好的支撑。</p><h3 id="3-1-1-反射模块"><a href="#3-1-1-反射模块" class="headerlink" title="3.1.1 反射模块"></a>3.1.1 反射模块</h3><p>对应 <code>reflection</code> 包。</p><blockquote><p>Java 中的反射虽然功能强大，但对大多数开发人员来说，写出高质量的反射代码还是 有一定难度的。MyBatis 中专门提供了反射模块，该模块对 Java 原生的反射进行了良好的封装，提了更加<strong>简洁易用的 API</strong>，方便上层使调用，并且对<strong>反射操作进行了一系列优化</strong>，例如缓存了类的元数据，提高了反射操作的性能。</p></blockquote><h3 id="3-1-2-类型模块"><a href="#3-1-2-类型模块" class="headerlink" title="3.1.2 类型模块"></a>3.1.2 类型模块</h3><p>对应 <code>type</code> 包。</p><blockquote><p>① MyBatis 为简化配置文件提供了<strong>别名机制</strong>，该机制是类型转换模块的主要功能之一。</p><p>② 类型转换模块的另一个功能是<strong>实现 JDBC 类型与 Java 类型之间</strong>的转换，该功能在为 SQL 语句绑定实参以及映射查询结果集时都会涉及：</p><ul><li>在为 SQL 语句绑定实参时，会将数据由 Java 类型转换成 JDBC 类型。</li><li>而在映射结果集时，会将数据由 JDBC 类型转换成 Java 类型。</li></ul></blockquote><h3 id="3-1-3-日志模块"><a href="#3-1-3-日志模块" class="headerlink" title="3.1.3 日志模块"></a>3.1.3 日志模块</h3><p>对应 <code>logging</code> 包。</p><blockquote><p>无论在开发测试环境中，还是在线上生产环境中，日志在整个系统中的地位都是非常重要的。良好的日志功能可以帮助开发人员和测试人员快速定位 Bug 代码，也可以帮助运维人员快速定位性能瓶颈等问题。目前的 Java 世界中存在很多优秀的日志框架，例如 Log4j、 Log4j2、Slf4j 等。</p><p>MyBatis 作为一个设计优良的框架，除了提供详细的日志输出信息，还要能够集成多种日志框架，其日志模块的一个主要功能就是<strong>集成第三方日志框架</strong>。</p></blockquote><h3 id="3-1-4-IO-模块"><a href="#3-1-4-IO-模块" class="headerlink" title="3.1.4 IO 模块"></a>3.1.4 IO 模块</h3><p>对应 <code>io</code> 包。</p><blockquote><p>资源加载模块，主要是对类加载器进行封装，确定类加载器的使用顺序，并提供了加载类文件以及其他资源文件的功能 。</p></blockquote><h3 id="3-1-5-解析器模块"><a href="#3-1-5-解析器模块" class="headerlink" title="3.1.5 解析器模块"></a>3.1.5 解析器模块</h3><p>对应 <code>parsing</code> 包。</p><blockquote><p>解析器模块，主要提供了两个功能:</p><ul><li>一个功能，是对 <a href="http://www.w3school.com.cn/xpath/index.asp">XPath</a> 进行封装，为 MyBatis 初始化时解析 <code>mybatis-config.xml</code> 配置文件以及映射配置文件提供支持。</li><li>另一个功能，是为处理动态 SQL 语句中的占位符提供支持。</li></ul></blockquote><h3 id="3-1-6-数据源模块"><a href="#3-1-6-数据源模块" class="headerlink" title="3.1.6 数据源模块"></a>3.1.6 数据源模块</h3><p>对应 <code>datasource</code> 包。</p><blockquote><p>数据源是实际开发中常用的组件之一。现在开源的数据源都提供了比较丰富的功能，例如，连接池功能、检测连接状态等，选择性能优秀的数据源组件对于提升 ORM 框架乃至整个应用的性能都是非常重要的。</p><p>MyBatis <strong>自身提供了相应的数据源实现，当然 MyBatis 也提供了与第三方数据源集成的接口，这些功能都位于数据源模块之中</strong>。</p></blockquote><h3 id="3-1-7-事务模块"><a href="#3-1-7-事务模块" class="headerlink" title="3.1.7 事务模块"></a>3.1.7 事务模块</h3><p>对应 <code>transaction</code> 包。</p><blockquote><p>MyBatis 对数据库中的事务进行了抽象，其自身提供了<strong>相应的事务接口和简单实现</strong>。</p><p>在很多场景中，MyBatis 会与 Spring 框架集成，并由 <strong>Spring 框架管理事务</strong>。</p></blockquote><h3 id="3-1-8-缓存模块"><a href="#3-1-8-缓存模块" class="headerlink" title="3.1.8 缓存模块"></a>3.1.8 缓存模块</h3><p>对应 <code>cache</code> 包。</p><blockquote><p>在优化系统性能时，优化数据库性能是非常重要的一个环节，而添加缓存则是优化数据库时最有效的手段之一。正确、合理地使用缓存可以将一部分数据库请求拦截在缓存这一层。</p><p>MyBatis 中提供了<strong>一级缓存和二级缓存</strong>，而这两级缓存都是依赖于基础支持层中的缓 存模块实现的。这里需要读者注意的是，MyBatis 中自带的这两级缓存与 MyBatis 以及整个应用是运行在同一个 JVM 中的，共享同一块堆内存。如果这两级缓存中的数据量较大， 则可能影响系统中其他功能的运行，所以当需要缓存大量数据时，优先考虑使用 Redis、Memcache 等缓存产品。</p></blockquote><h3 id="3-1-9-Binding-模块"><a href="#3-1-9-Binding-模块" class="headerlink" title="3.1.9 Binding 模块"></a>3.1.9 Binding 模块</h3><p>对应 <code>binding</code> 包。</p><blockquote><p>在调用 SqlSession 相应方法执行数据库操作时，需要指定映射文件中定义的 SQL 节点，如果出现拼写错误，我们只能在运行时才能发现相应的异常。为了尽早发现这种错误，MyBatis 通过 Binding 模块，将用户自定义的 Mapper 接口与映射配置文件关联起来，系统可以通过调用自定义 Mapper 接口中的方法执行相应的 SQL 语句完成数据库操作，从而避免上述问题。</p><p>值得读者注意的是，开发人员无须编写自定义 Mapper 接口的实现，MyBatis 会自动为其创建动态代理对象。在有些场景中，自定义 Mapper 接口可以完全代替映射配置文件，但有的映射规则和 SQL 语句的定义还是写在映射配置文件中比较方便，例如动态 SQL 语句的定义。</p></blockquote><h3 id="3-1-10-注解模块"><a href="#3-1-10-注解模块" class="headerlink" title="3.1.10 注解模块"></a>3.1.10 注解模块</h3><p>对应 <code>annotations</code> 包。</p><blockquote><p>随着 Java 注解的慢慢流行，MyBatis 提供了<strong>注解</strong>的方式，使得我们方便的在 Mapper 接口上编写简单的数据库 SQL 操作代码，而无需像之前一样，必须编写 SQL 在 XML 格式的 Mapper 文件中。虽然说，实际场景下，大家还是喜欢在 XML 格式的 Mapper 文件中编写响应的 SQL 操作。</p></blockquote><h3 id="3-1-11-异常模块"><a href="#3-1-11-异常模块" class="headerlink" title="3.1.11 异常模块"></a>3.1.11 异常模块</h3><p>对应 <code>exceptions</code> 包。</p><blockquote><p>定义了 MyBatis 专有的 PersistenceException 和 TooManyResultsException 异常。</p></blockquote><h2 id="3-2-核心处理层"><a href="#3-2-核心处理层" class="headerlink" title="3.2 核心处理层"></a>3.2 核心处理层</h2><p>在核心处理层中，实现了 MyBatis 的核心处理流程，其中包括 MyBatis 的<strong>初始化</strong>以及完成一次<strong>数据库操作</strong>的涉及的全部流程 。</p><h3 id="3-2-1-配置解析"><a href="#3-2-1-配置解析" class="headerlink" title="3.2.1 配置解析"></a>3.2.1 配置解析</h3><p>对应 <code>builder</code> 和 <code>mapping</code> 模块。前者为配置<strong>解析过程</strong>，后者主要为 SQL 操作解析后的<strong>映射</strong>。</p><blockquote><p>在 MyBatis 初始化过程中，会加载 <code>mybatis-config.xml</code> 配置文件、映射配置文件以及 Mapper 接口中的注解信息，解析后的配置信息会形成相应的对象并保存到 Configuration 对象中。例如：</p><ul><li><code>&lt;resultMap&gt;</code>节点(即 ResultSet 的映射规则) 会被解析成 ResultMap 对象。</li><li><code>&lt;result&gt;</code> 节点(即属性映射)会被解析成 ResultMapping 对象。</li></ul><p>之后，利用该 Configuration 对象创建 SqlSessionFactory对象。待 MyBatis 初始化之后，开发人员可以通过初始化得到 SqlSessionFactory 创建 SqlSession 对象并完成数据库操作。</p></blockquote><h3 id="3-2-2-SQL-解析"><a href="#3-2-2-SQL-解析" class="headerlink" title="3.2.2 SQL 解析"></a>3.2.2 SQL 解析</h3><p>对应 <code>scripting</code> 模块。</p><blockquote><p>拼凑 SQL 语句是一件烦琐且易出错的过程，为了将开发人员从这项枯燥无趣的工作中 解脱出来，MyBatis 实现<strong>动态 SQL 语句</strong>的功能，提供了多种动态 SQL语句对应的节点。例如<code>&lt;where&gt;</code> 节点、<code>&lt;if&gt;</code> 节点、<code>&lt;foreach&gt;</code> 节点等 。通过这些节点的组合使用， 开发人 员可以写出几乎满足所有需求的动态 SQL 语句。</p><p>MyBatis 中的 <code>scripting</code> 模块，会根据用户传入的实参，解析映射文件中定义的动态 SQL 节点，并形成数据库可执行的 SQL 语句。之后会处理 SQL 语句中的占位符，绑定用户传入的实参。</p></blockquote><h3 id="3-2-3-SQL-执行"><a href="#3-2-3-SQL-执行" class="headerlink" title="3.2.3 SQL 执行"></a>3.2.3 SQL 执行</h3><p>对应 <code>executor</code> 和 <code>cursor</code> 模块。前者对应<strong>执行器</strong>，后者对应执行<strong>结果的游标</strong>。</p><blockquote><p>SQL 语句的执行涉及多个组件 ，其中比较重要的是 Executor、StatementHandler、ParameterHandler 和 ResultSetHandler 。</p><ul><li><strong>Executor</strong> 主要负责维护一级缓存和二级缓存，并提供事务管理的相关操作，它会将数据库相关操作委托给 StatementHandler完成。</li><li><strong>StatementHandler</strong> 首先通过 <strong>ParameterHandler</strong> 完成 SQL 语句的实参绑定，然后通过 <code>java.sql.Statement</code> 对象执行 SQL 语句并得到结果集，最后通过 <strong>ResultSetHandler</strong> 完成结果集的映射，得到结果对象并返回。</li></ul><p>整体过程如下图：</p><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/05.png"><img src="http://totolovefree.top/test/202308031640859.png" alt="整体过程"></a>整体过程</p></blockquote><h3 id="3-2-4-插件层"><a href="#3-2-4-插件层" class="headerlink" title="3.2.4 插件层"></a>3.2.4 插件层</h3><p>对应 <code>plugin</code> 模块。</p><blockquote><p>Mybatis 自身的功能虽然强大，但是并不能完美切合所有的应用场景，因此 MyBatis 提供了插件接口，我们可以通过添加用户自定义插件的方式对 MyBatis 进行扩展。用户自定义插件也可以改变 Mybatis 的默认行为，例如，我们可以拦截 SQL 语句并对其进行重写。</p><p>由于用户自定义插件会影响 MyBatis 的核心行为，在使用自定义插件之前，开发人员需要了解 MyBatis 内部的原理，这样才能编写出安全、高效的插件。</p></blockquote><h2 id="3-3-接口层"><a href="#3-3-接口层" class="headerlink" title="3.3 接口层"></a>3.3 接口层</h2><p>对应 <code>session</code> 模块。</p><blockquote><p>接口层相对简单，其核心是 SqlSession 接口，该接口中定义了 MyBatis 暴露给应用程序调用的 API，也就是上层应用与 MyBatis 交互的桥梁。接口层在接收到调用请求时，会调用核心处理层的相应模块来完成具体的数据库操作。</p></blockquote><h2 id="3-4-其它层"><a href="#3-4-其它层" class="headerlink" title="3.4 其它层"></a>3.4 其它层</h2><p>这块，严格来说，不能叫做一个层。考虑到统一，就简单这么命名把。哈哈哈。</p><h3 id="3-4-1-JDBC-模块"><a href="#3-4-1-JDBC-模块" class="headerlink" title="3.4.1 JDBC 模块"></a>3.4.1 JDBC 模块</h3><p>对应 <code>jdbc</code> 包。</p><blockquote><p>JDBC <strong>单元测试</strong>工具类。所以，不感兴趣的同学，已经可以忽略 1236 行代码了。</p></blockquote><h3 id="3-4-2-Lang-模块"><a href="#3-4-2-Lang-模块" class="headerlink" title="3.4.2 Lang 模块"></a>3.4.2 Lang 模块</h3><p>对应 <code>lang</code> 包。</p><p>看不懂具体用途，暂时误会。</p><h2 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h2><p>总的来说，MyBatis 的代码，还是比较简单易懂。并且，看着包名，基本也能猜到大体的用途。在网络上找了一个总结的图，大家瞅瞅：</p><blockquote><p>FROM <a href="http://zeng233.github.io/2015/08/20/2.1mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%89%8D%E8%A8%80/">《mybatis 源码分析之整体架构分析》</a></p><p><a href="http://static.iocoder.cn/images/MyBatis/2020_01_04/06.png"><img src="http://totolovefree.top/test/202308031640306.png" alt="模块图"></a>模块图</p></blockquote><h1 id="666-彩蛋-—-推荐书籍"><a href="#666-彩蛋-—-推荐书籍" class="headerlink" title="666. 彩蛋 —- 推荐书籍"></a>666. 彩蛋 —- 推荐书籍</h1><ul><li><a href="https://item.jd.com/12125531.html">《MyBatis 技术内幕》</a></li><li>田小波的 <a href="https://www.tianxiaobo.com/2018/07/16/MyBatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%AF%BC%E8%AF%BB/">《MyBatis 源码分析系列文章导读》</a> </li><li>无忌的 <a href="https://my.oschina.net/wenjinglian/blog/1625437">《MyBatis 源码解读之源码结构》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;精尽-MyBatis-源码分析-——-项目结构一览&quot;&gt;&lt;a href=&quot;#精尽-MyBatis-源码分析-——-项目结构一览&quot; class=&quot;headerlink&quot; title=&quot;精尽 MyBatis 源码分析 —— 项目结构一览&quot;&gt;&lt;/a&gt;精尽 MyBatis 源码分析 —— 项目结构一览&lt;/h1&gt;&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;本文主要分享 &lt;strong&gt;MyBatis 的项目结构&lt;/strong&gt;。&lt;br&gt;希望通过本文能让胖友对 MyBatis 的整体项目有个简单的了解。</summary>
    
    
    
    <category term="Mybatis" scheme="https://totolove.cn/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://totolove.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--01 Mybatis源码-环境</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mybatis/01%20Mybatis%E6%BA%90%E7%A0%81-%E7%8E%AF%E5%A2%83/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mybatis/01%20Mybatis%E6%BA%90%E7%A0%81-%E7%8E%AF%E5%A2%83/</id>
    <published>2023-08-25T07:57:32.560Z</published>
    <updated>2023-08-25T08:30:14.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis源码-—-调式环境"><a href="#mybatis源码-—-调式环境" class="headerlink" title="mybatis源码 —- 调式环境"></a>mybatis源码 —- 调式环境</h2><h3 id="源码拉取"><a href="#源码拉取" class="headerlink" title="源码拉取"></a>源码拉取</h3><ul><li>使用idea <code>拉取源码</code>  <a href="https://github.com/HongZeTao/mybatis-3.git">https://github.com/HongZeTao/mybatis-3.git</a> <span id="more"></span></li><li>源码是我自己<code>fork</code>的，从官方仓库 <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a> <code>Fork</code> 出属于自己的仓库，可修改。</li><li><code>20230802</code>jdk版本要求<code>JDK11</code>以上了，否则得去找旧版源码。直接下载即可，idea 直接切换加载后切换jdk即可。</li></ul><h3 id="调式测试"><a href="#调式测试" class="headerlink" title="调式测试"></a>调式测试</h3><p>MyBatis 想要调试，非常方便，只需要打开 <code>org.apache.ibatis.autoconstructor.AutoConstructorTest</code> 单元测试类，任意一个单元测试方法，右键，开始调试即可。</p><blockquote><p><a href="http://svip.iocoder.cn/MyBatis/build-debugging-environment/">精尽 MyBatis 源码分析 —— 调试环境搭建(芋艿)</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mybatis源码-—-调式环境&quot;&gt;&lt;a href=&quot;#mybatis源码-—-调式环境&quot; class=&quot;headerlink&quot; title=&quot;mybatis源码 —- 调式环境&quot;&gt;&lt;/a&gt;mybatis源码 —- 调式环境&lt;/h2&gt;&lt;h3 id=&quot;源码拉取&quot;&gt;&lt;a href=&quot;#源码拉取&quot; class=&quot;headerlink&quot; title=&quot;源码拉取&quot;&gt;&lt;/a&gt;源码拉取&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用idea &lt;code&gt;拉取源码&lt;/code&gt;  &lt;a href=&quot;https://github.com/HongZeTao/mybatis-3.git&quot;&gt;https://github.com/HongZeTao/mybatis-3.git&lt;/a&gt;</summary>
    
    
    
    <category term="Mybatis" scheme="https://totolove.cn/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://totolove.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--00 Mybatis设计思路</title>
    <link href="https://totolove.cn/2023/08/25/Java/Mybatis/00%20Mybatis%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    <id>https://totolove.cn/2023/08/25/Java/Mybatis/00%20Mybatis%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</id>
    <published>2023-08-25T07:57:32.558Z</published>
    <updated>2023-08-25T08:30:08.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis设计思路"><a href="#mybatis设计思路" class="headerlink" title="mybatis设计思路"></a>mybatis设计思路</h2><ol><li>Mybatis是应用于Java应用程序的一个持久层框架。在Java应用程序中管理数据库访问。</li><li>设计思路最主要的是让SQL查询（数据库操作）与Java代码分离，提供更好的可维护性、灵活性和性能。</li></ol><blockquote><p>传统的jdbc中，每次都需要在java代码写冗长的一段代码来建立连接和构建查询语句、解析结果。</p></blockquote><h2 id="MyBatis-的一些核心设计思路："><a href="#MyBatis-的一些核心设计思路：" class="headerlink" title="MyBatis 的一些核心设计思路："></a>MyBatis 的一些核心设计思路：<span id="more"></span></h2><ol><li><strong>SQL与Java代码的分离：</strong> MyBatis的主要目标之一是将SQL语句与Java代码分离，从而使开发人员可以专注于编写Java代码而不必过多关心SQL语句的细节。这通过将SQL语句存储在XML配置文件中，以及提供注解方式来实现。</li><li><strong>对象关系映射（ORM）：</strong> MyBatis支持将数据库中的记录映射为Java对象，从而实现了对象关系映射。通过配置映射关系，MyBatis可以将查询结果自动映射到Java对象，简化了数据的转换和处理。</li><li><strong>灵活的SQL编写：</strong> MyBatis允许开发人员编写原生SQL语句，这意味着你可以完全控制所执行的SQL语句。这对于复杂的查询或特定数据库特性的使用非常有用。</li><li><strong>参数映射：</strong> MyBatis支持将Java方法的参数映射到SQL语句中。这使得在SQL语句中使用参数变得非常简单，可以更轻松地构建动态的SQL查询。</li><li><strong>缓存机制：</strong> MyBatis提供了缓存支持，可以将查询结果缓存起来，以减少对数据库的频繁访问。这有助于提高应用程序的性能。</li><li><strong>插件机制：</strong> MyBatis具有插件扩展机制，允许开发人员编写自定义插件来扩展框架的功能。这使得可以根据项目需求来定制和扩展MyBatis的行为。</li><li><strong>事务管理：</strong> MyBatis可以集成到Java事务管理中，确保数据库操作的一致性和可靠性。</li><li><strong>易于集成：</strong> MyBatis可以轻松集成到各种Java应用程序中，无论是基于Spring框架还是独立应用。</li><li><strong>简化数据库操作：</strong> MyBatis封装了很多数据库操作的细节，使数据库操作更加简单，避免了繁琐的JDBC代码编写。</li></ol><p>总的来说，MyBatis的设计思路是为了在数据库访问层提供更好的灵活性和控制力，同时保持了对SQL的直接控制能力，从而在性能和可维护性之间找到了一个平衡点。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mybatis设计思路&quot;&gt;&lt;a href=&quot;#mybatis设计思路&quot; class=&quot;headerlink&quot; title=&quot;mybatis设计思路&quot;&gt;&lt;/a&gt;mybatis设计思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Mybatis是应用于Java应用程序的一个持久层框架。在Java应用程序中管理数据库访问。&lt;/li&gt;
&lt;li&gt;设计思路最主要的是让SQL查询（数据库操作）与Java代码分离，提供更好的可维护性、灵活性和性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;传统的jdbc中，每次都需要在java代码写冗长的一段代码来建立连接和构建查询语句、解析结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis-的一些核心设计思路：&quot;&gt;&lt;a href=&quot;#MyBatis-的一些核心设计思路：&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 的一些核心设计思路：&quot;&gt;&lt;/a&gt;MyBatis 的一些核心设计思路：</summary>
    
    
    
    <category term="Mybatis" scheme="https://totolove.cn/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://totolove.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MAVEN--MAVEN使用</title>
    <link href="https://totolove.cn/2023/08/25/Java/maven/maven%E4%BD%BF%E7%94%A8/"/>
    <id>https://totolove.cn/2023/08/25/Java/maven/maven%E4%BD%BF%E7%94%A8/</id>
    <published>2023-08-25T07:57:32.552Z</published>
    <updated>2023-08-25T08:27:50.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目前的技术在开发中存在的问题"><a href="#目前的技术在开发中存在的问题" class="headerlink" title="目前的技术在开发中存在的问题"></a>目前的技术在开发中存在的问题</h3><p>①一个项目就是一个工程<span id="more"></span></p><blockquote><p>如果项目非常庞大，就不适合继续使用package来划分模块。</p><p>应使用多模块，多模块间的依赖关系，包导入等都过于繁琐。</p></blockquote><p>②项目中需要的jar包必须手动”复制”、”粘贴”到WEB-INF&#x2F;ib目录下</p><blockquote><p>maven仓库，使用时“引用”接口，打包时才打包</p></blockquote><p>③jar包需要别人替我们准备好，或到官网下载<br>④一个jar包依赖的其他jar包需要自己手动加入到项目中</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;目前的技术在开发中存在的问题&quot;&gt;&lt;a href=&quot;#目前的技术在开发中存在的问题&quot; class=&quot;headerlink&quot; title=&quot;目前的技术在开发中存在的问题&quot;&gt;&lt;/a&gt;目前的技术在开发中存在的问题&lt;/h3&gt;&lt;p&gt;①一个项目就是一个工程</summary>
    
    
    
    <category term="MAVEN" scheme="https://totolove.cn/categories/MAVEN/"/>
    
    
    <category term="MAVEN" scheme="https://totolove.cn/tags/MAVEN/"/>
    
  </entry>
  
  <entry>
    <title>Java-XML--使用XPath的步骤</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java-XML/Java%20XPath%E8%A7%A3%E6%9E%90%E5%99%A8%20-%20%E8%A7%A3%E6%9E%90XML%E6%96%87%E6%A1%A3/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java-XML/Java%20XPath%E8%A7%A3%E6%9E%90%E5%99%A8%20-%20%E8%A7%A3%E6%9E%90XML%E6%96%87%E6%A1%A3/</id>
    <published>2023-08-25T07:57:32.517Z</published>
    <updated>2023-08-25T08:27:16.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用XPath的步骤"><a href="#使用XPath的步骤" class="headerlink" title="使用XPath的步骤"></a>使用XPath的步骤</h2><p>​以下是使用XPath解析器在解析文档时使用的步骤。</p><ul><li>​导入XML相关的软件包。</li><li>​创建DocumentBuilder</li><li>​从文件或数据流创建一个文档<span id="more"></span></li><li>​创建XPath对象和XPath的路径表达式</li><li>​编译XPath表达式使用XPath.compile() ，并由XPath.evaluate()评估计算获得一个节点列表</li><li>​遍历节点列表。</li><li>​检查属性</li><li>​检查子元素</li></ul><p>​<strong>导入XML相关的软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.w3c.dom.*;</span><br><span class="line">import org.xml.sax.*;</span><br><span class="line">import javax.xml.parsers.*;</span><br><span class="line">import javax.xml.xpath.*;</span><br><span class="line">import java.io.*;</span><br></pre></td></tr></table></figure><p>​<strong>创建DocumentBuilder</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory factory =</span><br><span class="line">DocumentBuilderFactory.newInstance();</span><br><span class="line">DocumentBuilder builder = factory.newDocumentBuilder();</span><br></pre></td></tr></table></figure><p>​<strong>从文件或数据流创建一个文档</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder xmlStringBuilder = new StringBuilder();</span><br><span class="line">xmlStringBuilder.append(&quot;&lt;?xml version=&quot;1.0&quot;?&gt; &lt;class&gt; &lt;/class&gt;&quot;);</span><br><span class="line">ByteArrayInputStream input =  new ByteArrayInputStream(</span><br><span class="line">   xmlStringBuilder.toString().getBytes(&quot;UTF-8&quot;));</span><br><span class="line">Document doc = builder.parse(input);</span><br></pre></td></tr></table></figure><p>​<strong>构建XPath</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XPath xPath =  XPathFactory.newInstance().newXPath();</span><br></pre></td></tr></table></figure><p>​<strong>准备路径表达式，并计算它</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String expression = &quot;/class/student&quot;;        </span><br><span class="line">NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);</span><br></pre></td></tr></table></figure><p>​<strong>遍历节点列表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">   Node nNode = nodeList.item(i);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>检查属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//returns specific attribute</span><br><span class="line">getAttribute(&quot;attributeName&quot;); </span><br><span class="line">//returns a Map (table) of names/values</span><br><span class="line">getAttributes(); </span><br></pre></td></tr></table></figure><p>​<strong>检查子元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//returns a list of subelements of specified name</span><br><span class="line">getElementsByTagName(&quot;subelementName&quot;); </span><br><span class="line">//returns a list of all child nodes</span><br><span class="line">getChildNodes(); </span><br></pre></td></tr></table></figure><h2 id="演示示例："><a href="#演示示例：" class="headerlink" title="演示示例："></a>演示示例：</h2><p>​这里是我们需要分析输入文本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;class&gt;</span><br><span class="line">   &lt;student rollno=&quot;393&quot;&gt;</span><br><span class="line">      &lt;firstname&gt;dinkar&lt;/firstname&gt;</span><br><span class="line">      &lt;lastname&gt;kad&lt;/lastname&gt;</span><br><span class="line">      &lt;nickname&gt;dinkar&lt;/nickname&gt;</span><br><span class="line">      &lt;marks&gt;85&lt;/marks&gt;</span><br><span class="line">   &lt;/student&gt;</span><br><span class="line">   &lt;student rollno=&quot;493&quot;&gt;</span><br><span class="line">      &lt;firstname&gt;Vaneet&lt;/firstname&gt;</span><br><span class="line">      &lt;lastname&gt;Gupta&lt;/lastname&gt;</span><br><span class="line">      &lt;nickname&gt;vinni&lt;/nickname&gt;</span><br><span class="line">      &lt;marks&gt;95&lt;/marks&gt;</span><br><span class="line">   &lt;/student&gt;</span><br><span class="line">   &lt;student rollno=&quot;593&quot;&gt;</span><br><span class="line">      &lt;firstname&gt;jasvir&lt;/firstname&gt;</span><br><span class="line">      &lt;lastname&gt;singh&lt;/lastname&gt;</span><br><span class="line">      &lt;nickname&gt;jazz&lt;/nickname&gt;</span><br><span class="line">      &lt;marks&gt;90&lt;/marks&gt;</span><br><span class="line">   &lt;/student&gt;</span><br><span class="line">&lt;/class&gt;</span><br></pre></td></tr></table></figure><p>​ </p><p>​<strong>演示示例：</strong></p><p>​<em>XPathParserDemo.java</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.yiibai.xml;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line">import javax.xml.parsers.DocumentBuilder;</span><br><span class="line">import javax.xml.parsers.ParserConfigurationException;</span><br><span class="line">import javax.xml.xpath.XPath;</span><br><span class="line">import javax.xml.xpath.XPathConstants;</span><br><span class="line">import javax.xml.xpath.XPathExpressionException;</span><br><span class="line">import javax.xml.xpath.XPathFactory;</span><br><span class="line"></span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line">import org.w3c.dom.NodeList;</span><br><span class="line">import org.w3c.dom.Node;</span><br><span class="line">import org.w3c.dom.Element;</span><br><span class="line">import org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line">public class XPathParserDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         File inputFile = new File(&quot;input.txt&quot;);</span><br><span class="line">         DocumentBuilderFactory dbFactory </span><br><span class="line">            = DocumentBuilderFactory.newInstance();</span><br><span class="line">         DocumentBuilder dBuilder;</span><br><span class="line"></span><br><span class="line">         dBuilder = dbFactory.newDocumentBuilder();</span><br><span class="line"></span><br><span class="line">         Document doc = dBuilder.parse(inputFile);</span><br><span class="line">         doc.getDocumentElement().normalize();</span><br><span class="line"></span><br><span class="line">         XPath xPath =  XPathFactory.newInstance().newXPath();</span><br><span class="line"></span><br><span class="line">         String expression = &quot;/class/student&quot;;        </span><br><span class="line">         NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);</span><br><span class="line">         for (int i = 0; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">            Node nNode = nodeList.item(i);</span><br><span class="line">            System.out.println(&quot;\nCurrent Element :&quot; </span><br><span class="line">               + nNode.getNodeName());</span><br><span class="line">            if (nNode.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">               Element eElement = (Element) nNode;</span><br><span class="line">               System.out.println(&quot;Student roll no : &quot; </span><br><span class="line">                  + eElement.getAttribute(&quot;rollno&quot;));</span><br><span class="line">               System.out.println(&quot;First Name : &quot; </span><br><span class="line">                  + eElement</span><br><span class="line">                     .getElementsByTagName(&quot;firstname&quot;)</span><br><span class="line">                     .item(0)</span><br><span class="line">                     .getTextContent());</span><br><span class="line">               System.out.println(&quot;Last Name : &quot; </span><br><span class="line">                  + eElement</span><br><span class="line">                     .getElementsByTagName(&quot;lastname&quot;)</span><br><span class="line">                     .item(0)</span><br><span class="line">                     .getTextContent());</span><br><span class="line">               System.out.println(&quot;Nick Name : &quot; </span><br><span class="line">                  + eElement</span><br><span class="line">                     .getElementsByTagName(&quot;nickname&quot;)</span><br><span class="line">                     .item(0)</span><br><span class="line">                     .getTextContent());</span><br><span class="line">               System.out.println(&quot;Marks : &quot; </span><br><span class="line">                  + eElement</span><br><span class="line">                     .getElementsByTagName(&quot;marks&quot;)</span><br><span class="line">                     .item(0)</span><br><span class="line">                     .getTextContent());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; catch (ParserConfigurationException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; catch (SAXException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; catch (XPathExpressionException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这将产生以下结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Current Element :student</span><br><span class="line">Student roll no : 393</span><br><span class="line">First Name : dinkar</span><br><span class="line">Last Name : kad</span><br><span class="line">Nick Name : dinkar</span><br><span class="line">Marks : 85</span><br><span class="line"></span><br><span class="line">Current Element :student</span><br><span class="line">Student roll no : 493</span><br><span class="line">First Name : Vaneet</span><br><span class="line">Last Name : Gupta</span><br><span class="line">Nick Name : vinni</span><br><span class="line">Marks : 95</span><br><span class="line"></span><br><span class="line">Current Element :student</span><br><span class="line">Student roll no : 593</span><br><span class="line">First Name : jasvir</span><br><span class="line">Last Name : singh</span><br><span class="line">Nick Name : jazz</span><br><span class="line">Marks : 90</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/java_xml/java_xpath_parse_document.html">https://www.yiibai.com/java_xml/java_xpath_parse_document.html</a> </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用XPath的步骤&quot;&gt;&lt;a href=&quot;#使用XPath的步骤&quot; class=&quot;headerlink&quot; title=&quot;使用XPath的步骤&quot;&gt;&lt;/a&gt;使用XPath的步骤&lt;/h2&gt;&lt;p&gt;​	以下是使用XPath解析器在解析文档时使用的步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​			导入XML相关的软件包。&lt;/li&gt;
&lt;li&gt;​			创建DocumentBuilder&lt;/li&gt;
&lt;li&gt;​			从文件或数据流创建一个文档</summary>
    
    
    
    <category term="Java-XML" scheme="https://totolove.cn/categories/Java-XML/"/>
    
    
    <category term="Java-XML" scheme="https://totolove.cn/tags/Java-XML/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶JVM--GC：垃圾优先回收器</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java-JVM/Java-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java-JVM/Java-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</id>
    <published>2023-08-25T07:57:32.512Z</published>
    <updated>2023-08-25T08:27:24.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GC：垃圾优先回收器"><a href="#GC：垃圾优先回收器" class="headerlink" title="GC：垃圾优先回收器"></a>GC：垃圾优先回收器</h2><p>传统垃圾回收器空间满了才回收，GC在<font color="green">空间还没满时就进行回收</font>。</p><p>划分成更小的区域，每次回收更快<span id="more"></span></p><h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p>E区：新对象</p><p>S区：E-&gt;S;S-&gt;S</p><p>O区：S-&gt;O(S移动超过次数)</p><p>H区：大对象</p><h2 id="划分原理"><a href="#划分原理" class="headerlink" title="划分原理"></a>划分原理</h2><h2 id="请不要主动频繁触发GC，GC-进行垃圾回收会触发STW，停止其他进程，影响正常用户。"><a href="#请不要主动频繁触发GC，GC-进行垃圾回收会触发STW，停止其他进程，影响正常用户。" class="headerlink" title="请不要主动频繁触发GC，GC 进行垃圾回收会触发STW，停止其他进程，影响正常用户。"></a>请不要主动频繁触发GC，GC 进行垃圾回收会触发STW，停止其他进程，影响正常用户。</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;GC：垃圾优先回收器&quot;&gt;&lt;a href=&quot;#GC：垃圾优先回收器&quot; class=&quot;headerlink&quot; title=&quot;GC：垃圾优先回收器&quot;&gt;&lt;/a&gt;GC：垃圾优先回收器&lt;/h2&gt;&lt;p&gt;传统垃圾回收器空间满了才回收，GC在&lt;font color=&quot;green&quot;&gt;空间还没满时就进行回收&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;划分成更小的区域，每次回收更快</summary>
    
    
    
    <category term="JVM" scheme="https://totolove.cn/categories/JVM/"/>
    
    
    <category term="JVM" scheme="https://totolove.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶JVM--Java 虚拟机的内存划分</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java-JVM/01%20Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java-JVM/01%20Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/</id>
    <published>2023-08-25T07:57:32.510Z</published>
    <updated>2023-08-25T08:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-虚拟机的内存划分"><a href="#Java-虚拟机的内存划分" class="headerlink" title="Java 虚拟机的内存划分"></a>Java 虚拟机的内存划分</h2><span id="more"></span><p><img src="http://totolovefree.top/test/202308011124931.png" alt="image-20230727093607200"></p><ul><li>程序计数器、本地方法栈、虚拟机栈</li><li>方法区、堆</li></ul><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td><code>虚拟机栈</code></td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td><code>堆内存</code></td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td><code>方法区</code></td><td>存储已被虚拟机加载的类信息、常量、(静态变量)、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native 的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Java-虚拟机的内存划分&quot;&gt;&lt;a href=&quot;#Java-虚拟机的内存划分&quot; class=&quot;headerlink&quot; title=&quot;Java 虚拟机的内存划分&quot;&gt;&lt;/a&gt;Java 虚拟机的内存划分&lt;/h2&gt;</summary>
    
    
    
    <category term="JVM" scheme="https://totolove.cn/categories/JVM/"/>
    
    
    <category term="JVM" scheme="https://totolove.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java应用--SpringBoot配置SSL证书--JKS格式</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/SpringBoot%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/SpringBoot%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</id>
    <published>2023-08-25T07:57:32.504Z</published>
    <updated>2023-08-25T08:23:50.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot配置SSL证书–JKS格式"><a href="#SpringBoot配置SSL证书–JKS格式" class="headerlink" title="SpringBoot配置SSL证书–JKS格式"></a>SpringBoot配置SSL证书–JKS格式</h2><p>准备工作</p><ul><li>申请证书（免费或购买），下载（证书 + 密钥）</li><li>域名解析</li><li>springboot项目<span id="more"></span></li></ul><blockquote><ol><li>将证书放到项目中，resource.ssl</li><li>添加配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 开启SSL</span><br><span class="line">server.ssl.enabled=true</span><br><span class="line"># 配置证书位置</span><br><span class="line">server.ssl.key-store=classpath:ssl/sd.totoadventuregroup.cn.jks</span><br><span class="line"># 证书密钥--私钥密码</span><br><span class="line">server.ssl.key-password=86mdwyl39b</span><br><span class="line"># 证书密钥--证书密码</span><br><span class="line">server.ssl.key-store-password=86mdwyl39b</span><br><span class="line"># 证书类型</span><br><span class="line">server.ssl.key-store-type=JKS</span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试，https成功访问、证书配置成功；http访问无法访问（提示TSL）</p></li><li><p>http转https，只能配置不同端口，当http-port与server.port相同端口占用</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.example.sdresult.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https配置，将http请求全部转发到https</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jacob</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;custom.http-port: 8090&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer httpPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 将http请求转换为https请求</span></span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">                <span class="type">SecurityConstraint</span> <span class="variable">constraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">                <span class="comment">// 默认为NONE</span></span><br><span class="line">                constraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">                <span class="comment">// 所有的东西都https</span></span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强制将所有的http请求转发到https</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> httpConnector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Connector <span class="title function_">httpConnector</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        <span class="comment">// connector监听的http端口号</span></span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setSecure(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 监听到http的端口号后转向到的https的端口号</span></span><br><span class="line">        connector.setRedirectPort(port);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SpringBoot配置SSL证书–JKS格式&quot;&gt;&lt;a href=&quot;#SpringBoot配置SSL证书–JKS格式&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot配置SSL证书–JKS格式&quot;&gt;&lt;/a&gt;SpringBoot配置SSL证书–JKS格式&lt;/h2&gt;&lt;p&gt;准备工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请证书（免费或购买），下载（证书 + 密钥）&lt;/li&gt;
&lt;li&gt;域名解析&lt;/li&gt;
&lt;li&gt;springboot项目</summary>
    
    
    
    <category term="Java应用" scheme="https://totolove.cn/categories/Java%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Java应用" scheme="https://totolove.cn/tags/Java%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java应用--Nginx 反向代理</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</id>
    <published>2023-08-25T07:57:32.501Z</published>
    <updated>2023-08-25T08:23:21.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx-反向代理配置"><a href="#Nginx-反向代理配置" class="headerlink" title="Nginx 反向代理配置"></a>Nginx 反向代理配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name your_domain.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://your_backend_server;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个基本的配置示例，其中：<span id="more"></span></p><ul><li><code>listen</code>指令用于指定Nginx监听的端口，这里使用80作为示例；</li><li><code>server_name</code>用于指定域名或IP地址，将请求匹配到该服务器块；</li><li><code>location /</code>定义了匹配的URL路径，这里是根路径 <code>/</code>；</li><li><code>proxy_pass</code>指令用于指定目标服务器的地址，可以是IP地址或域名；</li><li><code>proxy_set_header</code>指令用于设置转发请求的头信息，包括 <code>Host</code>、<code>X-Real-IP</code>和<code>X-Forwarded-For</code>。</li></ul><p>你可以根据你的实际需求进行调整。例如，如果你的目标服务器使用HTTPS，则可以使用<code>https://your_backend_server</code>作为<code>proxy_pass</code>的值，并配置其他必要的HTTPS设置。</p><p>请确保将上述配置保存为一个以 <code>.conf</code> 结尾的文件，并将其放置在Nginx配置文件夹的 <code>sites-available</code> 目录下（通常在 <code>/etc/nginx/sites-available/</code>）。然后，通过创建符号链接或编辑主配置文件（通常是 <code>/etc/nginx/nginx.conf</code>）来启用该配置。最后，重新加载或重启Nginx以使配置生效。</p><h2 id="Nginx-配置为-WebSocket-的反向代理"><a href="#Nginx-配置为-WebSocket-的反向代理" class="headerlink" title="Nginx 配置为 WebSocket 的反向代理"></a>Nginx 配置为 WebSocket 的反向代理</h2><p>要将 Nginx 配置为 WebSocket 的反向代理，你需要进行一些特殊的设置。下面是一个示例配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://your_backend_server;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个配置中，我们添加了一些特定于 WebSocket 的指令：</p><ul><li><code>proxy_http_version 1.1;</code> 告诉 Nginx 使用 HTTP&#x2F;1.1 协议。</li><li><code>proxy_set_header Upgrade $http_upgrade;</code> 设置 Upgrade 头信息，使 Nginx 能够识别 WebSocket 请求并升级协议。</li><li><code>proxy_set_header Connection &quot;upgrade&quot;;</code> 设置 Connection 头信息，告诉后端服务器保持连接升级。</li><li>其他的 <code>proxy_set_header</code> 指令是用来设置转发请求的头信息，和之前提到的示例一样。</li></ul><p>请注意，这里的配置假设你的 WebSocket 后端服务器在 <code>http://your_backend_server</code> 上运行。你需要将 <code>your_backend_server</code> 替换为你实际使用的 WebSocket 后端服务器的地址。</p><p>保存配置文件后，将其放置在 Nginx 配置文件夹的 <code>sites-available</code> 目录下（通常在 <code>/etc/nginx/sites-available/</code>）。然后，通过创建符号链接或编辑主配置文件（通常是 <code>/etc/nginx/nginx.conf</code>）来启用该配置。最后，重新加载或重启 Nginx 以使配置生效。</p><p>确保你的 WebSocket 后端服务器支持 WebSocket 协议，并正确处理 Upgrade 和 Connection 头信息。这样，当客户端通过 Nginx 进行连接时，Nginx 将会将 WebSocket 请求转发到后端服务器。</p><h2 id="Nginx-配置为-Socket-IO-的反向代理"><a href="#Nginx-配置为-Socket-IO-的反向代理" class="headerlink" title="Nginx 配置为 Socket.IO 的反向代理"></a>Nginx 配置为 Socket.IO 的反向代理</h2><p>要将 Nginx 配置为 Socket.IO 的反向代理，需要进行一些特定的设置。Socket.IO 是建立在 WebSocket 上的实时通信库，因此需要特殊的配置以支持它。下面是一个示例配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://your_backend_server;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Socket.IO specific configuration</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个配置中，我们添加了一些特定于 Socket.IO 的指令：</p><ul><li><code>proxy_http_version 1.1;</code> 告诉 Nginx 使用 HTTP&#x2F;1.1 协议。</li><li><code>proxy_set_header Upgrade $http_upgrade;</code> 设置 Upgrade 头信息，使 Nginx 能够识别 WebSocket 请求并升级协议。</li><li><code>proxy_set_header Connection &quot;upgrade&quot;;</code> 设置 Connection 头信息，告诉后端服务器保持连接升级。</li><li>其他的 <code>proxy_set_header</code> 指令是用来设置转发请求的头信息，和之前提到的示例一样。</li></ul><p>除了上述的指令，我们还添加了几个特定于 Socket.IO 的配置：</p><ul><li><code>proxy_set_header X-NginX-Proxy true;</code> 告诉后端服务器请求经过了 Nginx 反向代理。</li><li><code>proxy_redirect off;</code> 禁用对响应中的重定向进行重写，以避免与 Socket.IO 的处理冲突。</li><li><code>proxy_set_header X-Forwarded-Proto $scheme;</code> 设置 X-Forwarded-Proto 头信息，以便后端服务器正确识别协议（例如，http 或 https）。</li></ul><p>确保将 <code>your_backend_server</code> 替换为你实际使用的 Socket.IO 后端服务器的地址。</p><p>保存配置文件后，将其放置在 Nginx 配置文件夹的 <code>sites-available</code> 目录下（通常在 <code>/etc/nginx/sites-available/</code>）。然后，通过创建符号链接或编辑主配置文件（通常是 <code>/etc/nginx/nginx.conf</code>）来启用该配置。最后，重新加载或重启 Nginx 以使配置生效。</p><p>这样，当客户端通过 Nginx 进行连接时，Nginx 将会将 Socket.IO 请求转发到后端服务器，并正确处理 Socket.IO 的协议和特殊头信息。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Nginx-反向代理配置&quot;&gt;&lt;a href=&quot;#Nginx-反向代理配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 反向代理配置&quot;&gt;&lt;/a&gt;Nginx 反向代理配置&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name your_domain.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://your_backend_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个基本的配置示例，其中：</summary>
    
    
    
    <category term="Java应用" scheme="https://totolove.cn/categories/Java%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Java应用" scheme="https://totolove.cn/tags/Java%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java应用--@PostConstruct 注解</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/@PostConstruct%20%E6%B3%A8%E8%A7%A3/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%BA%94%E7%94%A8/@PostConstruct%20%E6%B3%A8%E8%A7%A3/</id>
    <published>2023-08-25T07:57:32.498Z</published>
    <updated>2023-08-25T08:14:13.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostConstruct-注解"><a href="#PostConstruct-注解" class="headerlink" title="@PostConstruct 注解"></a>@PostConstruct 注解</h1><p><em><strong>PostConstruct注释用于需要在依赖注入完成后执行任何初始化的方法上。</strong></em>（即初始化操作）</p><p>在将类放入服务之前必须调用此方法。所有支持依赖注入的类都必须支持该注释。即使类没有请求注入任何资源，使用PostConstruct注释的方法也必须被调用。只能用这个注释注释一个方法。应用PostConstruct注释的方法必须满足以下所有条件:<span id="more"></span></p><ol><li><p>除了拦截器这个特殊情况以外，其他情况都不允许有参数，否则spring框架会报IllegalStateException；而且返回值要是void，但实际也可以有返回值，至少不会报错，只会忽略</p></li><li><p>方法随便你用什么权限来修饰，public、protected、private都可以，反正功能是由反射来实现</p></li><li><p>方法不可以是static的，但可以是final的，所以，综上所述，在spring项目中，在一个bean的初始化过程中，方法执行先后顺序为：<code>Constructor &gt; @Autowired &gt; @PostConstruct</code></p><p>先执行完构造方法，再注入依赖，最后执行初始化操作，所以这个注解就避免了一些需要在构造方法里使用依赖组件的尴尬。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PostConstruct-注解&quot;&gt;&lt;a href=&quot;#PostConstruct-注解&quot; class=&quot;headerlink&quot; title=&quot;@PostConstruct 注解&quot;&gt;&lt;/a&gt;@PostConstruct 注解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PostConstruct注释用于需要在依赖注入完成后执行任何初始化的方法上。&lt;/strong&gt;&lt;/em&gt;（即初始化操作）&lt;/p&gt;
&lt;p&gt;在将类放入服务之前必须调用此方法。所有支持依赖注入的类都必须支持该注释。即使类没有请求注入任何资源，使用PostConstruct注释的方法也必须被调用。只能用这个注释注释一个方法。应用PostConstruct注释的方法必须满足以下所有条件:</summary>
    
    
    
    <category term="Java应用" scheme="https://totolove.cn/categories/Java%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Java应用" scheme="https://totolove.cn/tags/Java%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java基础--08多线程</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/08%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/08%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-08-25T06:23:20.998Z</published>
    <updated>2023-08-25T07:14:38.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li>程序：一段静态的代码</li><li>进程：程序的一次执行过程，或内存中正在运行的应用程序。进程为操作系统调度和分配资源的最小单位。</li><li>线程：进程细化为线程，一个进程同时执行多个线程即多线程。<code>CPU调度和执行的最小单位</code><span id="more"></span></li></ul><blockquote><p>启动一个spring（java）程序，即JVM实例，即进程，进程中同时处理多个线程任务，即多线程（CPU核心数）。</p><p>运行时内存中</p><ul><li><code>方法区和堆是线程共享的</code></li><li><code>虚拟机栈、本地方法栈、程序计数器是线程隔离的（每个线程有一份）</code></li></ul></blockquote><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><ul><li>分时调度</li><li>抢占式调度</li></ul><h2 id="串行、并行和并发"><a href="#串行、并行和并发" class="headerlink" title="串行、并行和并发"></a>串行、并行和并发</h2><ul><li>串行：一个接一个</li><li>并行：同时间多个，3个CPU做3件事（不涉及抢占CPU）</li><li>并发：A、B、C线程，1CPU，轮换交替执行ABC（抢占CPU）</li></ul><h2 id="java线程"><a href="#java线程" class="headerlink" title="java线程"></a>java线程</h2><ul><li><p>继承Thread</p></li><li><pre><code class="java">@AllArgsConstructorclass AThread extends Thread &#123;  @Override  public void run() &#123;    try &#123;      sleep(1000);    &#125; catch (InterruptedException e) &#123;      throw new RuntimeException(e);    &#125;    System.out.println(&quot;写自己的线程实现&quot;);  &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">- 实现Runnable</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  class BThread implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">      System.out.println(&quot;写自己的线程实现&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">Thread</span> <span class="variable">aThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AThread</span>();</span><br><span class="line">  <span class="type">Thread</span> <span class="variable">bThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BThread</span>());</span><br><span class="line">  aThread.start();</span><br><span class="line">  bThread.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写自己的线程实现B</span></span><br><span class="line"><span class="comment"> * 写自己的线程实现A</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p><code>如果aThread直接调研run方法，只是main方法主线程调用了一个方法，并不是多线程。</code></p><p><code>一个线程不能在执行start多次</code></p></blockquote><h3 id="Thread类方法"><a href="#Thread类方法" class="headerlink" title="Thread类方法"></a>Thread类方法</h3><ul><li>构造器<ol><li>public Thread(); 新线程</li><li>public Thread(String name); 指定名字新线程</li><li>public Thread(Runnable target); 指定目标对象的新线程 </li><li>public Thread(Runnable target, String name); 指定目标对象的新线程，并指定线程名</li></ol></li></ul><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><ul><li>start、stop</li><li>run</li><li>wait、sleep</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序：一段静态的代码&lt;/li&gt;
&lt;li&gt;进程：程序的一次执行过程，或内存中正在运行的应用程序。进程为操作系统调度和分配资源的最小单位。&lt;/li&gt;
&lt;li&gt;线程：进程细化为线程，一个进程同时执行多个线程即多线程。&lt;code&gt;CPU调度和执行的最小单位&lt;/code&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础--07异常处理</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/07%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/07%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2023-08-25T06:23:20.996Z</published>
    <updated>2023-08-25T07:14:33.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>try catch finally 手动捕获</li><li>throw 自动捕获<span id="more"></span></li></ul><h2 id="统一异常处理—-使用-ControllerAdvice实现全局异常处理器"><a href="#统一异常处理—-使用-ControllerAdvice实现全局异常处理器" class="headerlink" title="统一异常处理—-使用@ControllerAdvice实现全局异常处理器"></a>统一异常处理—-使用@ControllerAdvice实现全局异常处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(LoginException.class)</span><span class="comment">// 捕获的异常类型 LoginException.class：自定义异常</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">loginException</span><span class="params">(LoginException e)</span></span><br><span class="line">    &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(e.getMessage());<span class="comment">// 统一返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;try catch finally 手动捕获&lt;/li&gt;
&lt;li&gt;throw 自动捕获</summary>
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础--06面向对象特性</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/06%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/06%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7/</id>
    <published>2023-08-25T06:23:20.994Z</published>
    <updated>2023-08-25T07:14:28.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1. 封装性"></a>1. 封装性</h2><h3 id="1-1-为什么需要封装？"><a href="#1-1-为什么需要封装？" class="headerlink" title="1.1 为什么需要封装？"></a>1.1 为什么需要封装？</h3><ul><li>使用洗衣机，只需要按一下开关即可，需要知道洗衣机的内部结构吗？</li><li>$\textcolor</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-封装性&quot;&gt;&lt;a href=&quot;#1-封装性&quot; class=&quot;headerlink&quot; title=&quot;1. 封装性&quot;&gt;&lt;/a&gt;1. 封装性&lt;/h2&gt;&lt;h3 id=&quot;1-1-为什么需要封装？&quot;&gt;&lt;a href=&quot;#1-1-为什么需要封装？&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础--05面向对象</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/05%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/05%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-08-25T06:23:20.992Z</published>
    <updated>2023-08-25T07:39:54.248Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="1-程序设计的开发范式（面向对象、面向过程……）"><a href="#1-程序设计的开发范式（面向对象、面向过程……）" class="headerlink" title="1 程序设计的开发范式（面向对象、面向过程……）"></a>1 程序设计的开发范式（面向对象、面向过程……）</h1><ol><li><p><code>面向过程 POP</code></p><blockquote><p><img src="http://totolovefree.top/test/202308011127314.png" alt="image-20230728105140135"></p></blockquote></li><li><p><code>面向对象 OOP</code><span id="more"></span></p><blockquote><p><img src="http://totolovefree.top/test/202308011127041.png" alt="image-20230728105212908"></p></blockquote></li><li><p>指令式编程</p></li><li><p>函数式编程</p></li></ol><h1 id="2-面向对象-基础"><a href="#2-面向对象-基础" class="headerlink" title="2 面向对象-基础"></a>2 面向对象-基础</h1><p>面向对象是<code>抽象化</code>的过程</p><ul><li>Java 类和类的成员：属性、方法、构造器、代码块、内部类</li><li>[面向对象的特征](.\06 面向对象特性.md)：封装、继承、多态、（抽象）</li><li>其他关键字：this、super、package、import、private、public、static、final、interface、enum、abstract。。。</li></ul><h2 id="2-1-类和对象"><a href="#2-1-类和对象" class="headerlink" title="2.1 类和对象"></a>2.1 类和对象</h2><p><code>类（class）</code>和<code>对象（Object）</code>是面向对象的核心概念。</p><ul><li>类是具有相同特征的事物的抽象描述，是<code>抽象的</code>，概念上的定义。<ul><li>属性Field</li><li>方法Method</li><li>构造器Constructor</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">// getUser() 方法</span></span><br><span class="line"><span class="comment">// User() 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">// User 类 抽象出来的</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// name 属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// user 对象实例 具体的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象是实际存在的该类事物的<code>每个个体</code>，是<code>具体的</code>，也叫<code>实例（instance）</code></li></ul><h2 id="2-2-类和对象的内存解析"><a href="#2-2-类和对象的内存解析" class="headerlink" title="2.2 类和对象的内存解析"></a>2.2 类和对象的内存解析</h2><h3 id="2-2-1-对象的内存解析—-对象入堆"><a href="#2-2-1-对象的内存解析—-对象入堆" class="headerlink" title="2.2.1 对象的内存解析—-对象入堆"></a>2.2.1 对象的内存解析—-对象入堆</h3><ul><li>堆(heap)：new出来的结构，如对象中的属性。</li><li>栈(stack)：方法内定义的变量，存储在栈中。</li><li>方法区(method area)：存放类的模板？</li></ul><ol><li><p>创建类的一个对象，并赋值：</p><p><img src="http://totolovefree.top/test/202308011128262.png" alt="image-20230728112624646"></p></li><li><p>创建类的多个对象，赋值</p><p><img src="http://totolovefree.top/test/202308011128319.png" alt="image-20230728112928228"></p></li></ol><h3 id="2-2-2-方法调用的内存解析—-方法入栈"><a href="#2-2-2-方法调用的内存解析—-方法入栈" class="headerlink" title="2.2.2 方法调用的内存解析—-方法入栈"></a>2.2.2 方法调用的内存解析—-方法入栈</h3><ul><li>形参</li><li>实参</li></ul><ol><li><p>对象调用方法的过程</p><p><img src="http://totolovefree.top/test/202308011128997.png" alt="image-20230728152501135"></p></li></ol><h3 id="2-2-3-对象数组的内存解析"><a href="#2-2-3-对象数组的内存解析" class="headerlink" title="2.2.3 对象数组的内存解析"></a>2.2.3 对象数组的内存解析</h3><p><img src="http://totolovefree.top/test/202308011128206.png" alt="image-20230728153325305"></p><blockquote><p> 企业真题：</p><ol><li>Java内存结构：<a href=".%5C01.Java%E5%92%8CJVM.md">01. Java和JVM</a>。</li><li>main方法可以将public替换成private，变成普通方法，不再是程序入库。</li></ol></blockquote><h1 id="3-面向对象-进阶"><a href="#3-面向对象-进阶" class="headerlink" title="3. 面向对象-进阶"></a>3. 面向对象-进阶</h1><h2 id="3-1-this-关键字、super关键字"><a href="#3-1-this-关键字、super关键字" class="headerlink" title="3.1 this 关键字、super关键字"></a>3.1 this 关键字、super关键字</h2><ul><li>this：调用自己的属性、方法、构造器，当属性名和方法形参名一致时必须使用this来区分</li><li>super：调用父类的属性、方法、构造器</li><li>在子类的构造方法中，首行要么使用this，要么使用super。</li></ul><h2 id="3-2-重写和重载"><a href="#3-2-重写和重载" class="headerlink" title="3.2 重写和重载"></a>3.2 重写和重载</h2><ul><li><strong>在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下，</strong> 对方法体进行修改或重写，这就是重写。要注意<strong>子类函数的访问修饰权限不能少于父类的。</strong></li><li>一个类中，同名的方法如果有不同的参数列表（<strong>参数类型不同、参数个数不同甚至是参数顺序不同</strong>）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但<strong>不能通过返回类型是否相同来判断重载</strong>。</li></ul><h2 id="3-3-子类对象实例化的全过程"><a href="#3-3-子类对象实例化的全过程" class="headerlink" title="3.3 子类对象实例化的全过程"></a>3.3 子类对象实例化的全过程</h2><ul><li>从结果的角度看，体现了类的继承性：创建子类对象后，子类对象获取了父类中声明的所有属性和方法，在权限允许时可调用。</li><li>从过程的角度看：当通过子类的构造器创建对象时，子类的构造器一定会直接或间接的调用父类的构造器……直到调用了Object 类中的构造器为止。正因为我们调用过父类的构造器，所以会将父类中声明的所有属性和方法加载到内存中。</li></ul><h2 id="3-4-Object类"><a href="#3-4-Object类" class="headerlink" title="3.4 Object类"></a>3.4 Object类</h2><p>Java 中声明的类，如果没有显示的声明其父类，默认继承于Object 类(java,lang.Object)。</p><ul><li>clone()：不是复制地址，在堆空间创建一个相同的实例对象。</li><li>equals(xx)和hashCode()</li><li>toString()</li><li>finalize()：垃圾回收器GC要回收此对象时，调用如下的方法；子类重写此方法，可在释放对象前进行某些操作。9+不建议了，可能导致内部出现循环引用，导致此对象无法回收。</li><li>getClass()</li><li>wait() \ wait(xx) \ notify() \ notifyAll()：线程睡眠和唤醒</li></ul><blockquote><p>企业真题：</p><ol><li>&#x3D;&#x3D; 和equals的区别<ul><li>&#x3D;&#x3D;是运算符，适用于基本数据类型和引用数据类型。</li><li>基本数据类型判断数值是否相等（自动类型提升可比较不同基本数据类型<code>char c1 = &#39;A&#39;; int i = 65; sout(c1 == i); // true</code>）。</li><li>引用数据类型比较两个引用变量的地址值是否相等。</li><li>equals是方法，适用于引用数据类型。</li></ul></li></ol></blockquote><blockquote><p>临时思考：</p><ol><li>Object中equals如下，一个实例对象指向其在堆空间中的首地址，故如果没有重定义equals，则只有同一个实例对象才会返回true。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>堆内存空间释放后，物理内存未及时返还。每次调用GC回收，观察到堆内存确实释放了，但是物理内存每次都增加了。<a href="https://segmentfault.com/a/1190000040050819">参考：运维：你们 JAVA 服务内存占用太高，还只增不减！告警了，快来接锅 - 个人文章 - SegmentFault 思否</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;SdResultPo&gt; tempList;</span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">importDataTxt</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (multipartFile == <span class="literal">null</span> || multipartFile.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;文件不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清楚了对旧的全部实例的引用</span></span><br><span class="line">    tempList = <span class="literal">null</span>; <span class="comment">// 清楚 tempList 的引用</span></span><br><span class="line">    List&lt;SdResultPo&gt; sdResultPoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> multipartFile.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr)) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">SdResultPo</span> <span class="variable">sdResultPo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SdResultPo</span>(); <span class="comment">// 每一次都会在堆空间创建一个新的实例对象</span></span><br><span class="line">            sdResultPoList.add(sdResultPo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;文件读取错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里应该将sdResultPoList传递给对应的服务方法，进行进一步的处理。</span></span><br><span class="line">    <span class="comment">// 这是一个假设的服务方法，实际的方法可能会有所不同。</span></span><br><span class="line">    tempList = sdResultPoList;</span><br><span class="line">    System.gc();</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://totolovefree.top/test/202308011129285.png" alt="image-20230731105820012"><img src="http://totolovefree.top/test/202308011129713.png" alt="image-20230731105909896"></p></blockquote><h1 id="4-面向对象-高级"><a href="#4-面向对象-高级" class="headerlink" title="4. 面向对象-高级"></a>4. 面向对象-高级</h1><blockquote><p>跳过</p><ol><li>static关键字</li><li>代码块</li><li>final关键字</li><li>抽象类和抽象方法abstract</li><li>接口interface：接口的本质是契约、标准、规范，就像我们的法律一样。制定好后大家都要遵守。</li><li>内部类</li></ol></blockquote><h3 id="4-1-单例设计模式（等复习算法）"><a href="#4-1-单例设计模式（等复习算法）" class="headerlink" title="4.1 单例设计模式（等复习算法）"></a>4.1 单例设计模式（等复习算法）</h3><h3 id="4-2-模板方法设计模式（等复习算法）"><a href="#4-2-模板方法设计模式（等复习算法）" class="headerlink" title="4.2 模板方法设计模式（等复习算法）"></a>4.2 模板方法设计模式（等复习算法）</h3><h3 id="4-3-枚举类enum：定义的是枚举实例"><a href="#4-3-枚举类enum：定义的是枚举实例" class="headerlink" title="4.3 枚举类enum：定义的是枚举实例"></a>4.3 枚举类enum：定义的是枚举实例</h3><p>枚举类必须在开头实现多个对象，对象间用<code>,</code>隔开</p><ul><li><p>name()：获取实例名称</p></li><li><p>values()：获取所有的枚举实例数组</p></li><li><p>valueOf(String objName)：获取指定的枚举实例</p></li><li><p>枚举类实现接口</p><ol><li>枚举类重写接口方法，不同枚举对象调用方法，执行的是同一个方法。</li><li>每一个枚举对象也可单独重写接口方法</li></ol></li></ul><h3 id="4-4-注解"><a href="#4-4-注解" class="headerlink" title="4.4 注解"></a>4.4 注解</h3><ul><li>基本注解：@Override等</li><li>自定义注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义导出Excel数据注解</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Excel</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>元注解：对现有的注解进行解释说明的注解。<code>@Target、@Retention</code>、@Documented、@Inherited<ul><li><code>@Target</code>：注解能修饰的结构</li><li><code>@Retention</code>：注解保留的时间</li></ul></li><li>框架：注解 + 反射 + 设计模式</li></ul><h3 id="4-5-JUnit-单元测试"><a href="#4-5-JUnit-单元测试" class="headerlink" title="4.5 JUnit 单元测试"></a>4.5 JUnit 单元测试</h3><p>测试分为黑盒测试和白盒测试。JUnit 单元测试属于白盒测试。</p><h3 id="4-6-包装类"><a href="#4-6-包装类" class="headerlink" title="4.6 包装类"></a>4.6 包装类</h3><ol><li>为什么需要包装类？</li></ol><blockquote><p>java 中有基本数据类型和引用数据类型。使用基本数据类型在于效率，但是在使用只针对对象设计的API或新特性（例如泛型）时，怎么办？转包装类。</p><p>Object的equals方法和List的add方法。</p><p>但是包装类是无法使用 <code>+</code> 、<code>- </code>等运算的，所以包装类有时候也要转化为基本数据类型</p><p>包装类默认值是null</p></blockquote><ol start="2"><li>包装类</li></ol><blockquote><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>内存分析</p><p><img src="http://totolovefree.top/test/202308011129691.png" alt="image-20230731162653804"></p></blockquote><ol start="3"><li>String 与基本数据类型和包装类型间的转换</li></ol><ul><li><p>基本数据类型 –&gt; 包装类：调用包装类的valueOf方法</p></li><li><p>包装类 –&gt; 基本数据类型：调研包装类的xxxValue()</p></li><li><p>自动装箱、自动拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> i; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i2; <span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://totolovefree.top/test/202308011129237.png" alt="image-20230731164052832"></p><h1 id="5-企业真题"><a href="#5-企业真题" class="headerlink" title="5. 企业真题"></a>5. 企业真题</h1><blockquote><ol><li><p>抽象类和接口的对比。</p><blockquote><p><strong>抽象类和接口都不能被实例化，但可以定义抽象类和接口类型的引用。</strong></p><p><strong>一个类如果继承了抽象类，必须要对其中的抽象方法全部实现，否则该类仍然需要被声明为抽象类。如果实现了接口，也必须要对其中的抽象方法全部实现，否则编译错误。（接口中方法默认的是public abstract修饰的）</strong></p><p><strong>抽象类可以有构造方法，抽象方法和具体方法。</strong></p><p>　 <strong>接口不能有构造方法，而且其中的方法全部都是抽象方法。（接口中方法默认的是public abstract修饰的）（jdk8可以default定义默认实现）</strong></p><p><strong>抽象类中的成员可以使private、默认、protected、public的。接口中的成员全部都是public的。（jdk9，接口可以声明为private的）</strong></p><p><strong>抽象类可以 定义成员变量。接口中定义的成员变量其实都是常量。（接口中的成员变量默认是public static final 修饰的 ）</strong></p><p><img src="http://totolovefree.top/test/202308011129085.png" alt="image-20230731175327979"></p></blockquote></li><li><p>静态变量和实例变量的区别。</p></li><li><p>静态方法不能被重写。</p></li><li><p>static调用非static方法，只能通过新建对象来调用非静态方法。</p></li><li><p>静态代码块、代码块、构造器执行顺序：静态代码块、代码块、构造器</p></li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;1-程序设计的开发范式（面向对象、面向过程……）&quot;&gt;&lt;a href=&quot;#1-程序设计的开发范式（面向对象、面向过程……）&quot; class=&quot;headerlink&quot; title=&quot;1 程序设计的开发范式（面向对象、面向过程……）&quot;&gt;&lt;/a&gt;1 程序设计的开发范式（面向对象、面向过程……）&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;面向过程 POP&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://totolovefree.top/test/202308011127314.png&quot; alt=&quot;image-20230728105140135&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;面向对象 OOP&lt;/code&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础--04数组</title>
    <link href="https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/04%20%E6%95%B0%E7%BB%84/"/>
    <id>https://totolove.cn/2023/08/25/Java/Java%E5%9F%BA%E7%A1%80/04%20%E6%95%B0%E7%BB%84/</id>
    <published>2023-08-25T06:23:20.990Z</published>
    <updated>2023-08-25T07:14:05.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组定义（声明和初始化）：int[] arrays &#x3D; new int[16];</li><li>数组名arrays、索引(0-arrays.length)、元素arrays[1]、数组长度arrays.length</li></ul><h2 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h2><ul><li>数组创建会在内存开辟一整块<code>连续的空间（堆空间）</code>，大小取决于数组（长度和数组中元素数据类型）</li><li><code>数组的长度确定后，无法修改，数组扩容，新创建数组，复制，新的数组赋给旧数组(地址)。(原来地址的会被GC回收)</code></li><li>数组元素在内存中是依次紧密排序的，有序的。</li><li>数组，属于引用数据类型；数组元素，既可以是基本数据类型，也可以是引用数据类型。</li></ul><h2 id="一维数组的内存结构"><a href="#一维数组的内存结构" class="headerlink" title="一维数组的内存结构"></a>一维数组的内存结构</h2><span id="more"></span><ol><li><p>[Java虚拟机内存划分](.\01 Java虚拟机的内存划分.md)</p></li><li><p>与数组相关的内存结构。 ep：int[] arr &#x3D; new int[]{1,2,2}</p><ul><li><p>虚拟机栈：用于存放方法中声明的变量。 ep：arr</p></li><li><p>堆：用于存放数组中的元素。 ep：1,2,2</p></li></ul></li><li><p>一维数组内存解析</p><p><img src="http://totolovefree.top/test/202308011126106.png" alt="image-20230727095411924"></p><p><img src="http://totolovefree.top/test/202308011126612.png" alt="image-20230727102109528"></p></li><li><p>二维数组内存解析</p></li></ol><p>​<img src="http://totolovefree.top/test/202308011127536.png" alt="image-20230727103903064"></p><h2 id="数组中常见的算法"><a href="#数组中常见的算法" class="headerlink" title="数组中常见的算法"></a>数组中常见的算法</h2><ol><li>特征值计算：最大、最小、平均、求和</li><li>赋值、反转、复制</li><li>扩容和缩容：新创建，<code>数组的长度确定后，无法修改，数组扩容，新创建数组，复制，新的数组赋给旧数组(地址)。(原来地址的会被GC回收)</code></li><li>元素查找：二分查找、线性查找</li><li>排序：快速排序、冒泡排序、堆排序……</li></ol><h2 id="textcolor-red-TODO-算法后续再来"><a href="#textcolor-red-TODO-算法后续再来" class="headerlink" title="$\textcolor{red}{TODO 算法后续再来}$"></a>$\textcolor{red}{TODO 算法后续再来}$</h2><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><ul><li><p>升序排序、指定范围升序排序：</p><ul><li>快速排序：<code>sort</code></li><li>并行排序：<code>parallelSort</code></li></ul></li><li><p>数组元素交换：<code>swap</code></p></li><li><p>前缀累加：<code>parallelPrefix</code>。parallelPrefix([2,1,0,3]) &#x3D; [2,3,3,6]</p></li><li><p>数组拼接：<code>toString</code></p></li><li><p>数组元素的二分查找：<code>binarySearch</code></p></li><li><p>数组比较：<code>equals</code></p></li><li><p>数组赋值(每个元素)：<code>fill</code></p></li><li><p>数组复制：<code>copyOf</code></p></li></ul><h2 id="数组常见异常"><a href="#数组常见异常" class="headerlink" title="数组常见异常"></a>数组常见异常</h2><ul><li>数组越界</li><li>空指针异常</li></ul><blockquote><p>企业真题：</p><ol><li>数组没有length() 方法，是length 属性。</li><li>数组的索引，表示数组元素距离首地址的偏移量。</li><li><code>排序、查找的算法相关</code></li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组定义（声明和初始化）：int[] arrays &amp;#x3D; new int[16];&lt;/li&gt;
&lt;li&gt;数组名arrays、索引(0-arrays.length)、元素arrays[1]、数组长度arrays.length&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数组特点&quot;&gt;&lt;a href=&quot;#数组特点&quot; class=&quot;headerlink&quot; title=&quot;数组特点&quot;&gt;&lt;/a&gt;数组特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组创建会在内存开辟一整块&lt;code&gt;连续的空间（堆空间）&lt;/code&gt;，大小取决于数组（长度和数组中元素数据类型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数组的长度确定后，无法修改，数组扩容，新创建数组，复制，新的数组赋给旧数组(地址)。(原来地址的会被GC回收)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数组元素在内存中是依次紧密排序的，有序的。&lt;/li&gt;
&lt;li&gt;数组，属于引用数据类型；数组元素，既可以是基本数据类型，也可以是引用数据类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一维数组的内存结构&quot;&gt;&lt;a href=&quot;#一维数组的内存结构&quot; class=&quot;headerlink&quot; title=&quot;一维数组的内存结构&quot;&gt;&lt;/a&gt;一维数组的内存结构&lt;/h2&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://totolove.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
